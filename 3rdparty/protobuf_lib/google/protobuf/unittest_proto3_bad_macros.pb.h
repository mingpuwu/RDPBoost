// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/protobuf/unittest_proto3_bad_macros.proto
// Protobuf C++ Version: 5.29.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5fproto3_5fbad_5fmacros_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5fproto3_5fbad_5fmacros_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5fproto3_5fbad_5fmacros_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2funittest_5fproto3_5fbad_5fmacros_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_google_2fprotobuf_2funittest_5fproto3_5fbad_5fmacros_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protobuf_unittest {
enum GID : int {
  GID_UNUSED = 0,
  GID_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GID_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GID_IsValid(int value);
extern const uint32_t GID_internal_data_[];
constexpr GID GID_MIN = static_cast<GID>(0);
constexpr GID GID_MAX = static_cast<GID>(0);
constexpr int GID_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
GID_descriptor();
template <typename T>
const std::string& GID_Name(T value) {
  static_assert(std::is_same<T, GID>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GID_Name().");
  return GID_Name(static_cast<GID>(value));
}
template <>
inline const std::string& GID_Name(GID value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GID_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool GID_Parse(absl::string_view name, GID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GID>(
      GID_descriptor(), name, value);
}
enum UID : int {
  UID_UNUSED = 0,
  UID_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UID_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UID_IsValid(int value);
extern const uint32_t UID_internal_data_[];
constexpr UID UID_MIN = static_cast<UID>(0);
constexpr UID UID_MAX = static_cast<UID>(0);
constexpr int UID_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
UID_descriptor();
template <typename T>
const std::string& UID_Name(T value) {
  static_assert(std::is_same<T, UID>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UID_Name().");
  return UID_Name(static_cast<UID>(value));
}
template <>
inline const std::string& UID_Name(UID value) {
  return ::google::protobuf::internal::NameOfDenseEnum<UID_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool UID_Parse(absl::string_view name, UID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UID>(
      UID_descriptor(), name, value);
}
enum BadNames : int {
  PACKAGE = 0,
  PACKED = 1,
  linux = 2,
  DOMAIN = 3,
  TRUE = 4,
  FALSE = 5,
  CREATE_NEW = 6,
  DELETE = 7,
  DOUBLE_CLICK = 8,
  ERROR = 9,
  ERROR_BUSY = 10,
  ERROR_INSTALL_FAILED = 11,
  ERROR_NOT_FOUND = 12,
  GetClassName = 13,
  GetCurrentTime = 14,
  GetMessage = 15,
  GetObject = 16,
  IGNORE = 17,
  IN = 18,
  INPUT_KEYBOARD = 19,
  NO_ERROR = 20,
  OUT = 21,
  OPTIONAL = 22,
  NEAR = 23,
  NO_DATA = 24,
  REASON_UNKNOWN = 25,
  SERVICE_DISABLED = 26,
  SEVERITY_ERROR = 27,
  STATUS_PENDING = 28,
  STRICT = 29,
  TYPE_BOOL = 30,
  DEBUG = 31,
  BadNames_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BadNames_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BadNames_IsValid(int value);
extern const uint32_t BadNames_internal_data_[];
constexpr BadNames BadNames_MIN = static_cast<BadNames>(0);
constexpr BadNames BadNames_MAX = static_cast<BadNames>(31);
constexpr int BadNames_ARRAYSIZE = 31 + 1;
const ::google::protobuf::EnumDescriptor*
BadNames_descriptor();
template <typename T>
const std::string& BadNames_Name(T value) {
  static_assert(std::is_same<T, BadNames>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BadNames_Name().");
  return BadNames_Name(static_cast<BadNames>(value));
}
template <>
inline const std::string& BadNames_Name(BadNames value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BadNames_descriptor,
                                                 0, 31>(
      static_cast<int>(value));
}
inline bool BadNames_Parse(absl::string_view name, BadNames* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BadNames>(
      BadNames_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::protobuf_unittest::GID> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf_unittest::GID>() {
  return ::protobuf_unittest::GID_descriptor();
}
template <>
struct is_proto_enum<::protobuf_unittest::UID> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf_unittest::UID>() {
  return ::protobuf_unittest::UID_descriptor();
}
template <>
struct is_proto_enum<::protobuf_unittest::BadNames> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf_unittest::BadNames>() {
  return ::protobuf_unittest::BadNames_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5fproto3_5fbad_5fmacros_2eproto_2epb_2eh
