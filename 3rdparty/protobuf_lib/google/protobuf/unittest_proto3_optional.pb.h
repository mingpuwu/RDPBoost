// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/protobuf/unittest_proto3_optional.proto
// Protobuf C++ Version: 5.29.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto;
namespace protobuf_unittest {
class Proto3OptionalExtensions;
struct Proto3OptionalExtensionsDefaultTypeInternal;
extern Proto3OptionalExtensionsDefaultTypeInternal _Proto3OptionalExtensions_default_instance_;
class TestProto3Optional;
struct TestProto3OptionalDefaultTypeInternal;
extern TestProto3OptionalDefaultTypeInternal _TestProto3Optional_default_instance_;
class TestProto3OptionalMessage;
struct TestProto3OptionalMessageDefaultTypeInternal;
extern TestProto3OptionalMessageDefaultTypeInternal _TestProto3OptionalMessage_default_instance_;
class TestProto3OptionalMessage_NestedMessage;
struct TestProto3OptionalMessage_NestedMessageDefaultTypeInternal;
extern TestProto3OptionalMessage_NestedMessageDefaultTypeInternal _TestProto3OptionalMessage_NestedMessage_default_instance_;
class TestProto3Optional_NestedMessage;
struct TestProto3Optional_NestedMessageDefaultTypeInternal;
extern TestProto3Optional_NestedMessageDefaultTypeInternal _TestProto3Optional_NestedMessage_default_instance_;
}  // namespace protobuf_unittest
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protobuf_unittest {
enum TestProto3Optional_NestedEnum : int {
  TestProto3Optional_NestedEnum_UNSPECIFIED = 0,
  TestProto3Optional_NestedEnum_FOO = 1,
  TestProto3Optional_NestedEnum_BAR = 2,
  TestProto3Optional_NestedEnum_BAZ = 3,
  TestProto3Optional_NestedEnum_NEG = -1,
  TestProto3Optional_NestedEnum_TestProto3Optional_NestedEnum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TestProto3Optional_NestedEnum_TestProto3Optional_NestedEnum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TestProto3Optional_NestedEnum_IsValid(int value);
extern const uint32_t TestProto3Optional_NestedEnum_internal_data_[];
constexpr TestProto3Optional_NestedEnum TestProto3Optional_NestedEnum_NestedEnum_MIN = static_cast<TestProto3Optional_NestedEnum>(-1);
constexpr TestProto3Optional_NestedEnum TestProto3Optional_NestedEnum_NestedEnum_MAX = static_cast<TestProto3Optional_NestedEnum>(3);
constexpr int TestProto3Optional_NestedEnum_NestedEnum_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
TestProto3Optional_NestedEnum_descriptor();
template <typename T>
const std::string& TestProto3Optional_NestedEnum_Name(T value) {
  static_assert(std::is_same<T, TestProto3Optional_NestedEnum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NestedEnum_Name().");
  return TestProto3Optional_NestedEnum_Name(static_cast<TestProto3Optional_NestedEnum>(value));
}
template <>
inline const std::string& TestProto3Optional_NestedEnum_Name(TestProto3Optional_NestedEnum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TestProto3Optional_NestedEnum_descriptor,
                                                 -1, 3>(
      static_cast<int>(value));
}
inline bool TestProto3Optional_NestedEnum_Parse(absl::string_view name, TestProto3Optional_NestedEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestProto3Optional_NestedEnum>(
      TestProto3Optional_NestedEnum_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TestProto3OptionalMessage_NestedMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestProto3OptionalMessage.NestedMessage) */ {
 public:
  inline TestProto3OptionalMessage_NestedMessage() : TestProto3OptionalMessage_NestedMessage(nullptr) {}
  ~TestProto3OptionalMessage_NestedMessage() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestProto3OptionalMessage_NestedMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestProto3OptionalMessage_NestedMessage(const TestProto3OptionalMessage_NestedMessage& from) : TestProto3OptionalMessage_NestedMessage(nullptr, from) {}
  inline TestProto3OptionalMessage_NestedMessage(TestProto3OptionalMessage_NestedMessage&& from) noexcept
      : TestProto3OptionalMessage_NestedMessage(nullptr, std::move(from)) {}
  inline TestProto3OptionalMessage_NestedMessage& operator=(const TestProto3OptionalMessage_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestProto3OptionalMessage_NestedMessage& operator=(TestProto3OptionalMessage_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestProto3OptionalMessage_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestProto3OptionalMessage_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestProto3OptionalMessage_NestedMessage*>(
        &_TestProto3OptionalMessage_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TestProto3OptionalMessage_NestedMessage& a, TestProto3OptionalMessage_NestedMessage& b) { a.Swap(&b); }
  inline void Swap(TestProto3OptionalMessage_NestedMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestProto3OptionalMessage_NestedMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestProto3OptionalMessage_NestedMessage* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TestProto3OptionalMessage_NestedMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestProto3OptionalMessage_NestedMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestProto3OptionalMessage_NestedMessage& from) { TestProto3OptionalMessage_NestedMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestProto3OptionalMessage_NestedMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestProto3OptionalMessage.NestedMessage"; }

 protected:
  explicit TestProto3OptionalMessage_NestedMessage(::google::protobuf::Arena* arena);
  TestProto3OptionalMessage_NestedMessage(::google::protobuf::Arena* arena, const TestProto3OptionalMessage_NestedMessage& from);
  TestProto3OptionalMessage_NestedMessage(::google::protobuf::Arena* arena, TestProto3OptionalMessage_NestedMessage&& from) noexcept
      : TestProto3OptionalMessage_NestedMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSFieldNumber = 1,
  };
  // string s = 1;
  void clear_s() ;
  const std::string& s() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_s(Arg_&& arg, Args_... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* value);

  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(
      const std::string& value);
  std::string* _internal_mutable_s();

  public:
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestProto3OptionalMessage.NestedMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      67, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestProto3OptionalMessage_NestedMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestProto3OptionalMessage_NestedMessage& from_msg);
    ::google::protobuf::internal::ArenaStringPtr s_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto;
};
// -------------------------------------------------------------------

class TestProto3Optional_NestedMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestProto3Optional.NestedMessage) */ {
 public:
  inline TestProto3Optional_NestedMessage() : TestProto3Optional_NestedMessage(nullptr) {}
  ~TestProto3Optional_NestedMessage() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestProto3Optional_NestedMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestProto3Optional_NestedMessage(const TestProto3Optional_NestedMessage& from) : TestProto3Optional_NestedMessage(nullptr, from) {}
  inline TestProto3Optional_NestedMessage(TestProto3Optional_NestedMessage&& from) noexcept
      : TestProto3Optional_NestedMessage(nullptr, std::move(from)) {}
  inline TestProto3Optional_NestedMessage& operator=(const TestProto3Optional_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestProto3Optional_NestedMessage& operator=(TestProto3Optional_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestProto3Optional_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestProto3Optional_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestProto3Optional_NestedMessage*>(
        &_TestProto3Optional_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TestProto3Optional_NestedMessage& a, TestProto3Optional_NestedMessage& b) { a.Swap(&b); }
  inline void Swap(TestProto3Optional_NestedMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestProto3Optional_NestedMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestProto3Optional_NestedMessage* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TestProto3Optional_NestedMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestProto3Optional_NestedMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestProto3Optional_NestedMessage& from) { TestProto3Optional_NestedMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestProto3Optional_NestedMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestProto3Optional.NestedMessage"; }

 protected:
  explicit TestProto3Optional_NestedMessage(::google::protobuf::Arena* arena);
  TestProto3Optional_NestedMessage(::google::protobuf::Arena* arena, const TestProto3Optional_NestedMessage& from);
  TestProto3Optional_NestedMessage(::google::protobuf::Arena* arena, TestProto3Optional_NestedMessage&& from) noexcept
      : TestProto3Optional_NestedMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBbFieldNumber = 1,
  };
  // optional int32 bb = 1;
  bool has_bb() const;
  void clear_bb() ;
  ::int32_t bb() const;
  void set_bb(::int32_t value);

  private:
  ::int32_t _internal_bb() const;
  void _internal_set_bb(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestProto3Optional.NestedMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestProto3Optional_NestedMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestProto3Optional_NestedMessage& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t bb_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto;
};
// -------------------------------------------------------------------

class Proto3OptionalExtensions final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protobuf_unittest.Proto3OptionalExtensions) */ {
 public:
  inline Proto3OptionalExtensions() : Proto3OptionalExtensions(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Proto3OptionalExtensions(
      ::google::protobuf::internal::ConstantInitialized);

  inline Proto3OptionalExtensions(const Proto3OptionalExtensions& from) : Proto3OptionalExtensions(nullptr, from) {}
  inline Proto3OptionalExtensions(Proto3OptionalExtensions&& from) noexcept
      : Proto3OptionalExtensions(nullptr, std::move(from)) {}
  inline Proto3OptionalExtensions& operator=(const Proto3OptionalExtensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proto3OptionalExtensions& operator=(Proto3OptionalExtensions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proto3OptionalExtensions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proto3OptionalExtensions* internal_default_instance() {
    return reinterpret_cast<const Proto3OptionalExtensions*>(
        &_Proto3OptionalExtensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Proto3OptionalExtensions& a, Proto3OptionalExtensions& b) { a.Swap(&b); }
  inline void Swap(Proto3OptionalExtensions* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proto3OptionalExtensions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proto3OptionalExtensions* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Proto3OptionalExtensions>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Proto3OptionalExtensions& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Proto3OptionalExtensions& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.Proto3OptionalExtensions"; }

 protected:
  explicit Proto3OptionalExtensions(::google::protobuf::Arena* arena);
  Proto3OptionalExtensions(::google::protobuf::Arena* arena, const Proto3OptionalExtensions& from);
  Proto3OptionalExtensions(::google::protobuf::Arena* arena, Proto3OptionalExtensions&& from) noexcept
      : Proto3OptionalExtensions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  static const int kExtNoOptionalFieldNumber = 355886728;
  static ::google::protobuf::internal::ExtensionIdentifier<
      ::google::protobuf::MessageOptions, ::google::protobuf::internal::PrimitiveTypeTraits< ::int32_t >, 5,
      false>
      ext_no_optional;
  static const int kExtWithOptionalFieldNumber = 355886729;
  static ::google::protobuf::internal::ExtensionIdentifier<
      ::google::protobuf::MessageOptions, ::google::protobuf::internal::PrimitiveTypeTraits< ::int32_t >, 5,
      false>
      ext_with_optional;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.Proto3OptionalExtensions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Proto3OptionalExtensions_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Proto3OptionalExtensions& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto;
};
// -------------------------------------------------------------------

class TestProto3OptionalMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestProto3OptionalMessage) */ {
 public:
  inline TestProto3OptionalMessage() : TestProto3OptionalMessage(nullptr) {}
  ~TestProto3OptionalMessage() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestProto3OptionalMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestProto3OptionalMessage(const TestProto3OptionalMessage& from) : TestProto3OptionalMessage(nullptr, from) {}
  inline TestProto3OptionalMessage(TestProto3OptionalMessage&& from) noexcept
      : TestProto3OptionalMessage(nullptr, std::move(from)) {}
  inline TestProto3OptionalMessage& operator=(const TestProto3OptionalMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestProto3OptionalMessage& operator=(TestProto3OptionalMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestProto3OptionalMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestProto3OptionalMessage* internal_default_instance() {
    return reinterpret_cast<const TestProto3OptionalMessage*>(
        &_TestProto3OptionalMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TestProto3OptionalMessage& a, TestProto3OptionalMessage& b) { a.Swap(&b); }
  inline void Swap(TestProto3OptionalMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestProto3OptionalMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestProto3OptionalMessage* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TestProto3OptionalMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestProto3OptionalMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestProto3OptionalMessage& from) { TestProto3OptionalMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestProto3OptionalMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestProto3OptionalMessage"; }

 protected:
  explicit TestProto3OptionalMessage(::google::protobuf::Arena* arena);
  TestProto3OptionalMessage(::google::protobuf::Arena* arena, const TestProto3OptionalMessage& from);
  TestProto3OptionalMessage(::google::protobuf::Arena* arena, TestProto3OptionalMessage&& from) noexcept
      : TestProto3OptionalMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using NestedMessage = TestProto3OptionalMessage_NestedMessage;

  // accessors -------------------------------------------------------
  enum : int {
    kNestedMessageFieldNumber = 1,
    kOptionalNestedMessageFieldNumber = 2,
  };
  // .protobuf_unittest.TestProto3OptionalMessage.NestedMessage nested_message = 1;
  bool has_nested_message() const;
  void clear_nested_message() ;
  const ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage& nested_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* release_nested_message();
  ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* mutable_nested_message();
  void set_allocated_nested_message(::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* value);
  void unsafe_arena_set_allocated_nested_message(::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* value);
  ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* unsafe_arena_release_nested_message();

  private:
  const ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage& _internal_nested_message() const;
  ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* _internal_mutable_nested_message();

  public:
  // optional .protobuf_unittest.TestProto3OptionalMessage.NestedMessage optional_nested_message = 2;
  bool has_optional_nested_message() const;
  void clear_optional_nested_message() ;
  const ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage& optional_nested_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* release_optional_nested_message();
  ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* mutable_optional_nested_message();
  void set_allocated_optional_nested_message(::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* value);
  void unsafe_arena_set_allocated_optional_nested_message(::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* value);
  ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* unsafe_arena_release_optional_nested_message();

  private:
  const ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage& _internal_optional_nested_message() const;
  ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* _internal_mutable_optional_nested_message();

  public:
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestProto3OptionalMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestProto3OptionalMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestProto3OptionalMessage& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* nested_message_;
    ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* optional_nested_message_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto;
};
// -------------------------------------------------------------------

class TestProto3Optional final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestProto3Optional) */ {
 public:
  inline TestProto3Optional() : TestProto3Optional(nullptr) {}
  ~TestProto3Optional() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestProto3Optional(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestProto3Optional(const TestProto3Optional& from) : TestProto3Optional(nullptr, from) {}
  inline TestProto3Optional(TestProto3Optional&& from) noexcept
      : TestProto3Optional(nullptr, std::move(from)) {}
  inline TestProto3Optional& operator=(const TestProto3Optional& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestProto3Optional& operator=(TestProto3Optional&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestProto3Optional& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestProto3Optional* internal_default_instance() {
    return reinterpret_cast<const TestProto3Optional*>(
        &_TestProto3Optional_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TestProto3Optional& a, TestProto3Optional& b) { a.Swap(&b); }
  inline void Swap(TestProto3Optional* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestProto3Optional* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestProto3Optional* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TestProto3Optional>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestProto3Optional& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestProto3Optional& from) { TestProto3Optional::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestProto3Optional* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestProto3Optional"; }

 protected:
  explicit TestProto3Optional(::google::protobuf::Arena* arena);
  TestProto3Optional(::google::protobuf::Arena* arena, const TestProto3Optional& from);
  TestProto3Optional(::google::protobuf::Arena* arena, TestProto3Optional&& from) noexcept
      : TestProto3Optional(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using NestedMessage = TestProto3Optional_NestedMessage;
  using NestedEnum = TestProto3Optional_NestedEnum;
  static constexpr NestedEnum UNSPECIFIED = TestProto3Optional_NestedEnum_UNSPECIFIED;
  static constexpr NestedEnum FOO = TestProto3Optional_NestedEnum_FOO;
  static constexpr NestedEnum BAR = TestProto3Optional_NestedEnum_BAR;
  static constexpr NestedEnum BAZ = TestProto3Optional_NestedEnum_BAZ;
  static constexpr NestedEnum NEG = TestProto3Optional_NestedEnum_NEG;
  static inline bool NestedEnum_IsValid(int value) {
    return TestProto3Optional_NestedEnum_IsValid(value);
  }
  static constexpr NestedEnum NestedEnum_MIN = TestProto3Optional_NestedEnum_NestedEnum_MIN;
  static constexpr NestedEnum NestedEnum_MAX = TestProto3Optional_NestedEnum_NestedEnum_MAX;
  static constexpr int NestedEnum_ARRAYSIZE = TestProto3Optional_NestedEnum_NestedEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NestedEnum_descriptor() {
    return TestProto3Optional_NestedEnum_descriptor();
  }
  template <typename T>
  static inline const std::string& NestedEnum_Name(T value) {
    return TestProto3Optional_NestedEnum_Name(value);
  }
  static inline bool NestedEnum_Parse(absl::string_view name, NestedEnum* value) {
    return TestProto3Optional_NestedEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kOptionalStringFieldNumber = 14,
    kOptionalBytesFieldNumber = 15,
    kOptionalCordFieldNumber = 16,
    kOptionalNestedMessageFieldNumber = 18,
    kLazyNestedMessageFieldNumber = 19,
    kOptionalInt64FieldNumber = 2,
    kOptionalInt32FieldNumber = 1,
    kOptionalUint32FieldNumber = 3,
    kOptionalUint64FieldNumber = 4,
    kOptionalSint64FieldNumber = 6,
    kOptionalSint32FieldNumber = 5,
    kOptionalFixed32FieldNumber = 7,
    kOptionalFixed64FieldNumber = 8,
    kOptionalSfixed64FieldNumber = 10,
    kOptionalSfixed32FieldNumber = 9,
    kOptionalFloatFieldNumber = 11,
    kOptionalDoubleFieldNumber = 12,
    kOptionalBoolFieldNumber = 13,
    kOptionalNestedEnumFieldNumber = 21,
    kSingularInt64FieldNumber = 23,
    kSingularInt32FieldNumber = 22,
  };
  // optional string optional_string = 14;
  bool has_optional_string() const;
  void clear_optional_string() ;
  const std::string& optional_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_optional_string(Arg_&& arg, Args_... args);
  std::string* mutable_optional_string();
  PROTOBUF_NODISCARD std::string* release_optional_string();
  void set_allocated_optional_string(std::string* value);

  private:
  const std::string& _internal_optional_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_string(
      const std::string& value);
  std::string* _internal_mutable_optional_string();

  public:
  // optional bytes optional_bytes = 15;
  bool has_optional_bytes() const;
  void clear_optional_bytes() ;
  const std::string& optional_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_optional_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_optional_bytes();
  PROTOBUF_NODISCARD std::string* release_optional_bytes();
  void set_allocated_optional_bytes(std::string* value);

  private:
  const std::string& _internal_optional_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_bytes(
      const std::string& value);
  std::string* _internal_mutable_optional_bytes();

  public:
  // optional string optional_cord = 16 [ctype = CORD];
  bool has_optional_cord() const;
  void clear_optional_cord() ;
  private:  // Hidden due to unknown ctype option.
  const std::string& optional_cord() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_optional_cord(Arg_&& arg, Args_... args);
  std::string* mutable_optional_cord();
  PROTOBUF_NODISCARD std::string* release_optional_cord();
  void set_allocated_optional_cord(std::string* value);

  private:
  const std::string& _internal_optional_cord() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_cord(
      const std::string& value);
  std::string* _internal_mutable_optional_cord();

  public:
  // optional .protobuf_unittest.TestProto3Optional.NestedMessage optional_nested_message = 18;
  bool has_optional_nested_message() const;
  void clear_optional_nested_message() ;
  const ::protobuf_unittest::TestProto3Optional_NestedMessage& optional_nested_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestProto3Optional_NestedMessage* release_optional_nested_message();
  ::protobuf_unittest::TestProto3Optional_NestedMessage* mutable_optional_nested_message();
  void set_allocated_optional_nested_message(::protobuf_unittest::TestProto3Optional_NestedMessage* value);
  void unsafe_arena_set_allocated_optional_nested_message(::protobuf_unittest::TestProto3Optional_NestedMessage* value);
  ::protobuf_unittest::TestProto3Optional_NestedMessage* unsafe_arena_release_optional_nested_message();

  private:
  const ::protobuf_unittest::TestProto3Optional_NestedMessage& _internal_optional_nested_message() const;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* _internal_mutable_optional_nested_message();

  public:
  // optional .protobuf_unittest.TestProto3Optional.NestedMessage lazy_nested_message = 19 [lazy = true];
  bool has_lazy_nested_message() const;
  void clear_lazy_nested_message() ;
  const ::protobuf_unittest::TestProto3Optional_NestedMessage& lazy_nested_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestProto3Optional_NestedMessage* release_lazy_nested_message();
  ::protobuf_unittest::TestProto3Optional_NestedMessage* mutable_lazy_nested_message();
  void set_allocated_lazy_nested_message(::protobuf_unittest::TestProto3Optional_NestedMessage* value);
  void unsafe_arena_set_allocated_lazy_nested_message(::protobuf_unittest::TestProto3Optional_NestedMessage* value);
  ::protobuf_unittest::TestProto3Optional_NestedMessage* unsafe_arena_release_lazy_nested_message();

  private:
  const ::protobuf_unittest::TestProto3Optional_NestedMessage& _internal_lazy_nested_message() const;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* _internal_mutable_lazy_nested_message();

  public:
  // optional int64 optional_int64 = 2;
  bool has_optional_int64() const;
  void clear_optional_int64() ;
  ::int64_t optional_int64() const;
  void set_optional_int64(::int64_t value);

  private:
  ::int64_t _internal_optional_int64() const;
  void _internal_set_optional_int64(::int64_t value);

  public:
  // optional int32 optional_int32 = 1;
  bool has_optional_int32() const;
  void clear_optional_int32() ;
  ::int32_t optional_int32() const;
  void set_optional_int32(::int32_t value);

  private:
  ::int32_t _internal_optional_int32() const;
  void _internal_set_optional_int32(::int32_t value);

  public:
  // optional uint32 optional_uint32 = 3;
  bool has_optional_uint32() const;
  void clear_optional_uint32() ;
  ::uint32_t optional_uint32() const;
  void set_optional_uint32(::uint32_t value);

  private:
  ::uint32_t _internal_optional_uint32() const;
  void _internal_set_optional_uint32(::uint32_t value);

  public:
  // optional uint64 optional_uint64 = 4;
  bool has_optional_uint64() const;
  void clear_optional_uint64() ;
  ::uint64_t optional_uint64() const;
  void set_optional_uint64(::uint64_t value);

  private:
  ::uint64_t _internal_optional_uint64() const;
  void _internal_set_optional_uint64(::uint64_t value);

  public:
  // optional sint64 optional_sint64 = 6;
  bool has_optional_sint64() const;
  void clear_optional_sint64() ;
  ::int64_t optional_sint64() const;
  void set_optional_sint64(::int64_t value);

  private:
  ::int64_t _internal_optional_sint64() const;
  void _internal_set_optional_sint64(::int64_t value);

  public:
  // optional sint32 optional_sint32 = 5;
  bool has_optional_sint32() const;
  void clear_optional_sint32() ;
  ::int32_t optional_sint32() const;
  void set_optional_sint32(::int32_t value);

  private:
  ::int32_t _internal_optional_sint32() const;
  void _internal_set_optional_sint32(::int32_t value);

  public:
  // optional fixed32 optional_fixed32 = 7;
  bool has_optional_fixed32() const;
  void clear_optional_fixed32() ;
  ::uint32_t optional_fixed32() const;
  void set_optional_fixed32(::uint32_t value);

  private:
  ::uint32_t _internal_optional_fixed32() const;
  void _internal_set_optional_fixed32(::uint32_t value);

  public:
  // optional fixed64 optional_fixed64 = 8;
  bool has_optional_fixed64() const;
  void clear_optional_fixed64() ;
  ::uint64_t optional_fixed64() const;
  void set_optional_fixed64(::uint64_t value);

  private:
  ::uint64_t _internal_optional_fixed64() const;
  void _internal_set_optional_fixed64(::uint64_t value);

  public:
  // optional sfixed64 optional_sfixed64 = 10;
  bool has_optional_sfixed64() const;
  void clear_optional_sfixed64() ;
  ::int64_t optional_sfixed64() const;
  void set_optional_sfixed64(::int64_t value);

  private:
  ::int64_t _internal_optional_sfixed64() const;
  void _internal_set_optional_sfixed64(::int64_t value);

  public:
  // optional sfixed32 optional_sfixed32 = 9;
  bool has_optional_sfixed32() const;
  void clear_optional_sfixed32() ;
  ::int32_t optional_sfixed32() const;
  void set_optional_sfixed32(::int32_t value);

  private:
  ::int32_t _internal_optional_sfixed32() const;
  void _internal_set_optional_sfixed32(::int32_t value);

  public:
  // optional float optional_float = 11;
  bool has_optional_float() const;
  void clear_optional_float() ;
  float optional_float() const;
  void set_optional_float(float value);

  private:
  float _internal_optional_float() const;
  void _internal_set_optional_float(float value);

  public:
  // optional double optional_double = 12;
  bool has_optional_double() const;
  void clear_optional_double() ;
  double optional_double() const;
  void set_optional_double(double value);

  private:
  double _internal_optional_double() const;
  void _internal_set_optional_double(double value);

  public:
  // optional bool optional_bool = 13;
  bool has_optional_bool() const;
  void clear_optional_bool() ;
  bool optional_bool() const;
  void set_optional_bool(bool value);

  private:
  bool _internal_optional_bool() const;
  void _internal_set_optional_bool(bool value);

  public:
  // optional .protobuf_unittest.TestProto3Optional.NestedEnum optional_nested_enum = 21;
  bool has_optional_nested_enum() const;
  void clear_optional_nested_enum() ;
  ::protobuf_unittest::TestProto3Optional_NestedEnum optional_nested_enum() const;
  void set_optional_nested_enum(::protobuf_unittest::TestProto3Optional_NestedEnum value);

  private:
  ::protobuf_unittest::TestProto3Optional_NestedEnum _internal_optional_nested_enum() const;
  void _internal_set_optional_nested_enum(::protobuf_unittest::TestProto3Optional_NestedEnum value);

  public:
  // int64 singular_int64 = 23;
  void clear_singular_int64() ;
  ::int64_t singular_int64() const;
  void set_singular_int64(::int64_t value);

  private:
  ::int64_t _internal_singular_int64() const;
  void _internal_set_singular_int64(::int64_t value);

  public:
  // int32 singular_int32 = 22;
  void clear_singular_int32() ;
  ::int32_t singular_int32() const;
  void set_singular_int32(::int32_t value);

  private:
  ::int32_t _internal_singular_int32() const;
  void _internal_set_singular_int32(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestProto3Optional)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 21, 2,
      89, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestProto3Optional_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestProto3Optional& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr optional_string_;
    ::google::protobuf::internal::ArenaStringPtr optional_bytes_;
    ::google::protobuf::internal::ArenaStringPtr optional_cord_;
    ::protobuf_unittest::TestProto3Optional_NestedMessage* optional_nested_message_;
    ::protobuf_unittest::TestProto3Optional_NestedMessage* lazy_nested_message_;
    ::int64_t optional_int64_;
    ::int32_t optional_int32_;
    ::uint32_t optional_uint32_;
    ::uint64_t optional_uint64_;
    ::int64_t optional_sint64_;
    ::int32_t optional_sint32_;
    ::uint32_t optional_fixed32_;
    ::uint64_t optional_fixed64_;
    ::int64_t optional_sfixed64_;
    ::int32_t optional_sfixed32_;
    float optional_float_;
    double optional_double_;
    bool optional_bool_;
    int optional_nested_enum_;
    ::int64_t singular_int64_;
    ::int32_t singular_int32_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestProto3Optional_NestedMessage

// optional int32 bb = 1;
inline bool TestProto3Optional_NestedMessage::has_bb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TestProto3Optional_NestedMessage::clear_bb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bb_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t TestProto3Optional_NestedMessage::bb() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.NestedMessage.bb)
  return _internal_bb();
}
inline void TestProto3Optional_NestedMessage::set_bb(::int32_t value) {
  _internal_set_bb(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.NestedMessage.bb)
}
inline ::int32_t TestProto3Optional_NestedMessage::_internal_bb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bb_;
}
inline void TestProto3Optional_NestedMessage::_internal_set_bb(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bb_ = value;
}

// -------------------------------------------------------------------

// TestProto3Optional

// optional int32 optional_int32 = 1;
inline bool TestProto3Optional::has_optional_int32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_int32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_int32_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t TestProto3Optional::optional_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_int32)
  return _internal_optional_int32();
}
inline void TestProto3Optional::set_optional_int32(::int32_t value) {
  _internal_set_optional_int32(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_int32)
}
inline ::int32_t TestProto3Optional::_internal_optional_int32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_int32_;
}
inline void TestProto3Optional::_internal_set_optional_int32(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_int32_ = value;
}

// optional int64 optional_int64 = 2;
inline bool TestProto3Optional::has_optional_int64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_int64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_int64_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t TestProto3Optional::optional_int64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_int64)
  return _internal_optional_int64();
}
inline void TestProto3Optional::set_optional_int64(::int64_t value) {
  _internal_set_optional_int64(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_int64)
}
inline ::int64_t TestProto3Optional::_internal_optional_int64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_int64_;
}
inline void TestProto3Optional::_internal_set_optional_int64(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_int64_ = value;
}

// optional uint32 optional_uint32 = 3;
inline bool TestProto3Optional::has_optional_uint32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_uint32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_uint32_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t TestProto3Optional::optional_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_uint32)
  return _internal_optional_uint32();
}
inline void TestProto3Optional::set_optional_uint32(::uint32_t value) {
  _internal_set_optional_uint32(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_uint32)
}
inline ::uint32_t TestProto3Optional::_internal_optional_uint32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_uint32_;
}
inline void TestProto3Optional::_internal_set_optional_uint32(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_uint32_ = value;
}

// optional uint64 optional_uint64 = 4;
inline bool TestProto3Optional::has_optional_uint64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_uint64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_uint64_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t TestProto3Optional::optional_uint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_uint64)
  return _internal_optional_uint64();
}
inline void TestProto3Optional::set_optional_uint64(::uint64_t value) {
  _internal_set_optional_uint64(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_uint64)
}
inline ::uint64_t TestProto3Optional::_internal_optional_uint64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_uint64_;
}
inline void TestProto3Optional::_internal_set_optional_uint64(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_uint64_ = value;
}

// optional sint32 optional_sint32 = 5;
inline bool TestProto3Optional::has_optional_sint32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_sint32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_sint32_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t TestProto3Optional::optional_sint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_sint32)
  return _internal_optional_sint32();
}
inline void TestProto3Optional::set_optional_sint32(::int32_t value) {
  _internal_set_optional_sint32(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_sint32)
}
inline ::int32_t TestProto3Optional::_internal_optional_sint32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_sint32_;
}
inline void TestProto3Optional::_internal_set_optional_sint32(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_sint32_ = value;
}

// optional sint64 optional_sint64 = 6;
inline bool TestProto3Optional::has_optional_sint64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_sint64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_sint64_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int64_t TestProto3Optional::optional_sint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_sint64)
  return _internal_optional_sint64();
}
inline void TestProto3Optional::set_optional_sint64(::int64_t value) {
  _internal_set_optional_sint64(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_sint64)
}
inline ::int64_t TestProto3Optional::_internal_optional_sint64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_sint64_;
}
inline void TestProto3Optional::_internal_set_optional_sint64(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_sint64_ = value;
}

// optional fixed32 optional_fixed32 = 7;
inline bool TestProto3Optional::has_optional_fixed32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_fixed32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_fixed32_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t TestProto3Optional::optional_fixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_fixed32)
  return _internal_optional_fixed32();
}
inline void TestProto3Optional::set_optional_fixed32(::uint32_t value) {
  _internal_set_optional_fixed32(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_fixed32)
}
inline ::uint32_t TestProto3Optional::_internal_optional_fixed32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_fixed32_;
}
inline void TestProto3Optional::_internal_set_optional_fixed32(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_fixed32_ = value;
}

// optional fixed64 optional_fixed64 = 8;
inline bool TestProto3Optional::has_optional_fixed64() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_fixed64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_fixed64_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint64_t TestProto3Optional::optional_fixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_fixed64)
  return _internal_optional_fixed64();
}
inline void TestProto3Optional::set_optional_fixed64(::uint64_t value) {
  _internal_set_optional_fixed64(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_fixed64)
}
inline ::uint64_t TestProto3Optional::_internal_optional_fixed64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_fixed64_;
}
inline void TestProto3Optional::_internal_set_optional_fixed64(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_fixed64_ = value;
}

// optional sfixed32 optional_sfixed32 = 9;
inline bool TestProto3Optional::has_optional_sfixed32() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_sfixed32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_sfixed32_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int32_t TestProto3Optional::optional_sfixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_sfixed32)
  return _internal_optional_sfixed32();
}
inline void TestProto3Optional::set_optional_sfixed32(::int32_t value) {
  _internal_set_optional_sfixed32(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_sfixed32)
}
inline ::int32_t TestProto3Optional::_internal_optional_sfixed32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_sfixed32_;
}
inline void TestProto3Optional::_internal_set_optional_sfixed32(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_sfixed32_ = value;
}

// optional sfixed64 optional_sfixed64 = 10;
inline bool TestProto3Optional::has_optional_sfixed64() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_sfixed64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_sfixed64_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int64_t TestProto3Optional::optional_sfixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_sfixed64)
  return _internal_optional_sfixed64();
}
inline void TestProto3Optional::set_optional_sfixed64(::int64_t value) {
  _internal_set_optional_sfixed64(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_sfixed64)
}
inline ::int64_t TestProto3Optional::_internal_optional_sfixed64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_sfixed64_;
}
inline void TestProto3Optional::_internal_set_optional_sfixed64(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_sfixed64_ = value;
}

// optional float optional_float = 11;
inline bool TestProto3Optional::has_optional_float() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_float() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_float_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float TestProto3Optional::optional_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_float)
  return _internal_optional_float();
}
inline void TestProto3Optional::set_optional_float(float value) {
  _internal_set_optional_float(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_float)
}
inline float TestProto3Optional::_internal_optional_float() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_float_;
}
inline void TestProto3Optional::_internal_set_optional_float(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_float_ = value;
}

// optional double optional_double = 12;
inline bool TestProto3Optional::has_optional_double() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_double() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_double_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double TestProto3Optional::optional_double() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_double)
  return _internal_optional_double();
}
inline void TestProto3Optional::set_optional_double(double value) {
  _internal_set_optional_double(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_double)
}
inline double TestProto3Optional::_internal_optional_double() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_double_;
}
inline void TestProto3Optional::_internal_set_optional_double(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_double_ = value;
}

// optional bool optional_bool = 13;
inline bool TestProto3Optional::has_optional_bool() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_bool() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_bool_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool TestProto3Optional::optional_bool() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_bool)
  return _internal_optional_bool();
}
inline void TestProto3Optional::set_optional_bool(bool value) {
  _internal_set_optional_bool(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_bool)
}
inline bool TestProto3Optional::_internal_optional_bool() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_bool_;
}
inline void TestProto3Optional::_internal_set_optional_bool(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_bool_ = value;
}

// optional string optional_string = 14;
inline bool TestProto3Optional::has_optional_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestProto3Optional::optional_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_string)
  return _internal_optional_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestProto3Optional::set_optional_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.optional_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_string)
}
inline std::string* TestProto3Optional::mutable_optional_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_optional_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestProto3Optional.optional_string)
  return _s;
}
inline const std::string& TestProto3Optional::_internal_optional_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_string_.Get();
}
inline void TestProto3Optional::_internal_set_optional_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.optional_string_.Set(value, GetArena());
}
inline std::string* TestProto3Optional::_internal_mutable_optional_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.optional_string_.Mutable( GetArena());
}
inline std::string* TestProto3Optional::release_optional_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestProto3Optional.optional_string)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.optional_string_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optional_string_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestProto3Optional::set_allocated_optional_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.optional_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.optional_string_.IsDefault()) {
          _impl_.optional_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestProto3Optional.optional_string)
}

// optional bytes optional_bytes = 15;
inline bool TestProto3Optional::has_optional_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_bytes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestProto3Optional::optional_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_bytes)
  return _internal_optional_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestProto3Optional::set_optional_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.optional_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_bytes)
}
inline std::string* TestProto3Optional::mutable_optional_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_optional_bytes();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestProto3Optional.optional_bytes)
  return _s;
}
inline const std::string& TestProto3Optional::_internal_optional_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_bytes_.Get();
}
inline void TestProto3Optional::_internal_set_optional_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.optional_bytes_.Set(value, GetArena());
}
inline std::string* TestProto3Optional::_internal_mutable_optional_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.optional_bytes_.Mutable( GetArena());
}
inline std::string* TestProto3Optional::release_optional_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestProto3Optional.optional_bytes)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.optional_bytes_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optional_bytes_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestProto3Optional::set_allocated_optional_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.optional_bytes_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.optional_bytes_.IsDefault()) {
          _impl_.optional_bytes_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestProto3Optional.optional_bytes)
}

// optional string optional_cord = 16 [ctype = CORD];
inline bool TestProto3Optional::has_optional_cord() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_cord() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_cord_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TestProto3Optional::optional_cord() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_cord)
  return _internal_optional_cord();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestProto3Optional::set_optional_cord(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.optional_cord_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_cord)
}
inline std::string* TestProto3Optional::mutable_optional_cord() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_optional_cord();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestProto3Optional.optional_cord)
  return _s;
}
inline const std::string& TestProto3Optional::_internal_optional_cord() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_cord_.Get();
}
inline void TestProto3Optional::_internal_set_optional_cord(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.optional_cord_.Set(value, GetArena());
}
inline std::string* TestProto3Optional::_internal_mutable_optional_cord() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.optional_cord_.Mutable( GetArena());
}
inline std::string* TestProto3Optional::release_optional_cord() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestProto3Optional.optional_cord)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.optional_cord_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optional_cord_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestProto3Optional::set_allocated_optional_cord(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.optional_cord_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.optional_cord_.IsDefault()) {
          _impl_.optional_cord_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestProto3Optional.optional_cord)
}

// optional .protobuf_unittest.TestProto3Optional.NestedMessage optional_nested_message = 18;
inline bool TestProto3Optional::has_optional_nested_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.optional_nested_message_ != nullptr);
  return value;
}
inline void TestProto3Optional::clear_optional_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.optional_nested_message_ != nullptr) _impl_.optional_nested_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::protobuf_unittest::TestProto3Optional_NestedMessage& TestProto3Optional::_internal_optional_nested_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::protobuf_unittest::TestProto3Optional_NestedMessage* p = _impl_.optional_nested_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestProto3Optional_NestedMessage&>(::protobuf_unittest::_TestProto3Optional_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestProto3Optional_NestedMessage& TestProto3Optional::optional_nested_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_nested_message)
  return _internal_optional_nested_message();
}
inline void TestProto3Optional::unsafe_arena_set_allocated_optional_nested_message(::protobuf_unittest::TestProto3Optional_NestedMessage* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.optional_nested_message_);
  }
  _impl_.optional_nested_message_ = reinterpret_cast<::protobuf_unittest::TestProto3Optional_NestedMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestProto3Optional.optional_nested_message)
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::release_optional_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* released = _impl_.optional_nested_message_;
  _impl_.optional_nested_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::unsafe_arena_release_optional_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestProto3Optional.optional_nested_message)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* temp = _impl_.optional_nested_message_;
  _impl_.optional_nested_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::_internal_mutable_optional_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.optional_nested_message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protobuf_unittest::TestProto3Optional_NestedMessage>(GetArena());
    _impl_.optional_nested_message_ = reinterpret_cast<::protobuf_unittest::TestProto3Optional_NestedMessage*>(p);
  }
  return _impl_.optional_nested_message_;
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::mutable_optional_nested_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* _msg = _internal_mutable_optional_nested_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestProto3Optional.optional_nested_message)
  return _msg;
}
inline void TestProto3Optional::set_allocated_optional_nested_message(::protobuf_unittest::TestProto3Optional_NestedMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.optional_nested_message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.optional_nested_message_ = reinterpret_cast<::protobuf_unittest::TestProto3Optional_NestedMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestProto3Optional.optional_nested_message)
}

// optional .protobuf_unittest.TestProto3Optional.NestedMessage lazy_nested_message = 19 [lazy = true];
inline bool TestProto3Optional::has_lazy_nested_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lazy_nested_message_ != nullptr);
  return value;
}
inline void TestProto3Optional::clear_lazy_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lazy_nested_message_ != nullptr) _impl_.lazy_nested_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::protobuf_unittest::TestProto3Optional_NestedMessage& TestProto3Optional::_internal_lazy_nested_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::protobuf_unittest::TestProto3Optional_NestedMessage* p = _impl_.lazy_nested_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestProto3Optional_NestedMessage&>(::protobuf_unittest::_TestProto3Optional_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestProto3Optional_NestedMessage& TestProto3Optional::lazy_nested_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.lazy_nested_message)
  return _internal_lazy_nested_message();
}
inline void TestProto3Optional::unsafe_arena_set_allocated_lazy_nested_message(::protobuf_unittest::TestProto3Optional_NestedMessage* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lazy_nested_message_);
  }
  _impl_.lazy_nested_message_ = reinterpret_cast<::protobuf_unittest::TestProto3Optional_NestedMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestProto3Optional.lazy_nested_message)
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::release_lazy_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* released = _impl_.lazy_nested_message_;
  _impl_.lazy_nested_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::unsafe_arena_release_lazy_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestProto3Optional.lazy_nested_message)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* temp = _impl_.lazy_nested_message_;
  _impl_.lazy_nested_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::_internal_mutable_lazy_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lazy_nested_message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protobuf_unittest::TestProto3Optional_NestedMessage>(GetArena());
    _impl_.lazy_nested_message_ = reinterpret_cast<::protobuf_unittest::TestProto3Optional_NestedMessage*>(p);
  }
  return _impl_.lazy_nested_message_;
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::mutable_lazy_nested_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* _msg = _internal_mutable_lazy_nested_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestProto3Optional.lazy_nested_message)
  return _msg;
}
inline void TestProto3Optional::set_allocated_lazy_nested_message(::protobuf_unittest::TestProto3Optional_NestedMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.lazy_nested_message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.lazy_nested_message_ = reinterpret_cast<::protobuf_unittest::TestProto3Optional_NestedMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestProto3Optional.lazy_nested_message)
}

// optional .protobuf_unittest.TestProto3Optional.NestedEnum optional_nested_enum = 21;
inline bool TestProto3Optional::has_optional_nested_enum() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void TestProto3Optional::clear_optional_nested_enum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_nested_enum_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::protobuf_unittest::TestProto3Optional_NestedEnum TestProto3Optional::optional_nested_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_nested_enum)
  return _internal_optional_nested_enum();
}
inline void TestProto3Optional::set_optional_nested_enum(::protobuf_unittest::TestProto3Optional_NestedEnum value) {
  _internal_set_optional_nested_enum(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_nested_enum)
}
inline ::protobuf_unittest::TestProto3Optional_NestedEnum TestProto3Optional::_internal_optional_nested_enum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::protobuf_unittest::TestProto3Optional_NestedEnum>(_impl_.optional_nested_enum_);
}
inline void TestProto3Optional::_internal_set_optional_nested_enum(::protobuf_unittest::TestProto3Optional_NestedEnum value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_nested_enum_ = value;
}

// int32 singular_int32 = 22;
inline void TestProto3Optional::clear_singular_int32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.singular_int32_ = 0;
}
inline ::int32_t TestProto3Optional::singular_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.singular_int32)
  return _internal_singular_int32();
}
inline void TestProto3Optional::set_singular_int32(::int32_t value) {
  _internal_set_singular_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.singular_int32)
}
inline ::int32_t TestProto3Optional::_internal_singular_int32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.singular_int32_;
}
inline void TestProto3Optional::_internal_set_singular_int32(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.singular_int32_ = value;
}

// int64 singular_int64 = 23;
inline void TestProto3Optional::clear_singular_int64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.singular_int64_ = ::int64_t{0};
}
inline ::int64_t TestProto3Optional::singular_int64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.singular_int64)
  return _internal_singular_int64();
}
inline void TestProto3Optional::set_singular_int64(::int64_t value) {
  _internal_set_singular_int64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.singular_int64)
}
inline ::int64_t TestProto3Optional::_internal_singular_int64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.singular_int64_;
}
inline void TestProto3Optional::_internal_set_singular_int64(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.singular_int64_ = value;
}

// -------------------------------------------------------------------

// TestProto3OptionalMessage_NestedMessage

// string s = 1;
inline void TestProto3OptionalMessage_NestedMessage::clear_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.s_.ClearToEmpty();
}
inline const std::string& TestProto3OptionalMessage_NestedMessage::s() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3OptionalMessage.NestedMessage.s)
  return _internal_s();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestProto3OptionalMessage_NestedMessage::set_s(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.s_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3OptionalMessage.NestedMessage.s)
}
inline std::string* TestProto3OptionalMessage_NestedMessage::mutable_s() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestProto3OptionalMessage.NestedMessage.s)
  return _s;
}
inline const std::string& TestProto3OptionalMessage_NestedMessage::_internal_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.s_.Get();
}
inline void TestProto3OptionalMessage_NestedMessage::_internal_set_s(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.s_.Set(value, GetArena());
}
inline std::string* TestProto3OptionalMessage_NestedMessage::_internal_mutable_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.s_.Mutable( GetArena());
}
inline std::string* TestProto3OptionalMessage_NestedMessage::release_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestProto3OptionalMessage.NestedMessage.s)
  return _impl_.s_.Release();
}
inline void TestProto3OptionalMessage_NestedMessage::set_allocated_s(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.s_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.s_.IsDefault()) {
          _impl_.s_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestProto3OptionalMessage.NestedMessage.s)
}

// -------------------------------------------------------------------

// TestProto3OptionalMessage

// .protobuf_unittest.TestProto3OptionalMessage.NestedMessage nested_message = 1;
inline bool TestProto3OptionalMessage::has_nested_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nested_message_ != nullptr);
  return value;
}
inline void TestProto3OptionalMessage::clear_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nested_message_ != nullptr) _impl_.nested_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage& TestProto3OptionalMessage::_internal_nested_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* p = _impl_.nested_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage&>(::protobuf_unittest::_TestProto3OptionalMessage_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage& TestProto3OptionalMessage::nested_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3OptionalMessage.nested_message)
  return _internal_nested_message();
}
inline void TestProto3OptionalMessage::unsafe_arena_set_allocated_nested_message(::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nested_message_);
  }
  _impl_.nested_message_ = reinterpret_cast<::protobuf_unittest::TestProto3OptionalMessage_NestedMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestProto3OptionalMessage.nested_message)
}
inline ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* TestProto3OptionalMessage::release_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* released = _impl_.nested_message_;
  _impl_.nested_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* TestProto3OptionalMessage::unsafe_arena_release_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestProto3OptionalMessage.nested_message)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* temp = _impl_.nested_message_;
  _impl_.nested_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* TestProto3OptionalMessage::_internal_mutable_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nested_message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protobuf_unittest::TestProto3OptionalMessage_NestedMessage>(GetArena());
    _impl_.nested_message_ = reinterpret_cast<::protobuf_unittest::TestProto3OptionalMessage_NestedMessage*>(p);
  }
  return _impl_.nested_message_;
}
inline ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* TestProto3OptionalMessage::mutable_nested_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* _msg = _internal_mutable_nested_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestProto3OptionalMessage.nested_message)
  return _msg;
}
inline void TestProto3OptionalMessage::set_allocated_nested_message(::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.nested_message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.nested_message_ = reinterpret_cast<::protobuf_unittest::TestProto3OptionalMessage_NestedMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestProto3OptionalMessage.nested_message)
}

// optional .protobuf_unittest.TestProto3OptionalMessage.NestedMessage optional_nested_message = 2;
inline bool TestProto3OptionalMessage::has_optional_nested_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.optional_nested_message_ != nullptr);
  return value;
}
inline void TestProto3OptionalMessage::clear_optional_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.optional_nested_message_ != nullptr) _impl_.optional_nested_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage& TestProto3OptionalMessage::_internal_optional_nested_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* p = _impl_.optional_nested_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage&>(::protobuf_unittest::_TestProto3OptionalMessage_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage& TestProto3OptionalMessage::optional_nested_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3OptionalMessage.optional_nested_message)
  return _internal_optional_nested_message();
}
inline void TestProto3OptionalMessage::unsafe_arena_set_allocated_optional_nested_message(::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.optional_nested_message_);
  }
  _impl_.optional_nested_message_ = reinterpret_cast<::protobuf_unittest::TestProto3OptionalMessage_NestedMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestProto3OptionalMessage.optional_nested_message)
}
inline ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* TestProto3OptionalMessage::release_optional_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* released = _impl_.optional_nested_message_;
  _impl_.optional_nested_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* TestProto3OptionalMessage::unsafe_arena_release_optional_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestProto3OptionalMessage.optional_nested_message)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* temp = _impl_.optional_nested_message_;
  _impl_.optional_nested_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* TestProto3OptionalMessage::_internal_mutable_optional_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.optional_nested_message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protobuf_unittest::TestProto3OptionalMessage_NestedMessage>(GetArena());
    _impl_.optional_nested_message_ = reinterpret_cast<::protobuf_unittest::TestProto3OptionalMessage_NestedMessage*>(p);
  }
  return _impl_.optional_nested_message_;
}
inline ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* TestProto3OptionalMessage::mutable_optional_nested_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* _msg = _internal_mutable_optional_nested_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestProto3OptionalMessage.optional_nested_message)
  return _msg;
}
inline void TestProto3OptionalMessage::set_allocated_optional_nested_message(::protobuf_unittest::TestProto3OptionalMessage_NestedMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.optional_nested_message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.optional_nested_message_ = reinterpret_cast<::protobuf_unittest::TestProto3OptionalMessage_NestedMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestProto3OptionalMessage.optional_nested_message)
}

// -------------------------------------------------------------------

// Proto3OptionalExtensions

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::protobuf_unittest::TestProto3Optional_NestedEnum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf_unittest::TestProto3Optional_NestedEnum>() {
  return ::protobuf_unittest::TestProto3Optional_NestedEnum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto_2epb_2eh
