// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/protobuf/map_lite_unittest.proto
// Protobuf C++ Version: 5.29.0-dev

#include "google/protobuf/map_lite_unittest.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace protobuf_unittest {

inline constexpr TestRequiredLite::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        a_{0},
        b_{0},
        c_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestRequiredLite::TestRequiredLite(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestRequiredLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequiredLiteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequiredLiteDefaultTypeInternal() {}
  union {
    TestRequiredLite _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequiredLiteDefaultTypeInternal _TestRequiredLite_default_instance_;

inline constexpr ForeignMessageArenaLite::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        c_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ForeignMessageArenaLite::ForeignMessageArenaLite(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ForeignMessageArenaLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForeignMessageArenaLiteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForeignMessageArenaLiteDefaultTypeInternal() {}
  union {
    ForeignMessageArenaLite _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForeignMessageArenaLiteDefaultTypeInternal _ForeignMessageArenaLite_default_instance_;

inline constexpr TestEnumMapPlusExtraLite::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : known_map_field_{},
        unknown_map_field_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestEnumMapPlusExtraLite::TestEnumMapPlusExtraLite(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestEnumMapPlusExtraLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMapPlusExtraLiteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMapPlusExtraLiteDefaultTypeInternal() {}
  union {
    TestEnumMapPlusExtraLite _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMapPlusExtraLiteDefaultTypeInternal _TestEnumMapPlusExtraLite_default_instance_;

inline constexpr TestEnumMapLite::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : known_map_field_{},
        unknown_map_field_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestEnumMapLite::TestEnumMapLite(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestEnumMapLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMapLiteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMapLiteDefaultTypeInternal() {}
  union {
    TestEnumMapLite _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMapLiteDefaultTypeInternal _TestEnumMapLite_default_instance_;

inline constexpr TestRequiredMessageMapLite::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : map_field_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestRequiredMessageMapLite::TestRequiredMessageMapLite(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestRequiredMessageMapLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequiredMessageMapLiteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequiredMessageMapLiteDefaultTypeInternal() {}
  union {
    TestRequiredMessageMapLite _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequiredMessageMapLiteDefaultTypeInternal _TestRequiredMessageMapLite_default_instance_;

inline constexpr TestMapLite::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : map_int32_int32_{},
        map_int64_int64_{},
        map_uint32_uint32_{},
        map_uint64_uint64_{},
        map_sint32_sint32_{},
        map_sint64_sint64_{},
        map_fixed32_fixed32_{},
        map_fixed64_fixed64_{},
        map_sfixed32_sfixed32_{},
        map_sfixed64_sfixed64_{},
        map_int32_float_{},
        map_int32_double_{},
        map_bool_bool_{},
        map_string_string_{},
        map_int32_bytes_{},
        map_int32_enum_{},
        map_int32_foreign_message_{},
        teboring_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestMapLite::TestMapLite(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestMapLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLiteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLiteDefaultTypeInternal() {}
  union {
    TestMapLite _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLiteDefaultTypeInternal _TestMapLite_default_instance_;

inline constexpr TestArenaMapLite::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : map_int32_int32_{},
        map_int64_int64_{},
        map_uint32_uint32_{},
        map_uint64_uint64_{},
        map_sint32_sint32_{},
        map_sint64_sint64_{},
        map_fixed32_fixed32_{},
        map_fixed64_fixed64_{},
        map_sfixed32_sfixed32_{},
        map_sfixed64_sfixed64_{},
        map_int32_float_{},
        map_int32_double_{},
        map_bool_bool_{},
        map_string_string_{},
        map_int32_bytes_{},
        map_int32_enum_{},
        map_int32_foreign_message_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestArenaMapLite::TestArenaMapLite(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestArenaMapLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLiteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLiteDefaultTypeInternal() {}
  union {
    TestArenaMapLite _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLiteDefaultTypeInternal _TestArenaMapLite_default_instance_;

inline constexpr TestMessageMapLite::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : map_int32_message_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestMessageMapLite::TestMessageMapLite(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestMessageMapLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessageMapLiteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessageMapLiteDefaultTypeInternal() {}
  union {
    TestMessageMapLite _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessageMapLiteDefaultTypeInternal _TestMessageMapLite_default_instance_;
}  // namespace protobuf_unittest
namespace protobuf_unittest {
PROTOBUF_CONSTINIT const uint32_t Proto2MapEnumLite_internal_data_[] = {
    196608u, 0u, };
bool Proto2MapEnumLite_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    Proto2MapEnumLite_strings[3] = {};

static const char Proto2MapEnumLite_names[] = {
    "PROTO2_MAP_ENUM_BAR_LITE"
    "PROTO2_MAP_ENUM_BAZ_LITE"
    "PROTO2_MAP_ENUM_FOO_LITE"
};

static const ::google::protobuf::internal::EnumEntry Proto2MapEnumLite_entries[] =
    {
        {{&Proto2MapEnumLite_names[0], 24}, 1},
        {{&Proto2MapEnumLite_names[24], 24}, 2},
        {{&Proto2MapEnumLite_names[48], 24}, 0},
};

static const int Proto2MapEnumLite_entries_by_number[] = {
    2,  // 0 -> PROTO2_MAP_ENUM_FOO_LITE
    0,  // 1 -> PROTO2_MAP_ENUM_BAR_LITE
    1,  // 2 -> PROTO2_MAP_ENUM_BAZ_LITE
};

const std::string& Proto2MapEnumLite_Name(Proto2MapEnumLite value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          Proto2MapEnumLite_entries, Proto2MapEnumLite_entries_by_number,
          3, Proto2MapEnumLite_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      Proto2MapEnumLite_entries, Proto2MapEnumLite_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : Proto2MapEnumLite_strings[idx].get();
}

bool Proto2MapEnumLite_Parse(absl::string_view name, Proto2MapEnumLite* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      Proto2MapEnumLite_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Proto2MapEnumLite>(int_value);
  }
  return success;
}
PROTOBUF_CONSTINIT const uint32_t Proto2MapEnumPlusExtraLite_internal_data_[] = {
    262144u, 0u, };
bool Proto2MapEnumPlusExtraLite_IsValid(int value) {
  return 0 <= value && value <= 3;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    Proto2MapEnumPlusExtraLite_strings[4] = {};

static const char Proto2MapEnumPlusExtraLite_names[] = {
    "E_PROTO2_MAP_ENUM_BAR_LITE"
    "E_PROTO2_MAP_ENUM_BAZ_LITE"
    "E_PROTO2_MAP_ENUM_EXTRA_LITE"
    "E_PROTO2_MAP_ENUM_FOO_LITE"
};

static const ::google::protobuf::internal::EnumEntry Proto2MapEnumPlusExtraLite_entries[] =
    {
        {{&Proto2MapEnumPlusExtraLite_names[0], 26}, 1},
        {{&Proto2MapEnumPlusExtraLite_names[26], 26}, 2},
        {{&Proto2MapEnumPlusExtraLite_names[52], 28}, 3},
        {{&Proto2MapEnumPlusExtraLite_names[80], 26}, 0},
};

static const int Proto2MapEnumPlusExtraLite_entries_by_number[] = {
    3,  // 0 -> E_PROTO2_MAP_ENUM_FOO_LITE
    0,  // 1 -> E_PROTO2_MAP_ENUM_BAR_LITE
    1,  // 2 -> E_PROTO2_MAP_ENUM_BAZ_LITE
    2,  // 3 -> E_PROTO2_MAP_ENUM_EXTRA_LITE
};

const std::string& Proto2MapEnumPlusExtraLite_Name(Proto2MapEnumPlusExtraLite value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          Proto2MapEnumPlusExtraLite_entries, Proto2MapEnumPlusExtraLite_entries_by_number,
          4, Proto2MapEnumPlusExtraLite_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      Proto2MapEnumPlusExtraLite_entries, Proto2MapEnumPlusExtraLite_entries_by_number, 4,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : Proto2MapEnumPlusExtraLite_strings[idx].get();
}

bool Proto2MapEnumPlusExtraLite_Parse(absl::string_view name, Proto2MapEnumPlusExtraLite* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      Proto2MapEnumPlusExtraLite_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Proto2MapEnumPlusExtraLite>(int_value);
  }
  return success;
}
PROTOBUF_CONSTINIT const uint32_t MapEnumLite_internal_data_[] = {
    196608u, 0u, };
bool MapEnumLite_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    MapEnumLite_strings[3] = {};

static const char MapEnumLite_names[] = {
    "MAP_ENUM_BAR_LITE"
    "MAP_ENUM_BAZ_LITE"
    "MAP_ENUM_FOO_LITE"
};

static const ::google::protobuf::internal::EnumEntry MapEnumLite_entries[] =
    {
        {{&MapEnumLite_names[0], 17}, 1},
        {{&MapEnumLite_names[17], 17}, 2},
        {{&MapEnumLite_names[34], 17}, 0},
};

static const int MapEnumLite_entries_by_number[] = {
    2,  // 0 -> MAP_ENUM_FOO_LITE
    0,  // 1 -> MAP_ENUM_BAR_LITE
    1,  // 2 -> MAP_ENUM_BAZ_LITE
};

const std::string& MapEnumLite_Name(MapEnumLite value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          MapEnumLite_entries, MapEnumLite_entries_by_number,
          3, MapEnumLite_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      MapEnumLite_entries, MapEnumLite_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : MapEnumLite_strings[idx].get();
}

bool MapEnumLite_Parse(absl::string_view name, MapEnumLite* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      MapEnumLite_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<MapEnumLite>(int_value);
  }
  return success;
}
// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

class TestMapLite::_Internal {
 public:
};

void TestMapLite::clear_map_int32_foreign_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.map_int32_foreign_message_.Clear();
}
TestMapLite::TestMapLite(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMapLite)
}
inline PROTOBUF_NDEBUG_INLINE TestMapLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestMapLite& from_msg)
      : map_int32_int32_{visibility, arena, from.map_int32_int32_},
        map_int64_int64_{visibility, arena, from.map_int64_int64_},
        map_uint32_uint32_{visibility, arena, from.map_uint32_uint32_},
        map_uint64_uint64_{visibility, arena, from.map_uint64_uint64_},
        map_sint32_sint32_{visibility, arena, from.map_sint32_sint32_},
        map_sint64_sint64_{visibility, arena, from.map_sint64_sint64_},
        map_fixed32_fixed32_{visibility, arena, from.map_fixed32_fixed32_},
        map_fixed64_fixed64_{visibility, arena, from.map_fixed64_fixed64_},
        map_sfixed32_sfixed32_{visibility, arena, from.map_sfixed32_sfixed32_},
        map_sfixed64_sfixed64_{visibility, arena, from.map_sfixed64_sfixed64_},
        map_int32_float_{visibility, arena, from.map_int32_float_},
        map_int32_double_{visibility, arena, from.map_int32_double_},
        map_bool_bool_{visibility, arena, from.map_bool_bool_},
        map_string_string_{visibility, arena, from.map_string_string_},
        map_int32_bytes_{visibility, arena, from.map_int32_bytes_},
        map_int32_enum_{visibility, arena, from.map_int32_enum_},
        map_int32_foreign_message_{visibility, arena, from.map_int32_foreign_message_},
        teboring_{visibility, arena, from.teboring_},
        _cached_size_{0} {}

TestMapLite::TestMapLite(
    ::google::protobuf::Arena* arena,
    const TestMapLite& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestMapLite* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMapLite)
}
inline PROTOBUF_NDEBUG_INLINE TestMapLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : map_int32_int32_{visibility, arena},
        map_int64_int64_{visibility, arena},
        map_uint32_uint32_{visibility, arena},
        map_uint64_uint64_{visibility, arena},
        map_sint32_sint32_{visibility, arena},
        map_sint64_sint64_{visibility, arena},
        map_fixed32_fixed32_{visibility, arena},
        map_fixed64_fixed64_{visibility, arena},
        map_sfixed32_sfixed32_{visibility, arena},
        map_sfixed64_sfixed64_{visibility, arena},
        map_int32_float_{visibility, arena},
        map_int32_double_{visibility, arena},
        map_bool_bool_{visibility, arena},
        map_string_string_{visibility, arena},
        map_int32_bytes_{visibility, arena},
        map_int32_enum_{visibility, arena},
        map_int32_foreign_message_{visibility, arena},
        teboring_{visibility, arena},
        _cached_size_{0} {}

inline void TestMapLite::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestMapLite::~TestMapLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMapLite)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TestMapLite::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<30>
    TestMapLite::_class_data_ = {
        {
            &_TestMapLite_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestMapLite::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<TestMapLite>(),
            ::google::protobuf::MessageLite::GetNewImpl<TestMapLite>(),
            ::google::protobuf::MessageLite::GetClearImpl<TestMapLite>(), &TestMapLite::ByteSizeLong,
                &TestMapLite::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_._cached_size_),
            true,
        },
        "protobuf_unittest.TestMapLite",
};
const ::google::protobuf::MessageLite::ClassData* TestMapLite::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 18, 20, 0, 2> TestMapLite::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    18, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294705152,  // skipmap
    offsetof(decltype(_table_), field_entries),
    18,  // num_field_entries
    20,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestMapLite>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // map<int32, int32> map_int32_int32 = 1;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_int32_int32_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int64, int64> map_int64_int64 = 2;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_int64_int64_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<uint32, uint32> map_uint32_uint32 = 3;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_uint32_uint32_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<uint64, uint64> map_uint64_uint64 = 4;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_uint64_uint64_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<sint32, sint32> map_sint32_sint32 = 5;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_sint32_sint32_), 0, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<sint64, sint64> map_sint64_sint64 = 6;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_sint64_sint64_), 0, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<fixed32, fixed32> map_fixed32_fixed32 = 7;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_fixed32_fixed32_), 0, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<fixed64, fixed64> map_fixed64_fixed64 = 8;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_fixed64_fixed64_), 0, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_sfixed32_sfixed32_), 0, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_sfixed64_sfixed64_), 0, 9,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, float> map_int32_float = 11;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_int32_float_), 0, 10,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, double> map_int32_double = 12;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_int32_double_), 0, 11,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<bool, bool> map_bool_bool = 13;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_bool_bool_), 0, 12,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<string, string> map_string_string = 14;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_string_string_), 0, 13,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, bytes> map_int32_bytes = 15;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_int32_bytes_), 0, 14,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, .protobuf_unittest.MapEnumLite> map_int32_enum = 16;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_int32_enum_), 0, 15,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, .protobuf_unittest.ForeignMessageLite> map_int32_foreign_message = 17;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.map_int32_foreign_message_), 0, 17,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, int32> teboring = 18;
    {PROTOBUF_FIELD_OFFSET(TestMapLite, _impl_.teboring_), 0, 19,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_int32_int32_)>(
        0, 0, 0, 5,
        5)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_int64_int64_)>(
        0, 0, 0, 3,
        3)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_uint32_uint32_)>(
        0, 0, 0, 13,
        13)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_uint64_uint64_)>(
        0, 0, 0, 4,
        4)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_sint32_sint32_)>(
        0, 0, 0, 17,
        17)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_sint64_sint64_)>(
        0, 0, 0, 18,
        18)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_fixed32_fixed32_)>(
        0, 0, 0, 7,
        7)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_fixed64_fixed64_)>(
        0, 0, 0, 6,
        6)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_sfixed32_sfixed32_)>(
        0, 0, 0, 15,
        15)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_sfixed64_sfixed64_)>(
        0, 0, 0, 16,
        16)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_int32_float_)>(
        0, 0, 0, 5,
        2)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_int32_double_)>(
        0, 0, 0, 5,
        1)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_bool_bool_)>(
        0, 0, 0, 8,
        8)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_string_string_)>(
        0, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_int32_bytes_)>(
        0, 0, 0, 5,
        12)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_int32_enum_)>(
        0, 0, 1, 5,
        14)},
    {::_pbi::FieldAuxEnumData{}, ::protobuf_unittest::MapEnumLite_internal_data_},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.map_int32_foreign_message_)>(
        0, 0, 0, 5,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::protobuf_unittest::ForeignMessageLite>},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMapLite()._impl_.teboring_)>(
        0, 0, 0, 5,
        5)},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TestMapLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMapLite)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_int32_int32_.Clear();
  _impl_.map_int64_int64_.Clear();
  _impl_.map_uint32_uint32_.Clear();
  _impl_.map_uint64_uint64_.Clear();
  _impl_.map_sint32_sint32_.Clear();
  _impl_.map_sint64_sint64_.Clear();
  _impl_.map_fixed32_fixed32_.Clear();
  _impl_.map_fixed64_fixed64_.Clear();
  _impl_.map_sfixed32_sfixed32_.Clear();
  _impl_.map_sfixed64_sfixed64_.Clear();
  _impl_.map_int32_float_.Clear();
  _impl_.map_int32_double_.Clear();
  _impl_.map_bool_bool_.Clear();
  _impl_.map_string_string_.Clear();
  _impl_.map_int32_bytes_.Clear();
  _impl_.map_int32_enum_.Clear();
  _impl_.map_int32_foreign_message_.Clear();
  _impl_.teboring_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestMapLite::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestMapLite& this_ = static_cast<const TestMapLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestMapLite::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestMapLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMapLite)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // map<int32, int32> map_int32_int32 = 1;
          if (!this_._internal_map_int32_int32().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_INT32>;
            const auto& field = this_._internal_map_int32_int32();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    1, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    1, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int64, int64> map_int64_int64 = 2;
          if (!this_._internal_map_int64_int64().empty()) {
            using MapType = ::google::protobuf::Map<::int64_t, ::int64_t>;
            using WireHelper = _pbi::MapEntryFuncs<::int64_t, ::int64_t,
                                           _pbi::WireFormatLite::TYPE_INT64,
                                           _pbi::WireFormatLite::TYPE_INT64>;
            const auto& field = this_._internal_map_int64_int64();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    2, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    2, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<uint32, uint32> map_uint32_uint32 = 3;
          if (!this_._internal_map_uint32_uint32().empty()) {
            using MapType = ::google::protobuf::Map<::uint32_t, ::uint32_t>;
            using WireHelper = _pbi::MapEntryFuncs<::uint32_t, ::uint32_t,
                                           _pbi::WireFormatLite::TYPE_UINT32,
                                           _pbi::WireFormatLite::TYPE_UINT32>;
            const auto& field = this_._internal_map_uint32_uint32();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<uint64, uint64> map_uint64_uint64 = 4;
          if (!this_._internal_map_uint64_uint64().empty()) {
            using MapType = ::google::protobuf::Map<::uint64_t, ::uint64_t>;
            using WireHelper = _pbi::MapEntryFuncs<::uint64_t, ::uint64_t,
                                           _pbi::WireFormatLite::TYPE_UINT64,
                                           _pbi::WireFormatLite::TYPE_UINT64>;
            const auto& field = this_._internal_map_uint64_uint64();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<sint32, sint32> map_sint32_sint32 = 5;
          if (!this_._internal_map_sint32_sint32().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_SINT32,
                                           _pbi::WireFormatLite::TYPE_SINT32>;
            const auto& field = this_._internal_map_sint32_sint32();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<sint64, sint64> map_sint64_sint64 = 6;
          if (!this_._internal_map_sint64_sint64().empty()) {
            using MapType = ::google::protobuf::Map<::int64_t, ::int64_t>;
            using WireHelper = _pbi::MapEntryFuncs<::int64_t, ::int64_t,
                                           _pbi::WireFormatLite::TYPE_SINT64,
                                           _pbi::WireFormatLite::TYPE_SINT64>;
            const auto& field = this_._internal_map_sint64_sint64();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<fixed32, fixed32> map_fixed32_fixed32 = 7;
          if (!this_._internal_map_fixed32_fixed32().empty()) {
            using MapType = ::google::protobuf::Map<::uint32_t, ::uint32_t>;
            using WireHelper = _pbi::MapEntryFuncs<::uint32_t, ::uint32_t,
                                           _pbi::WireFormatLite::TYPE_FIXED32,
                                           _pbi::WireFormatLite::TYPE_FIXED32>;
            const auto& field = this_._internal_map_fixed32_fixed32();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<fixed64, fixed64> map_fixed64_fixed64 = 8;
          if (!this_._internal_map_fixed64_fixed64().empty()) {
            using MapType = ::google::protobuf::Map<::uint64_t, ::uint64_t>;
            using WireHelper = _pbi::MapEntryFuncs<::uint64_t, ::uint64_t,
                                           _pbi::WireFormatLite::TYPE_FIXED64,
                                           _pbi::WireFormatLite::TYPE_FIXED64>;
            const auto& field = this_._internal_map_fixed64_fixed64();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
          if (!this_._internal_map_sfixed32_sfixed32().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_SFIXED32,
                                           _pbi::WireFormatLite::TYPE_SFIXED32>;
            const auto& field = this_._internal_map_sfixed32_sfixed32();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    9, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    9, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
          if (!this_._internal_map_sfixed64_sfixed64().empty()) {
            using MapType = ::google::protobuf::Map<::int64_t, ::int64_t>;
            using WireHelper = _pbi::MapEntryFuncs<::int64_t, ::int64_t,
                                           _pbi::WireFormatLite::TYPE_SFIXED64,
                                           _pbi::WireFormatLite::TYPE_SFIXED64>;
            const auto& field = this_._internal_map_sfixed64_sfixed64();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    10, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    10, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, float> map_int32_float = 11;
          if (!this_._internal_map_int32_float().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, float>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, float,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_FLOAT>;
            const auto& field = this_._internal_map_int32_float();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    11, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    11, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, double> map_int32_double = 12;
          if (!this_._internal_map_int32_double().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, double>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, double,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_DOUBLE>;
            const auto& field = this_._internal_map_int32_double();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    12, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    12, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<bool, bool> map_bool_bool = 13;
          if (!this_._internal_map_bool_bool().empty()) {
            using MapType = ::google::protobuf::Map<bool, bool>;
            using WireHelper = _pbi::MapEntryFuncs<bool, bool,
                                           _pbi::WireFormatLite::TYPE_BOOL,
                                           _pbi::WireFormatLite::TYPE_BOOL>;
            const auto& field = this_._internal_map_bool_bool();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    13, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    13, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<string, string> map_string_string = 14;
          if (!this_._internal_map_string_string().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_map_string_string();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    14, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    14, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, bytes> map_int32_bytes = 15;
          if (!this_._internal_map_int32_bytes().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, std::string,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_BYTES>;
            const auto& field = this_._internal_map_int32_bytes();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    15, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    15, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, .protobuf_unittest.MapEnumLite> map_int32_enum = 16;
          if (!this_._internal_map_int32_enum().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protobuf_unittest::MapEnumLite>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::MapEnumLite,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_ENUM>;
            const auto& field = this_._internal_map_int32_enum();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    16, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    16, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, .protobuf_unittest.ForeignMessageLite> map_int32_foreign_message = 17;
          if (!this_._internal_map_int32_foreign_message().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protobuf_unittest::ForeignMessageLite>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::ForeignMessageLite,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_MESSAGE>;
            const auto& field = this_._internal_map_int32_foreign_message();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    17, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    17, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, int32> teboring = 18;
          if (!this_._internal_teboring().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_INT32>;
            const auto& field = this_._internal_teboring();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    18, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    18, entry.first, entry.second, target, stream);
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMapLite)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestMapLite::ByteSizeLong(const MessageLite& base) {
          const TestMapLite& this_ = static_cast<const TestMapLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestMapLite::ByteSizeLong() const {
          const TestMapLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMapLite)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<int32, int32> map_int32_int32 = 1;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int32_int32_size());
              for (const auto& entry : this_._internal_map_int32_int32()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int64, int64> map_int64_int64 = 2;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int64_int64_size());
              for (const auto& entry : this_._internal_map_int64_int64()) {
                total_size += _pbi::MapEntryFuncs<::int64_t, ::int64_t,
                                               _pbi::WireFormatLite::TYPE_INT64,
                                               _pbi::WireFormatLite::TYPE_INT64>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<uint32, uint32> map_uint32_uint32 = 3;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_uint32_uint32_size());
              for (const auto& entry : this_._internal_map_uint32_uint32()) {
                total_size += _pbi::MapEntryFuncs<::uint32_t, ::uint32_t,
                                               _pbi::WireFormatLite::TYPE_UINT32,
                                               _pbi::WireFormatLite::TYPE_UINT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<uint64, uint64> map_uint64_uint64 = 4;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_uint64_uint64_size());
              for (const auto& entry : this_._internal_map_uint64_uint64()) {
                total_size += _pbi::MapEntryFuncs<::uint64_t, ::uint64_t,
                                               _pbi::WireFormatLite::TYPE_UINT64,
                                               _pbi::WireFormatLite::TYPE_UINT64>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<sint32, sint32> map_sint32_sint32 = 5;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_sint32_sint32_size());
              for (const auto& entry : this_._internal_map_sint32_sint32()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_SINT32,
                                               _pbi::WireFormatLite::TYPE_SINT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<sint64, sint64> map_sint64_sint64 = 6;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_sint64_sint64_size());
              for (const auto& entry : this_._internal_map_sint64_sint64()) {
                total_size += _pbi::MapEntryFuncs<::int64_t, ::int64_t,
                                               _pbi::WireFormatLite::TYPE_SINT64,
                                               _pbi::WireFormatLite::TYPE_SINT64>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<fixed32, fixed32> map_fixed32_fixed32 = 7;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_fixed32_fixed32_size());
              for (const auto& entry : this_._internal_map_fixed32_fixed32()) {
                total_size += _pbi::MapEntryFuncs<::uint32_t, ::uint32_t,
                                               _pbi::WireFormatLite::TYPE_FIXED32,
                                               _pbi::WireFormatLite::TYPE_FIXED32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<fixed64, fixed64> map_fixed64_fixed64 = 8;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_fixed64_fixed64_size());
              for (const auto& entry : this_._internal_map_fixed64_fixed64()) {
                total_size += _pbi::MapEntryFuncs<::uint64_t, ::uint64_t,
                                               _pbi::WireFormatLite::TYPE_FIXED64,
                                               _pbi::WireFormatLite::TYPE_FIXED64>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_sfixed32_sfixed32_size());
              for (const auto& entry : this_._internal_map_sfixed32_sfixed32()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_SFIXED32,
                                               _pbi::WireFormatLite::TYPE_SFIXED32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_sfixed64_sfixed64_size());
              for (const auto& entry : this_._internal_map_sfixed64_sfixed64()) {
                total_size += _pbi::MapEntryFuncs<::int64_t, ::int64_t,
                                               _pbi::WireFormatLite::TYPE_SFIXED64,
                                               _pbi::WireFormatLite::TYPE_SFIXED64>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, float> map_int32_float = 11;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int32_float_size());
              for (const auto& entry : this_._internal_map_int32_float()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, float,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_FLOAT>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, double> map_int32_double = 12;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int32_double_size());
              for (const auto& entry : this_._internal_map_int32_double()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, double,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_DOUBLE>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<bool, bool> map_bool_bool = 13;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_bool_bool_size());
              for (const auto& entry : this_._internal_map_bool_bool()) {
                total_size += _pbi::MapEntryFuncs<bool, bool,
                                               _pbi::WireFormatLite::TYPE_BOOL,
                                               _pbi::WireFormatLite::TYPE_BOOL>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, string> map_string_string = 14;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_string_string_size());
              for (const auto& entry : this_._internal_map_string_string()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, bytes> map_int32_bytes = 15;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int32_bytes_size());
              for (const auto& entry : this_._internal_map_int32_bytes()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, std::string,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_BYTES>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, .protobuf_unittest.MapEnumLite> map_int32_enum = 16;
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int32_enum_size());
              for (const auto& entry : this_._internal_map_int32_enum()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::MapEnumLite,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_ENUM>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, .protobuf_unittest.ForeignMessageLite> map_int32_foreign_message = 17;
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int32_foreign_message_size());
              for (const auto& entry : this_._internal_map_int32_foreign_message()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::ForeignMessageLite,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, int32> teboring = 18;
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_teboring_size());
              for (const auto& entry : this_._internal_teboring()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TestMapLite::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestMapLite*>(&to_msg);
  auto& from = static_cast<const TestMapLite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMapLite)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_int32_int32_.MergeFrom(from._impl_.map_int32_int32_);
  _this->_impl_.map_int64_int64_.MergeFrom(from._impl_.map_int64_int64_);
  _this->_impl_.map_uint32_uint32_.MergeFrom(from._impl_.map_uint32_uint32_);
  _this->_impl_.map_uint64_uint64_.MergeFrom(from._impl_.map_uint64_uint64_);
  _this->_impl_.map_sint32_sint32_.MergeFrom(from._impl_.map_sint32_sint32_);
  _this->_impl_.map_sint64_sint64_.MergeFrom(from._impl_.map_sint64_sint64_);
  _this->_impl_.map_fixed32_fixed32_.MergeFrom(from._impl_.map_fixed32_fixed32_);
  _this->_impl_.map_fixed64_fixed64_.MergeFrom(from._impl_.map_fixed64_fixed64_);
  _this->_impl_.map_sfixed32_sfixed32_.MergeFrom(from._impl_.map_sfixed32_sfixed32_);
  _this->_impl_.map_sfixed64_sfixed64_.MergeFrom(from._impl_.map_sfixed64_sfixed64_);
  _this->_impl_.map_int32_float_.MergeFrom(from._impl_.map_int32_float_);
  _this->_impl_.map_int32_double_.MergeFrom(from._impl_.map_int32_double_);
  _this->_impl_.map_bool_bool_.MergeFrom(from._impl_.map_bool_bool_);
  _this->_impl_.map_string_string_.MergeFrom(from._impl_.map_string_string_);
  _this->_impl_.map_int32_bytes_.MergeFrom(from._impl_.map_int32_bytes_);
  _this->_impl_.map_int32_enum_.MergeFrom(from._impl_.map_int32_enum_);
  _this->_impl_.map_int32_foreign_message_.MergeFrom(from._impl_.map_int32_foreign_message_);
  _this->_impl_.teboring_.MergeFrom(from._impl_.teboring_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestMapLite::CopyFrom(const TestMapLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMapLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestMapLite::InternalSwap(TestMapLite* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_int32_int32_.InternalSwap(&other->_impl_.map_int32_int32_);
  _impl_.map_int64_int64_.InternalSwap(&other->_impl_.map_int64_int64_);
  _impl_.map_uint32_uint32_.InternalSwap(&other->_impl_.map_uint32_uint32_);
  _impl_.map_uint64_uint64_.InternalSwap(&other->_impl_.map_uint64_uint64_);
  _impl_.map_sint32_sint32_.InternalSwap(&other->_impl_.map_sint32_sint32_);
  _impl_.map_sint64_sint64_.InternalSwap(&other->_impl_.map_sint64_sint64_);
  _impl_.map_fixed32_fixed32_.InternalSwap(&other->_impl_.map_fixed32_fixed32_);
  _impl_.map_fixed64_fixed64_.InternalSwap(&other->_impl_.map_fixed64_fixed64_);
  _impl_.map_sfixed32_sfixed32_.InternalSwap(&other->_impl_.map_sfixed32_sfixed32_);
  _impl_.map_sfixed64_sfixed64_.InternalSwap(&other->_impl_.map_sfixed64_sfixed64_);
  _impl_.map_int32_float_.InternalSwap(&other->_impl_.map_int32_float_);
  _impl_.map_int32_double_.InternalSwap(&other->_impl_.map_int32_double_);
  _impl_.map_bool_bool_.InternalSwap(&other->_impl_.map_bool_bool_);
  _impl_.map_string_string_.InternalSwap(&other->_impl_.map_string_string_);
  _impl_.map_int32_bytes_.InternalSwap(&other->_impl_.map_int32_bytes_);
  _impl_.map_int32_enum_.InternalSwap(&other->_impl_.map_int32_enum_);
  _impl_.map_int32_foreign_message_.InternalSwap(&other->_impl_.map_int32_foreign_message_);
  _impl_.teboring_.InternalSwap(&other->_impl_.teboring_);
}

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

// ===================================================================

class TestArenaMapLite::_Internal {
 public:
};

TestArenaMapLite::TestArenaMapLite(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestArenaMapLite)
}
inline PROTOBUF_NDEBUG_INLINE TestArenaMapLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestArenaMapLite& from_msg)
      : map_int32_int32_{visibility, arena, from.map_int32_int32_},
        map_int64_int64_{visibility, arena, from.map_int64_int64_},
        map_uint32_uint32_{visibility, arena, from.map_uint32_uint32_},
        map_uint64_uint64_{visibility, arena, from.map_uint64_uint64_},
        map_sint32_sint32_{visibility, arena, from.map_sint32_sint32_},
        map_sint64_sint64_{visibility, arena, from.map_sint64_sint64_},
        map_fixed32_fixed32_{visibility, arena, from.map_fixed32_fixed32_},
        map_fixed64_fixed64_{visibility, arena, from.map_fixed64_fixed64_},
        map_sfixed32_sfixed32_{visibility, arena, from.map_sfixed32_sfixed32_},
        map_sfixed64_sfixed64_{visibility, arena, from.map_sfixed64_sfixed64_},
        map_int32_float_{visibility, arena, from.map_int32_float_},
        map_int32_double_{visibility, arena, from.map_int32_double_},
        map_bool_bool_{visibility, arena, from.map_bool_bool_},
        map_string_string_{visibility, arena, from.map_string_string_},
        map_int32_bytes_{visibility, arena, from.map_int32_bytes_},
        map_int32_enum_{visibility, arena, from.map_int32_enum_},
        map_int32_foreign_message_{visibility, arena, from.map_int32_foreign_message_},
        _cached_size_{0} {}

TestArenaMapLite::TestArenaMapLite(
    ::google::protobuf::Arena* arena,
    const TestArenaMapLite& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestArenaMapLite* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestArenaMapLite)
}
inline PROTOBUF_NDEBUG_INLINE TestArenaMapLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : map_int32_int32_{visibility, arena},
        map_int64_int64_{visibility, arena},
        map_uint32_uint32_{visibility, arena},
        map_uint64_uint64_{visibility, arena},
        map_sint32_sint32_{visibility, arena},
        map_sint64_sint64_{visibility, arena},
        map_fixed32_fixed32_{visibility, arena},
        map_fixed64_fixed64_{visibility, arena},
        map_sfixed32_sfixed32_{visibility, arena},
        map_sfixed64_sfixed64_{visibility, arena},
        map_int32_float_{visibility, arena},
        map_int32_double_{visibility, arena},
        map_bool_bool_{visibility, arena},
        map_string_string_{visibility, arena},
        map_int32_bytes_{visibility, arena},
        map_int32_enum_{visibility, arena},
        map_int32_foreign_message_{visibility, arena},
        _cached_size_{0} {}

inline void TestArenaMapLite::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestArenaMapLite::~TestArenaMapLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestArenaMapLite)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TestArenaMapLite::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<35>
    TestArenaMapLite::_class_data_ = {
        {
            &_TestArenaMapLite_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestArenaMapLite::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<TestArenaMapLite>(),
            ::google::protobuf::MessageLite::GetNewImpl<TestArenaMapLite>(),
            ::google::protobuf::MessageLite::GetClearImpl<TestArenaMapLite>(), &TestArenaMapLite::ByteSizeLong,
                &TestArenaMapLite::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_._cached_size_),
            true,
        },
        "protobuf_unittest.TestArenaMapLite",
};
const ::google::protobuf::MessageLite::ClassData* TestArenaMapLite::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 17, 19, 0, 2> TestArenaMapLite::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    17, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836224,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    19,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestArenaMapLite>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // map<int32, int32> map_int32_int32 = 1;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_int32_int32_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int64, int64> map_int64_int64 = 2;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_int64_int64_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<uint32, uint32> map_uint32_uint32 = 3;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_uint32_uint32_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<uint64, uint64> map_uint64_uint64 = 4;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_uint64_uint64_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<sint32, sint32> map_sint32_sint32 = 5;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_sint32_sint32_), 0, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<sint64, sint64> map_sint64_sint64 = 6;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_sint64_sint64_), 0, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<fixed32, fixed32> map_fixed32_fixed32 = 7;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_fixed32_fixed32_), 0, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<fixed64, fixed64> map_fixed64_fixed64 = 8;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_fixed64_fixed64_), 0, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_sfixed32_sfixed32_), 0, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_sfixed64_sfixed64_), 0, 9,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, float> map_int32_float = 11;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_int32_float_), 0, 10,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, double> map_int32_double = 12;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_int32_double_), 0, 11,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<bool, bool> map_bool_bool = 13;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_bool_bool_), 0, 12,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<string, string> map_string_string = 14;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_string_string_), 0, 13,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, bytes> map_int32_bytes = 15;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_int32_bytes_), 0, 14,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, .protobuf_unittest.MapEnumLite> map_int32_enum = 16;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_int32_enum_), 0, 15,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, .protobuf_unittest.ForeignMessageArenaLite> map_int32_foreign_message = 17;
    {PROTOBUF_FIELD_OFFSET(TestArenaMapLite, _impl_.map_int32_foreign_message_), 0, 17,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_int32_int32_)>(
        0, 0, 0, 5,
        5)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_int64_int64_)>(
        0, 0, 0, 3,
        3)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_uint32_uint32_)>(
        0, 0, 0, 13,
        13)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_uint64_uint64_)>(
        0, 0, 0, 4,
        4)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_sint32_sint32_)>(
        0, 0, 0, 17,
        17)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_sint64_sint64_)>(
        0, 0, 0, 18,
        18)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_fixed32_fixed32_)>(
        0, 0, 0, 7,
        7)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_fixed64_fixed64_)>(
        0, 0, 0, 6,
        6)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_sfixed32_sfixed32_)>(
        0, 0, 0, 15,
        15)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_sfixed64_sfixed64_)>(
        0, 0, 0, 16,
        16)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_int32_float_)>(
        0, 0, 0, 5,
        2)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_int32_double_)>(
        0, 0, 0, 5,
        1)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_bool_bool_)>(
        0, 0, 0, 8,
        8)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_string_string_)>(
        0, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_int32_bytes_)>(
        0, 0, 0, 5,
        12)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_int32_enum_)>(
        0, 0, 1, 5,
        14)},
    {::_pbi::FieldAuxEnumData{}, ::protobuf_unittest::MapEnumLite_internal_data_},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestArenaMapLite()._impl_.map_int32_foreign_message_)>(
        0, 0, 0, 5,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::protobuf_unittest::ForeignMessageArenaLite>},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TestArenaMapLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestArenaMapLite)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_int32_int32_.Clear();
  _impl_.map_int64_int64_.Clear();
  _impl_.map_uint32_uint32_.Clear();
  _impl_.map_uint64_uint64_.Clear();
  _impl_.map_sint32_sint32_.Clear();
  _impl_.map_sint64_sint64_.Clear();
  _impl_.map_fixed32_fixed32_.Clear();
  _impl_.map_fixed64_fixed64_.Clear();
  _impl_.map_sfixed32_sfixed32_.Clear();
  _impl_.map_sfixed64_sfixed64_.Clear();
  _impl_.map_int32_float_.Clear();
  _impl_.map_int32_double_.Clear();
  _impl_.map_bool_bool_.Clear();
  _impl_.map_string_string_.Clear();
  _impl_.map_int32_bytes_.Clear();
  _impl_.map_int32_enum_.Clear();
  _impl_.map_int32_foreign_message_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestArenaMapLite::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestArenaMapLite& this_ = static_cast<const TestArenaMapLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestArenaMapLite::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestArenaMapLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestArenaMapLite)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // map<int32, int32> map_int32_int32 = 1;
          if (!this_._internal_map_int32_int32().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_INT32>;
            const auto& field = this_._internal_map_int32_int32();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    1, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    1, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int64, int64> map_int64_int64 = 2;
          if (!this_._internal_map_int64_int64().empty()) {
            using MapType = ::google::protobuf::Map<::int64_t, ::int64_t>;
            using WireHelper = _pbi::MapEntryFuncs<::int64_t, ::int64_t,
                                           _pbi::WireFormatLite::TYPE_INT64,
                                           _pbi::WireFormatLite::TYPE_INT64>;
            const auto& field = this_._internal_map_int64_int64();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    2, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    2, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<uint32, uint32> map_uint32_uint32 = 3;
          if (!this_._internal_map_uint32_uint32().empty()) {
            using MapType = ::google::protobuf::Map<::uint32_t, ::uint32_t>;
            using WireHelper = _pbi::MapEntryFuncs<::uint32_t, ::uint32_t,
                                           _pbi::WireFormatLite::TYPE_UINT32,
                                           _pbi::WireFormatLite::TYPE_UINT32>;
            const auto& field = this_._internal_map_uint32_uint32();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<uint64, uint64> map_uint64_uint64 = 4;
          if (!this_._internal_map_uint64_uint64().empty()) {
            using MapType = ::google::protobuf::Map<::uint64_t, ::uint64_t>;
            using WireHelper = _pbi::MapEntryFuncs<::uint64_t, ::uint64_t,
                                           _pbi::WireFormatLite::TYPE_UINT64,
                                           _pbi::WireFormatLite::TYPE_UINT64>;
            const auto& field = this_._internal_map_uint64_uint64();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<sint32, sint32> map_sint32_sint32 = 5;
          if (!this_._internal_map_sint32_sint32().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_SINT32,
                                           _pbi::WireFormatLite::TYPE_SINT32>;
            const auto& field = this_._internal_map_sint32_sint32();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<sint64, sint64> map_sint64_sint64 = 6;
          if (!this_._internal_map_sint64_sint64().empty()) {
            using MapType = ::google::protobuf::Map<::int64_t, ::int64_t>;
            using WireHelper = _pbi::MapEntryFuncs<::int64_t, ::int64_t,
                                           _pbi::WireFormatLite::TYPE_SINT64,
                                           _pbi::WireFormatLite::TYPE_SINT64>;
            const auto& field = this_._internal_map_sint64_sint64();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<fixed32, fixed32> map_fixed32_fixed32 = 7;
          if (!this_._internal_map_fixed32_fixed32().empty()) {
            using MapType = ::google::protobuf::Map<::uint32_t, ::uint32_t>;
            using WireHelper = _pbi::MapEntryFuncs<::uint32_t, ::uint32_t,
                                           _pbi::WireFormatLite::TYPE_FIXED32,
                                           _pbi::WireFormatLite::TYPE_FIXED32>;
            const auto& field = this_._internal_map_fixed32_fixed32();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<fixed64, fixed64> map_fixed64_fixed64 = 8;
          if (!this_._internal_map_fixed64_fixed64().empty()) {
            using MapType = ::google::protobuf::Map<::uint64_t, ::uint64_t>;
            using WireHelper = _pbi::MapEntryFuncs<::uint64_t, ::uint64_t,
                                           _pbi::WireFormatLite::TYPE_FIXED64,
                                           _pbi::WireFormatLite::TYPE_FIXED64>;
            const auto& field = this_._internal_map_fixed64_fixed64();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
          if (!this_._internal_map_sfixed32_sfixed32().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_SFIXED32,
                                           _pbi::WireFormatLite::TYPE_SFIXED32>;
            const auto& field = this_._internal_map_sfixed32_sfixed32();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    9, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    9, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
          if (!this_._internal_map_sfixed64_sfixed64().empty()) {
            using MapType = ::google::protobuf::Map<::int64_t, ::int64_t>;
            using WireHelper = _pbi::MapEntryFuncs<::int64_t, ::int64_t,
                                           _pbi::WireFormatLite::TYPE_SFIXED64,
                                           _pbi::WireFormatLite::TYPE_SFIXED64>;
            const auto& field = this_._internal_map_sfixed64_sfixed64();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    10, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    10, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, float> map_int32_float = 11;
          if (!this_._internal_map_int32_float().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, float>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, float,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_FLOAT>;
            const auto& field = this_._internal_map_int32_float();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    11, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    11, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, double> map_int32_double = 12;
          if (!this_._internal_map_int32_double().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, double>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, double,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_DOUBLE>;
            const auto& field = this_._internal_map_int32_double();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    12, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    12, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<bool, bool> map_bool_bool = 13;
          if (!this_._internal_map_bool_bool().empty()) {
            using MapType = ::google::protobuf::Map<bool, bool>;
            using WireHelper = _pbi::MapEntryFuncs<bool, bool,
                                           _pbi::WireFormatLite::TYPE_BOOL,
                                           _pbi::WireFormatLite::TYPE_BOOL>;
            const auto& field = this_._internal_map_bool_bool();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    13, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    13, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<string, string> map_string_string = 14;
          if (!this_._internal_map_string_string().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_map_string_string();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    14, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    14, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, bytes> map_int32_bytes = 15;
          if (!this_._internal_map_int32_bytes().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, std::string,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_BYTES>;
            const auto& field = this_._internal_map_int32_bytes();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    15, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    15, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, .protobuf_unittest.MapEnumLite> map_int32_enum = 16;
          if (!this_._internal_map_int32_enum().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protobuf_unittest::MapEnumLite>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::MapEnumLite,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_ENUM>;
            const auto& field = this_._internal_map_int32_enum();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    16, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    16, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, .protobuf_unittest.ForeignMessageArenaLite> map_int32_foreign_message = 17;
          if (!this_._internal_map_int32_foreign_message().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protobuf_unittest::ForeignMessageArenaLite>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::ForeignMessageArenaLite,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_MESSAGE>;
            const auto& field = this_._internal_map_int32_foreign_message();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    17, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    17, entry.first, entry.second, target, stream);
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestArenaMapLite)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestArenaMapLite::ByteSizeLong(const MessageLite& base) {
          const TestArenaMapLite& this_ = static_cast<const TestArenaMapLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestArenaMapLite::ByteSizeLong() const {
          const TestArenaMapLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestArenaMapLite)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<int32, int32> map_int32_int32 = 1;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int32_int32_size());
              for (const auto& entry : this_._internal_map_int32_int32()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int64, int64> map_int64_int64 = 2;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int64_int64_size());
              for (const auto& entry : this_._internal_map_int64_int64()) {
                total_size += _pbi::MapEntryFuncs<::int64_t, ::int64_t,
                                               _pbi::WireFormatLite::TYPE_INT64,
                                               _pbi::WireFormatLite::TYPE_INT64>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<uint32, uint32> map_uint32_uint32 = 3;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_uint32_uint32_size());
              for (const auto& entry : this_._internal_map_uint32_uint32()) {
                total_size += _pbi::MapEntryFuncs<::uint32_t, ::uint32_t,
                                               _pbi::WireFormatLite::TYPE_UINT32,
                                               _pbi::WireFormatLite::TYPE_UINT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<uint64, uint64> map_uint64_uint64 = 4;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_uint64_uint64_size());
              for (const auto& entry : this_._internal_map_uint64_uint64()) {
                total_size += _pbi::MapEntryFuncs<::uint64_t, ::uint64_t,
                                               _pbi::WireFormatLite::TYPE_UINT64,
                                               _pbi::WireFormatLite::TYPE_UINT64>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<sint32, sint32> map_sint32_sint32 = 5;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_sint32_sint32_size());
              for (const auto& entry : this_._internal_map_sint32_sint32()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_SINT32,
                                               _pbi::WireFormatLite::TYPE_SINT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<sint64, sint64> map_sint64_sint64 = 6;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_sint64_sint64_size());
              for (const auto& entry : this_._internal_map_sint64_sint64()) {
                total_size += _pbi::MapEntryFuncs<::int64_t, ::int64_t,
                                               _pbi::WireFormatLite::TYPE_SINT64,
                                               _pbi::WireFormatLite::TYPE_SINT64>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<fixed32, fixed32> map_fixed32_fixed32 = 7;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_fixed32_fixed32_size());
              for (const auto& entry : this_._internal_map_fixed32_fixed32()) {
                total_size += _pbi::MapEntryFuncs<::uint32_t, ::uint32_t,
                                               _pbi::WireFormatLite::TYPE_FIXED32,
                                               _pbi::WireFormatLite::TYPE_FIXED32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<fixed64, fixed64> map_fixed64_fixed64 = 8;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_fixed64_fixed64_size());
              for (const auto& entry : this_._internal_map_fixed64_fixed64()) {
                total_size += _pbi::MapEntryFuncs<::uint64_t, ::uint64_t,
                                               _pbi::WireFormatLite::TYPE_FIXED64,
                                               _pbi::WireFormatLite::TYPE_FIXED64>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_sfixed32_sfixed32_size());
              for (const auto& entry : this_._internal_map_sfixed32_sfixed32()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_SFIXED32,
                                               _pbi::WireFormatLite::TYPE_SFIXED32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_sfixed64_sfixed64_size());
              for (const auto& entry : this_._internal_map_sfixed64_sfixed64()) {
                total_size += _pbi::MapEntryFuncs<::int64_t, ::int64_t,
                                               _pbi::WireFormatLite::TYPE_SFIXED64,
                                               _pbi::WireFormatLite::TYPE_SFIXED64>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, float> map_int32_float = 11;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int32_float_size());
              for (const auto& entry : this_._internal_map_int32_float()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, float,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_FLOAT>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, double> map_int32_double = 12;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int32_double_size());
              for (const auto& entry : this_._internal_map_int32_double()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, double,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_DOUBLE>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<bool, bool> map_bool_bool = 13;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_bool_bool_size());
              for (const auto& entry : this_._internal_map_bool_bool()) {
                total_size += _pbi::MapEntryFuncs<bool, bool,
                                               _pbi::WireFormatLite::TYPE_BOOL,
                                               _pbi::WireFormatLite::TYPE_BOOL>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, string> map_string_string = 14;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_string_string_size());
              for (const auto& entry : this_._internal_map_string_string()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, bytes> map_int32_bytes = 15;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int32_bytes_size());
              for (const auto& entry : this_._internal_map_int32_bytes()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, std::string,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_BYTES>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, .protobuf_unittest.MapEnumLite> map_int32_enum = 16;
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int32_enum_size());
              for (const auto& entry : this_._internal_map_int32_enum()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::MapEnumLite,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_ENUM>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, .protobuf_unittest.ForeignMessageArenaLite> map_int32_foreign_message = 17;
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int32_foreign_message_size());
              for (const auto& entry : this_._internal_map_int32_foreign_message()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::ForeignMessageArenaLite,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TestArenaMapLite::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestArenaMapLite*>(&to_msg);
  auto& from = static_cast<const TestArenaMapLite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestArenaMapLite)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_int32_int32_.MergeFrom(from._impl_.map_int32_int32_);
  _this->_impl_.map_int64_int64_.MergeFrom(from._impl_.map_int64_int64_);
  _this->_impl_.map_uint32_uint32_.MergeFrom(from._impl_.map_uint32_uint32_);
  _this->_impl_.map_uint64_uint64_.MergeFrom(from._impl_.map_uint64_uint64_);
  _this->_impl_.map_sint32_sint32_.MergeFrom(from._impl_.map_sint32_sint32_);
  _this->_impl_.map_sint64_sint64_.MergeFrom(from._impl_.map_sint64_sint64_);
  _this->_impl_.map_fixed32_fixed32_.MergeFrom(from._impl_.map_fixed32_fixed32_);
  _this->_impl_.map_fixed64_fixed64_.MergeFrom(from._impl_.map_fixed64_fixed64_);
  _this->_impl_.map_sfixed32_sfixed32_.MergeFrom(from._impl_.map_sfixed32_sfixed32_);
  _this->_impl_.map_sfixed64_sfixed64_.MergeFrom(from._impl_.map_sfixed64_sfixed64_);
  _this->_impl_.map_int32_float_.MergeFrom(from._impl_.map_int32_float_);
  _this->_impl_.map_int32_double_.MergeFrom(from._impl_.map_int32_double_);
  _this->_impl_.map_bool_bool_.MergeFrom(from._impl_.map_bool_bool_);
  _this->_impl_.map_string_string_.MergeFrom(from._impl_.map_string_string_);
  _this->_impl_.map_int32_bytes_.MergeFrom(from._impl_.map_int32_bytes_);
  _this->_impl_.map_int32_enum_.MergeFrom(from._impl_.map_int32_enum_);
  _this->_impl_.map_int32_foreign_message_.MergeFrom(from._impl_.map_int32_foreign_message_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestArenaMapLite::CopyFrom(const TestArenaMapLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestArenaMapLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestArenaMapLite::InternalSwap(TestArenaMapLite* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_int32_int32_.InternalSwap(&other->_impl_.map_int32_int32_);
  _impl_.map_int64_int64_.InternalSwap(&other->_impl_.map_int64_int64_);
  _impl_.map_uint32_uint32_.InternalSwap(&other->_impl_.map_uint32_uint32_);
  _impl_.map_uint64_uint64_.InternalSwap(&other->_impl_.map_uint64_uint64_);
  _impl_.map_sint32_sint32_.InternalSwap(&other->_impl_.map_sint32_sint32_);
  _impl_.map_sint64_sint64_.InternalSwap(&other->_impl_.map_sint64_sint64_);
  _impl_.map_fixed32_fixed32_.InternalSwap(&other->_impl_.map_fixed32_fixed32_);
  _impl_.map_fixed64_fixed64_.InternalSwap(&other->_impl_.map_fixed64_fixed64_);
  _impl_.map_sfixed32_sfixed32_.InternalSwap(&other->_impl_.map_sfixed32_sfixed32_);
  _impl_.map_sfixed64_sfixed64_.InternalSwap(&other->_impl_.map_sfixed64_sfixed64_);
  _impl_.map_int32_float_.InternalSwap(&other->_impl_.map_int32_float_);
  _impl_.map_int32_double_.InternalSwap(&other->_impl_.map_int32_double_);
  _impl_.map_bool_bool_.InternalSwap(&other->_impl_.map_bool_bool_);
  _impl_.map_string_string_.InternalSwap(&other->_impl_.map_string_string_);
  _impl_.map_int32_bytes_.InternalSwap(&other->_impl_.map_int32_bytes_);
  _impl_.map_int32_enum_.InternalSwap(&other->_impl_.map_int32_enum_);
  _impl_.map_int32_foreign_message_.InternalSwap(&other->_impl_.map_int32_foreign_message_);
}

// ===================================================================

// ===================================================================

class TestRequiredMessageMapLite::_Internal {
 public:
};

TestRequiredMessageMapLite::TestRequiredMessageMapLite(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequiredMessageMapLite)
}
inline PROTOBUF_NDEBUG_INLINE TestRequiredMessageMapLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestRequiredMessageMapLite& from_msg)
      : map_field_{visibility, arena, from.map_field_},
        _cached_size_{0} {}

TestRequiredMessageMapLite::TestRequiredMessageMapLite(
    ::google::protobuf::Arena* arena,
    const TestRequiredMessageMapLite& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestRequiredMessageMapLite* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRequiredMessageMapLite)
}
inline PROTOBUF_NDEBUG_INLINE TestRequiredMessageMapLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : map_field_{visibility, arena},
        _cached_size_{0} {}

inline void TestRequiredMessageMapLite::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestRequiredMessageMapLite::~TestRequiredMessageMapLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequiredMessageMapLite)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TestRequiredMessageMapLite::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<45>
    TestRequiredMessageMapLite::_class_data_ = {
        {
            &_TestRequiredMessageMapLite_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            TestRequiredMessageMapLite::IsInitializedImpl,
            &TestRequiredMessageMapLite::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<TestRequiredMessageMapLite>(),
            ::google::protobuf::MessageLite::GetNewImpl<TestRequiredMessageMapLite>(),
            ::google::protobuf::MessageLite::GetClearImpl<TestRequiredMessageMapLite>(), &TestRequiredMessageMapLite::ByteSizeLong,
                &TestRequiredMessageMapLite::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestRequiredMessageMapLite, _impl_._cached_size_),
            true,
        },
        "protobuf_unittest.TestRequiredMessageMapLite",
};
const ::google::protobuf::MessageLite::ClassData* TestRequiredMessageMapLite::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 2, 0, 2> TestRequiredMessageMapLite::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestRequiredMessageMapLite>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // map<int32, .protobuf_unittest.TestRequiredLite> map_field = 1;
    {PROTOBUF_FIELD_OFFSET(TestRequiredMessageMapLite, _impl_.map_field_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestRequiredMessageMapLite()._impl_.map_field_)>(
        0, 0, 0, 5,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::protobuf_unittest::TestRequiredLite>},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TestRequiredMessageMapLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequiredMessageMapLite)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_field_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestRequiredMessageMapLite::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestRequiredMessageMapLite& this_ = static_cast<const TestRequiredMessageMapLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestRequiredMessageMapLite::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestRequiredMessageMapLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequiredMessageMapLite)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // map<int32, .protobuf_unittest.TestRequiredLite> map_field = 1;
          if (!this_._internal_map_field().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protobuf_unittest::TestRequiredLite>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::TestRequiredLite,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_MESSAGE>;
            const auto& field = this_._internal_map_field();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    1, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    1, entry.first, entry.second, target, stream);
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequiredMessageMapLite)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestRequiredMessageMapLite::ByteSizeLong(const MessageLite& base) {
          const TestRequiredMessageMapLite& this_ = static_cast<const TestRequiredMessageMapLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestRequiredMessageMapLite::ByteSizeLong() const {
          const TestRequiredMessageMapLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequiredMessageMapLite)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<int32, .protobuf_unittest.TestRequiredLite> map_field = 1;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_field_size());
              for (const auto& entry : this_._internal_map_field()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::TestRequiredLite,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TestRequiredMessageMapLite::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestRequiredMessageMapLite*>(&to_msg);
  auto& from = static_cast<const TestRequiredMessageMapLite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequiredMessageMapLite)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_field_.MergeFrom(from._impl_.map_field_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestRequiredMessageMapLite::CopyFrom(const TestRequiredMessageMapLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequiredMessageMapLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestRequiredMessageMapLite::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const TestRequiredMessageMapLite&>(msg);
  if (!::google::protobuf::internal::AllAreInitialized(this_._impl_.map_field_)) {
    return false;
  }
  return true;
}

void TestRequiredMessageMapLite::InternalSwap(TestRequiredMessageMapLite* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_field_.InternalSwap(&other->_impl_.map_field_);
}

// ===================================================================

// ===================================================================

// ===================================================================

class TestEnumMapLite::_Internal {
 public:
};

TestEnumMapLite::TestEnumMapLite(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEnumMapLite)
}
inline PROTOBUF_NDEBUG_INLINE TestEnumMapLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestEnumMapLite& from_msg)
      : known_map_field_{visibility, arena, from.known_map_field_},
        unknown_map_field_{visibility, arena, from.unknown_map_field_},
        _cached_size_{0} {}

TestEnumMapLite::TestEnumMapLite(
    ::google::protobuf::Arena* arena,
    const TestEnumMapLite& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestEnumMapLite* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEnumMapLite)
}
inline PROTOBUF_NDEBUG_INLINE TestEnumMapLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : known_map_field_{visibility, arena},
        unknown_map_field_{visibility, arena},
        _cached_size_{0} {}

inline void TestEnumMapLite::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestEnumMapLite::~TestEnumMapLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEnumMapLite)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TestEnumMapLite::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<34>
    TestEnumMapLite::_class_data_ = {
        {
            &_TestEnumMapLite_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestEnumMapLite::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<TestEnumMapLite>(),
            ::google::protobuf::MessageLite::GetNewImpl<TestEnumMapLite>(),
            ::google::protobuf::MessageLite::GetClearImpl<TestEnumMapLite>(), &TestEnumMapLite::ByteSizeLong,
                &TestEnumMapLite::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestEnumMapLite, _impl_._cached_size_),
            true,
        },
        "protobuf_unittest.TestEnumMapLite",
};
const ::google::protobuf::MessageLite::ClassData* TestEnumMapLite::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 4, 0, 7> TestEnumMapLite::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    102, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestEnumMapLite>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    101, 0, 1,
    65532, 0,
    65535, 65535
  }}, {{
    // map<int32, .protobuf_unittest.Proto2MapEnumLite> known_map_field = 101;
    {PROTOBUF_FIELD_OFFSET(TestEnumMapLite, _impl_.known_map_field_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, .protobuf_unittest.Proto2MapEnumLite> unknown_map_field = 102;
    {PROTOBUF_FIELD_OFFSET(TestEnumMapLite, _impl_.unknown_map_field_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestEnumMapLite()._impl_.known_map_field_)>(
        0, 0, 1, 5,
        14)},
    {::_pbi::FieldAuxEnumData{}, ::protobuf_unittest::Proto2MapEnumLite_internal_data_},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestEnumMapLite()._impl_.unknown_map_field_)>(
        0, 0, 1, 5,
        14)},
    {::_pbi::FieldAuxEnumData{}, ::protobuf_unittest::Proto2MapEnumLite_internal_data_},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TestEnumMapLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEnumMapLite)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.known_map_field_.Clear();
  _impl_.unknown_map_field_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestEnumMapLite::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestEnumMapLite& this_ = static_cast<const TestEnumMapLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestEnumMapLite::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestEnumMapLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEnumMapLite)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // map<int32, .protobuf_unittest.Proto2MapEnumLite> known_map_field = 101;
          if (!this_._internal_known_map_field().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protobuf_unittest::Proto2MapEnumLite>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::Proto2MapEnumLite,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_ENUM>;
            const auto& field = this_._internal_known_map_field();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    101, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    101, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, .protobuf_unittest.Proto2MapEnumLite> unknown_map_field = 102;
          if (!this_._internal_unknown_map_field().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protobuf_unittest::Proto2MapEnumLite>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::Proto2MapEnumLite,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_ENUM>;
            const auto& field = this_._internal_unknown_map_field();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    102, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    102, entry.first, entry.second, target, stream);
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEnumMapLite)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestEnumMapLite::ByteSizeLong(const MessageLite& base) {
          const TestEnumMapLite& this_ = static_cast<const TestEnumMapLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestEnumMapLite::ByteSizeLong() const {
          const TestEnumMapLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEnumMapLite)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<int32, .protobuf_unittest.Proto2MapEnumLite> known_map_field = 101;
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_known_map_field_size());
              for (const auto& entry : this_._internal_known_map_field()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::Proto2MapEnumLite,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_ENUM>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, .protobuf_unittest.Proto2MapEnumLite> unknown_map_field = 102;
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_unknown_map_field_size());
              for (const auto& entry : this_._internal_unknown_map_field()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::Proto2MapEnumLite,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_ENUM>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TestEnumMapLite::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestEnumMapLite*>(&to_msg);
  auto& from = static_cast<const TestEnumMapLite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEnumMapLite)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.known_map_field_.MergeFrom(from._impl_.known_map_field_);
  _this->_impl_.unknown_map_field_.MergeFrom(from._impl_.unknown_map_field_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestEnumMapLite::CopyFrom(const TestEnumMapLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEnumMapLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestEnumMapLite::InternalSwap(TestEnumMapLite* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.known_map_field_.InternalSwap(&other->_impl_.known_map_field_);
  _impl_.unknown_map_field_.InternalSwap(&other->_impl_.unknown_map_field_);
}

// ===================================================================

// ===================================================================

// ===================================================================

class TestEnumMapPlusExtraLite::_Internal {
 public:
};

TestEnumMapPlusExtraLite::TestEnumMapPlusExtraLite(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEnumMapPlusExtraLite)
}
inline PROTOBUF_NDEBUG_INLINE TestEnumMapPlusExtraLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestEnumMapPlusExtraLite& from_msg)
      : known_map_field_{visibility, arena, from.known_map_field_},
        unknown_map_field_{visibility, arena, from.unknown_map_field_},
        _cached_size_{0} {}

TestEnumMapPlusExtraLite::TestEnumMapPlusExtraLite(
    ::google::protobuf::Arena* arena,
    const TestEnumMapPlusExtraLite& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestEnumMapPlusExtraLite* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEnumMapPlusExtraLite)
}
inline PROTOBUF_NDEBUG_INLINE TestEnumMapPlusExtraLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : known_map_field_{visibility, arena},
        unknown_map_field_{visibility, arena},
        _cached_size_{0} {}

inline void TestEnumMapPlusExtraLite::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestEnumMapPlusExtraLite::~TestEnumMapPlusExtraLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEnumMapPlusExtraLite)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TestEnumMapPlusExtraLite::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<43>
    TestEnumMapPlusExtraLite::_class_data_ = {
        {
            &_TestEnumMapPlusExtraLite_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestEnumMapPlusExtraLite::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<TestEnumMapPlusExtraLite>(),
            ::google::protobuf::MessageLite::GetNewImpl<TestEnumMapPlusExtraLite>(),
            ::google::protobuf::MessageLite::GetClearImpl<TestEnumMapPlusExtraLite>(), &TestEnumMapPlusExtraLite::ByteSizeLong,
                &TestEnumMapPlusExtraLite::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestEnumMapPlusExtraLite, _impl_._cached_size_),
            true,
        },
        "protobuf_unittest.TestEnumMapPlusExtraLite",
};
const ::google::protobuf::MessageLite::ClassData* TestEnumMapPlusExtraLite::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 4, 0, 7> TestEnumMapPlusExtraLite::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    102, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestEnumMapPlusExtraLite>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    101, 0, 1,
    65532, 0,
    65535, 65535
  }}, {{
    // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite> known_map_field = 101;
    {PROTOBUF_FIELD_OFFSET(TestEnumMapPlusExtraLite, _impl_.known_map_field_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite> unknown_map_field = 102;
    {PROTOBUF_FIELD_OFFSET(TestEnumMapPlusExtraLite, _impl_.unknown_map_field_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestEnumMapPlusExtraLite()._impl_.known_map_field_)>(
        0, 0, 1, 5,
        14)},
    {::_pbi::FieldAuxEnumData{}, ::protobuf_unittest::Proto2MapEnumPlusExtraLite_internal_data_},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestEnumMapPlusExtraLite()._impl_.unknown_map_field_)>(
        0, 0, 1, 5,
        14)},
    {::_pbi::FieldAuxEnumData{}, ::protobuf_unittest::Proto2MapEnumPlusExtraLite_internal_data_},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TestEnumMapPlusExtraLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEnumMapPlusExtraLite)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.known_map_field_.Clear();
  _impl_.unknown_map_field_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestEnumMapPlusExtraLite::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestEnumMapPlusExtraLite& this_ = static_cast<const TestEnumMapPlusExtraLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestEnumMapPlusExtraLite::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestEnumMapPlusExtraLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEnumMapPlusExtraLite)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite> known_map_field = 101;
          if (!this_._internal_known_map_field().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtraLite>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtraLite,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_ENUM>;
            const auto& field = this_._internal_known_map_field();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    101, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    101, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite> unknown_map_field = 102;
          if (!this_._internal_unknown_map_field().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtraLite>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtraLite,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_ENUM>;
            const auto& field = this_._internal_unknown_map_field();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    102, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    102, entry.first, entry.second, target, stream);
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEnumMapPlusExtraLite)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestEnumMapPlusExtraLite::ByteSizeLong(const MessageLite& base) {
          const TestEnumMapPlusExtraLite& this_ = static_cast<const TestEnumMapPlusExtraLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestEnumMapPlusExtraLite::ByteSizeLong() const {
          const TestEnumMapPlusExtraLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEnumMapPlusExtraLite)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite> known_map_field = 101;
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_known_map_field_size());
              for (const auto& entry : this_._internal_known_map_field()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtraLite,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_ENUM>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite> unknown_map_field = 102;
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_unknown_map_field_size());
              for (const auto& entry : this_._internal_unknown_map_field()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtraLite,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_ENUM>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TestEnumMapPlusExtraLite::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestEnumMapPlusExtraLite*>(&to_msg);
  auto& from = static_cast<const TestEnumMapPlusExtraLite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEnumMapPlusExtraLite)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.known_map_field_.MergeFrom(from._impl_.known_map_field_);
  _this->_impl_.unknown_map_field_.MergeFrom(from._impl_.unknown_map_field_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestEnumMapPlusExtraLite::CopyFrom(const TestEnumMapPlusExtraLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEnumMapPlusExtraLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestEnumMapPlusExtraLite::InternalSwap(TestEnumMapPlusExtraLite* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.known_map_field_.InternalSwap(&other->_impl_.known_map_field_);
  _impl_.unknown_map_field_.InternalSwap(&other->_impl_.unknown_map_field_);
}

// ===================================================================

// ===================================================================

class TestMessageMapLite::_Internal {
 public:
};

void TestMessageMapLite::clear_map_int32_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.map_int32_message_.Clear();
}
TestMessageMapLite::TestMessageMapLite(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMessageMapLite)
}
inline PROTOBUF_NDEBUG_INLINE TestMessageMapLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestMessageMapLite& from_msg)
      : map_int32_message_{visibility, arena, from.map_int32_message_},
        _cached_size_{0} {}

TestMessageMapLite::TestMessageMapLite(
    ::google::protobuf::Arena* arena,
    const TestMessageMapLite& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestMessageMapLite* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMessageMapLite)
}
inline PROTOBUF_NDEBUG_INLINE TestMessageMapLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : map_int32_message_{visibility, arena},
        _cached_size_{0} {}

inline void TestMessageMapLite::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestMessageMapLite::~TestMessageMapLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMessageMapLite)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TestMessageMapLite::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<37>
    TestMessageMapLite::_class_data_ = {
        {
            &_TestMessageMapLite_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestMessageMapLite::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<TestMessageMapLite>(),
            ::google::protobuf::MessageLite::GetNewImpl<TestMessageMapLite>(),
            ::google::protobuf::MessageLite::GetClearImpl<TestMessageMapLite>(), &TestMessageMapLite::ByteSizeLong,
                &TestMessageMapLite::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestMessageMapLite, _impl_._cached_size_),
            true,
        },
        "protobuf_unittest.TestMessageMapLite",
};
const ::google::protobuf::MessageLite::ClassData* TestMessageMapLite::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 2, 0, 2> TestMessageMapLite::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestMessageMapLite>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // map<int32, .protobuf_unittest.TestAllTypesLite> map_int32_message = 1;
    {PROTOBUF_FIELD_OFFSET(TestMessageMapLite, _impl_.map_int32_message_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMessageMapLite()._impl_.map_int32_message_)>(
        0, 0, 0, 5,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::protobuf_unittest::TestAllTypesLite>},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TestMessageMapLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMessageMapLite)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_int32_message_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestMessageMapLite::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestMessageMapLite& this_ = static_cast<const TestMessageMapLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestMessageMapLite::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestMessageMapLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMessageMapLite)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // map<int32, .protobuf_unittest.TestAllTypesLite> map_int32_message = 1;
          if (!this_._internal_map_int32_message().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protobuf_unittest::TestAllTypesLite>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::TestAllTypesLite,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_MESSAGE>;
            const auto& field = this_._internal_map_int32_message();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    1, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    1, entry.first, entry.second, target, stream);
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMessageMapLite)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestMessageMapLite::ByteSizeLong(const MessageLite& base) {
          const TestMessageMapLite& this_ = static_cast<const TestMessageMapLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestMessageMapLite::ByteSizeLong() const {
          const TestMessageMapLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMessageMapLite)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<int32, .protobuf_unittest.TestAllTypesLite> map_int32_message = 1;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_map_int32_message_size());
              for (const auto& entry : this_._internal_map_int32_message()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protobuf_unittest::TestAllTypesLite,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TestMessageMapLite::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestMessageMapLite*>(&to_msg);
  auto& from = static_cast<const TestMessageMapLite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMessageMapLite)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_int32_message_.MergeFrom(from._impl_.map_int32_message_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestMessageMapLite::CopyFrom(const TestMessageMapLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMessageMapLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestMessageMapLite::InternalSwap(TestMessageMapLite* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_int32_message_.InternalSwap(&other->_impl_.map_int32_message_);
}

// ===================================================================

class TestRequiredLite::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TestRequiredLite>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TestRequiredLite, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

TestRequiredLite::TestRequiredLite(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequiredLite)
}
TestRequiredLite::TestRequiredLite(
    ::google::protobuf::Arena* arena, const TestRequiredLite& from)
    : TestRequiredLite(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TestRequiredLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TestRequiredLite::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, a_),
           0,
           offsetof(Impl_, c_) -
               offsetof(Impl_, a_) +
               sizeof(Impl_::c_));
}
TestRequiredLite::~TestRequiredLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequiredLite)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TestRequiredLite::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<35>
    TestRequiredLite::_class_data_ = {
        {
            &_TestRequiredLite_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            TestRequiredLite::IsInitializedImpl,
            &TestRequiredLite::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<TestRequiredLite>(),
            ::google::protobuf::MessageLite::GetNewImpl<TestRequiredLite>(),
            ::google::protobuf::MessageLite::GetClearImpl<TestRequiredLite>(), &TestRequiredLite::ByteSizeLong,
                &TestRequiredLite::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestRequiredLite, _impl_._cached_size_),
            true,
        },
        "protobuf_unittest.TestRequiredLite",
};
const ::google::protobuf::MessageLite::ClassData* TestRequiredLite::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> TestRequiredLite::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestRequiredLite, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestRequiredLite>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 a = 1 [features = {
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(TestRequiredLite, _impl_.a_)}},
    // int32 b = 2 [features = {
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(TestRequiredLite, _impl_.b_)}},
    // int32 c = 3 [features = {
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(TestRequiredLite, _impl_.c_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 a = 1 [features = {
    {PROTOBUF_FIELD_OFFSET(TestRequiredLite, _impl_.a_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 b = 2 [features = {
    {PROTOBUF_FIELD_OFFSET(TestRequiredLite, _impl_.b_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 c = 3 [features = {
    {PROTOBUF_FIELD_OFFSET(TestRequiredLite, _impl_.c_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TestRequiredLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequiredLite)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.a_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.c_) -
        reinterpret_cast<char*>(&_impl_.a_)) + sizeof(_impl_.c_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestRequiredLite::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestRequiredLite& this_ = static_cast<const TestRequiredLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestRequiredLite::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestRequiredLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequiredLite)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // int32 a = 1 [features = {
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_a(), target);
          }

          // int32 b = 2 [features = {
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_b(), target);
          }

          // int32 c = 3 [features = {
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_c(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequiredLite)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestRequiredLite::ByteSizeLong(const MessageLite& base) {
          const TestRequiredLite& this_ = static_cast<const TestRequiredLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestRequiredLite::ByteSizeLong() const {
          const TestRequiredLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequiredLite)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // int32 a = 1 [features = {
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_a());
            }
            // int32 b = 2 [features = {
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_b());
            }
            // int32 c = 3 [features = {
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_c());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TestRequiredLite::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestRequiredLite*>(&to_msg);
  auto& from = static_cast<const TestRequiredLite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequiredLite)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.a_ = from._impl_.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.b_ = from._impl_.b_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.c_ = from._impl_.c_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestRequiredLite::CopyFrom(const TestRequiredLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequiredLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestRequiredLite::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const TestRequiredLite&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void TestRequiredLite::InternalSwap(TestRequiredLite* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestRequiredLite, _impl_.c_)
      + sizeof(TestRequiredLite::_impl_.c_)
      - PROTOBUF_FIELD_OFFSET(TestRequiredLite, _impl_.a_)>(
          reinterpret_cast<char*>(&_impl_.a_),
          reinterpret_cast<char*>(&other->_impl_.a_));
}

// ===================================================================

class ForeignMessageArenaLite::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ForeignMessageArenaLite>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ForeignMessageArenaLite, _impl_._has_bits_);
};

ForeignMessageArenaLite::ForeignMessageArenaLite(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.ForeignMessageArenaLite)
}
ForeignMessageArenaLite::ForeignMessageArenaLite(
    ::google::protobuf::Arena* arena, const ForeignMessageArenaLite& from)
    : ForeignMessageArenaLite(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ForeignMessageArenaLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ForeignMessageArenaLite::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.c_ = {};
}
ForeignMessageArenaLite::~ForeignMessageArenaLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.ForeignMessageArenaLite)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void ForeignMessageArenaLite::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<42>
    ForeignMessageArenaLite::_class_data_ = {
        {
            &_ForeignMessageArenaLite_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ForeignMessageArenaLite::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<ForeignMessageArenaLite>(),
            ::google::protobuf::MessageLite::GetNewImpl<ForeignMessageArenaLite>(),
            ::google::protobuf::MessageLite::GetClearImpl<ForeignMessageArenaLite>(), &ForeignMessageArenaLite::ByteSizeLong,
                &ForeignMessageArenaLite::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ForeignMessageArenaLite, _impl_._cached_size_),
            true,
        },
        "protobuf_unittest.ForeignMessageArenaLite",
};
const ::google::protobuf::MessageLite::ClassData* ForeignMessageArenaLite::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ForeignMessageArenaLite::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ForeignMessageArenaLite, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::ForeignMessageArenaLite>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 c = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(ForeignMessageArenaLite, _impl_.c_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 c = 1;
    {PROTOBUF_FIELD_OFFSET(ForeignMessageArenaLite, _impl_.c_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ForeignMessageArenaLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.ForeignMessageArenaLite)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.c_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ForeignMessageArenaLite::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ForeignMessageArenaLite& this_ = static_cast<const ForeignMessageArenaLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ForeignMessageArenaLite::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ForeignMessageArenaLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.ForeignMessageArenaLite)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // int32 c = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_c(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.ForeignMessageArenaLite)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ForeignMessageArenaLite::ByteSizeLong(const MessageLite& base) {
          const ForeignMessageArenaLite& this_ = static_cast<const ForeignMessageArenaLite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ForeignMessageArenaLite::ByteSizeLong() const {
          const ForeignMessageArenaLite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.ForeignMessageArenaLite)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int32 c = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_c());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void ForeignMessageArenaLite::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ForeignMessageArenaLite*>(&to_msg);
  auto& from = static_cast<const ForeignMessageArenaLite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.ForeignMessageArenaLite)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.c_ = from._impl_.c_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ForeignMessageArenaLite::CopyFrom(const ForeignMessageArenaLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.ForeignMessageArenaLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ForeignMessageArenaLite::InternalSwap(ForeignMessageArenaLite* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.c_, other->_impl_.c_);
}

#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
               const int TestRequiredLite::kSingleFieldNumber;
#endif
PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::_pbi::
        ExtensionIdentifier<::protobuf_unittest::TestAllExtensionsLite, ::_pbi::MessageTypeTraits< ::protobuf_unittest::TestRequiredLite >,
                            11, false>
            TestRequiredLite::single(kSingleFieldNumber, &::protobuf_unittest::_TestRequiredLite_default_instance_);
// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::ExtensionSet::RegisterMessageExtension(
            &::protobuf_unittest::TestAllExtensionsLite::default_instance(), 1000, 11,
            false, false, &::protobuf_unittest::TestRequiredLite::default_instance(),
            nullptr, ::_pbi::LazyAnnotation::kUndefined),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
