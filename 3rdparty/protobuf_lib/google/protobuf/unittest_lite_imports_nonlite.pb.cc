// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/protobuf/unittest_lite_imports_nonlite.proto
// Protobuf C++ Version: 5.29.0-dev

#include "google/protobuf/unittest_lite_imports_nonlite.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace protobuf_unittest {

inline constexpr TestLiteImportsNonlite::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_{nullptr},
        message_with_required_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TestLiteImportsNonlite::TestLiteImportsNonlite(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestLiteImportsNonliteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestLiteImportsNonliteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestLiteImportsNonliteDefaultTypeInternal() {}
  union {
    TestLiteImportsNonlite _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestLiteImportsNonliteDefaultTypeInternal _TestLiteImportsNonlite_default_instance_;
}  // namespace protobuf_unittest
namespace protobuf_unittest {
// ===================================================================

class TestLiteImportsNonlite::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TestLiteImportsNonlite>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TestLiteImportsNonlite, _impl_._has_bits_);
};

void TestLiteImportsNonlite::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_ != nullptr) _impl_.message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TestLiteImportsNonlite::clear_message_with_required() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_with_required_ != nullptr) _impl_.message_with_required_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TestLiteImportsNonlite::TestLiteImportsNonlite(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestLiteImportsNonlite)
}
inline PROTOBUF_NDEBUG_INLINE TestLiteImportsNonlite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestLiteImportsNonlite& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TestLiteImportsNonlite::TestLiteImportsNonlite(
    ::google::protobuf::Arena* arena,
    const TestLiteImportsNonlite& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestLiteImportsNonlite* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.message_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::protobuf_unittest::TestAllTypes>(
                              arena, *from._impl_.message_)
                        : nullptr;
  _impl_.message_with_required_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::MessageLite::CopyConstruct<::protobuf_unittest::TestRequired>(
                              arena, *from._impl_.message_with_required_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestLiteImportsNonlite)
}
inline PROTOBUF_NDEBUG_INLINE TestLiteImportsNonlite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TestLiteImportsNonlite::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, message_),
           0,
           offsetof(Impl_, message_with_required_) -
               offsetof(Impl_, message_) +
               sizeof(Impl_::message_with_required_));
}
TestLiteImportsNonlite::~TestLiteImportsNonlite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestLiteImportsNonlite)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TestLiteImportsNonlite::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.message_;
  delete _impl_.message_with_required_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<41>
    TestLiteImportsNonlite::_class_data_ = {
        {
            &_TestLiteImportsNonlite_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            TestLiteImportsNonlite::IsInitializedImpl,
            &TestLiteImportsNonlite::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<TestLiteImportsNonlite>(),
            ::google::protobuf::MessageLite::GetNewImpl<TestLiteImportsNonlite>(),
            ::google::protobuf::MessageLite::GetClearImpl<TestLiteImportsNonlite>(), &TestLiteImportsNonlite::ByteSizeLong,
                &TestLiteImportsNonlite::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestLiteImportsNonlite, _impl_._cached_size_),
            true,
        },
        "protobuf_unittest.TestLiteImportsNonlite",
};
const ::google::protobuf::MessageLite::ClassData* TestLiteImportsNonlite::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> TestLiteImportsNonlite::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestLiteImportsNonlite, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestLiteImportsNonlite>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .protobuf_unittest.TestRequired message_with_required = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TestLiteImportsNonlite, _impl_.message_with_required_)}},
    // optional .protobuf_unittest.TestAllTypes message = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TestLiteImportsNonlite, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .protobuf_unittest.TestAllTypes message = 1;
    {PROTOBUF_FIELD_OFFSET(TestLiteImportsNonlite, _impl_.message_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .protobuf_unittest.TestRequired message_with_required = 2;
    {PROTOBUF_FIELD_OFFSET(TestLiteImportsNonlite, _impl_.message_with_required_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf_unittest::TestAllTypes>()},
    {::_pbi::TcParser::GetTable<::protobuf_unittest::TestRequired>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TestLiteImportsNonlite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestLiteImportsNonlite)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.message_ != nullptr);
      _impl_.message_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.message_with_required_ != nullptr);
      _impl_.message_with_required_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestLiteImportsNonlite::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestLiteImportsNonlite& this_ = static_cast<const TestLiteImportsNonlite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestLiteImportsNonlite::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestLiteImportsNonlite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestLiteImportsNonlite)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .protobuf_unittest.TestAllTypes message = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.message_, this_._impl_.message_->GetCachedSize(), target,
                stream);
          }

          // optional .protobuf_unittest.TestRequired message_with_required = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.message_with_required_, this_._impl_.message_with_required_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestLiteImportsNonlite)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestLiteImportsNonlite::ByteSizeLong(const MessageLite& base) {
          const TestLiteImportsNonlite& this_ = static_cast<const TestLiteImportsNonlite&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestLiteImportsNonlite::ByteSizeLong() const {
          const TestLiteImportsNonlite& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestLiteImportsNonlite)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .protobuf_unittest.TestAllTypes message = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_);
            }
            // optional .protobuf_unittest.TestRequired message_with_required = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_with_required_);
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TestLiteImportsNonlite::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestLiteImportsNonlite*>(&to_msg);
  auto& from = static_cast<const TestLiteImportsNonlite&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestLiteImportsNonlite)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.message_ != nullptr);
      if (_this->_impl_.message_ == nullptr) {
        _this->_impl_.message_ =
            ::google::protobuf::MessageLite::CopyConstruct<::protobuf_unittest::TestAllTypes>(arena, *from._impl_.message_);
      } else {
        _this->_impl_.message_->MergeFrom(*from._impl_.message_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.message_with_required_ != nullptr);
      if (_this->_impl_.message_with_required_ == nullptr) {
        _this->_impl_.message_with_required_ =
            ::google::protobuf::MessageLite::CopyConstruct<::protobuf_unittest::TestRequired>(arena, *from._impl_.message_with_required_);
      } else {
        _this->_impl_.message_with_required_->MergeFrom(*from._impl_.message_with_required_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestLiteImportsNonlite::CopyFrom(const TestLiteImportsNonlite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestLiteImportsNonlite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestLiteImportsNonlite::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const TestLiteImportsNonlite&>(msg);
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.message_with_required_->IsInitialized()) return false;
  }
  return true;
}

void TestLiteImportsNonlite::InternalSwap(TestLiteImportsNonlite* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestLiteImportsNonlite, _impl_.message_with_required_)
      + sizeof(TestLiteImportsNonlite::_impl_.message_with_required_)
      - PROTOBUF_FIELD_OFFSET(TestLiteImportsNonlite, _impl_.message_)>(
          reinterpret_cast<char*>(&_impl_.message_),
          reinterpret_cast<char*>(&other->_impl_.message_));
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
