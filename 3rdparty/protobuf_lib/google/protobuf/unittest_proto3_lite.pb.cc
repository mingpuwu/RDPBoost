// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/protobuf/unittest_proto3_lite.proto
// Protobuf C++ Version: 5.29.0-dev

#include "google/protobuf/unittest_proto3_lite.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace proto3_lite_unittest {

inline constexpr TestUnpackedTypes::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : repeated_int32_{},
        repeated_int64_{},
        repeated_uint32_{},
        repeated_uint64_{},
        repeated_sint32_{},
        repeated_sint64_{},
        repeated_fixed32_{},
        repeated_fixed64_{},
        repeated_sfixed32_{},
        repeated_sfixed64_{},
        repeated_float_{},
        repeated_double_{},
        repeated_bool_{},
        repeated_nested_enum_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestUnpackedTypes::TestUnpackedTypes(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestUnpackedTypesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestUnpackedTypesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestUnpackedTypesDefaultTypeInternal() {}
  union {
    TestUnpackedTypes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestUnpackedTypesDefaultTypeInternal _TestUnpackedTypes_default_instance_;

inline constexpr TestPackedTypes::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : packed_int32_{},
        _packed_int32_cached_byte_size_{0},
        packed_int64_{},
        _packed_int64_cached_byte_size_{0},
        packed_uint32_{},
        _packed_uint32_cached_byte_size_{0},
        packed_uint64_{},
        _packed_uint64_cached_byte_size_{0},
        packed_sint32_{},
        _packed_sint32_cached_byte_size_{0},
        packed_sint64_{},
        _packed_sint64_cached_byte_size_{0},
        packed_fixed32_{},
        packed_fixed64_{},
        packed_sfixed32_{},
        packed_sfixed64_{},
        packed_float_{},
        packed_double_{},
        packed_bool_{},
        packed_enum_{},
        _packed_enum_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestPackedTypes::TestPackedTypes(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestPackedTypesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestPackedTypesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestPackedTypesDefaultTypeInternal() {}
  union {
    TestPackedTypes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestPackedTypesDefaultTypeInternal _TestPackedTypes_default_instance_;

inline constexpr TestEmptyMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestEmptyMessage::TestEmptyMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestEmptyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEmptyMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEmptyMessageDefaultTypeInternal() {}
  union {
    TestEmptyMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEmptyMessageDefaultTypeInternal _TestEmptyMessage_default_instance_;

inline constexpr TestAllTypes_NestedMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : bb_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestAllTypes_NestedMessage::TestAllTypes_NestedMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestAllTypes_NestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypes_NestedMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypes_NestedMessageDefaultTypeInternal() {}
  union {
    TestAllTypes_NestedMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypes_NestedMessageDefaultTypeInternal _TestAllTypes_NestedMessage_default_instance_;

inline constexpr ForeignMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : c_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ForeignMessage::ForeignMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ForeignMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForeignMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForeignMessageDefaultTypeInternal() {}
  union {
    ForeignMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForeignMessageDefaultTypeInternal _ForeignMessage_default_instance_;

inline constexpr TestAllTypes::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        repeated_int32_{},
        _repeated_int32_cached_byte_size_{0},
        repeated_int64_{},
        _repeated_int64_cached_byte_size_{0},
        repeated_uint32_{},
        _repeated_uint32_cached_byte_size_{0},
        repeated_uint64_{},
        _repeated_uint64_cached_byte_size_{0},
        repeated_sint32_{},
        _repeated_sint32_cached_byte_size_{0},
        repeated_sint64_{},
        _repeated_sint64_cached_byte_size_{0},
        repeated_fixed32_{},
        repeated_fixed64_{},
        repeated_sfixed32_{},
        repeated_sfixed64_{},
        repeated_float_{},
        repeated_double_{},
        repeated_bool_{},
        repeated_string_{},
        repeated_bytes_{},
        repeated_nested_message_{},
        repeated_foreign_message_{},
        repeated_import_message_{},
        repeated_nested_enum_{},
        _repeated_nested_enum_cached_byte_size_{0},
        repeated_foreign_enum_{},
        _repeated_foreign_enum_cached_byte_size_{0},
        repeated_string_piece_{},
        repeated_cord_{},
        repeated_lazy_message_{},
        optional_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        optional_bytes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        optional_string_piece_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        optional_cord_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        optional_nested_message_{nullptr},
        optional_foreign_message_{nullptr},
        optional_import_message_{nullptr},
        optional_public_import_message_{nullptr},
        optional_lazy_message_{nullptr},
        optional_int64_{::int64_t{0}},
        optional_int32_{0},
        optional_uint32_{0u},
        optional_uint64_{::uint64_t{0u}},
        optional_sint64_{::int64_t{0}},
        optional_sint32_{0},
        optional_fixed32_{0u},
        optional_fixed64_{::uint64_t{0u}},
        optional_sfixed64_{::int64_t{0}},
        optional_sfixed32_{0},
        optional_float_{0},
        optional_double_{0},
        optional_bool_{false},
        optional_nested_enum_{static_cast< ::proto3_lite_unittest::TestAllTypes_NestedEnum >(0)},
        optional_foreign_enum_{static_cast< ::proto3_lite_unittest::ForeignEnum >(0)},
        oneof_field_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR TestAllTypes::TestAllTypes(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestAllTypesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesDefaultTypeInternal() {}
  union {
    TestAllTypes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesDefaultTypeInternal _TestAllTypes_default_instance_;

inline constexpr NestedTestAllTypes::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        child_{nullptr},
        payload_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR NestedTestAllTypes::NestedTestAllTypes(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NestedTestAllTypesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NestedTestAllTypesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NestedTestAllTypesDefaultTypeInternal() {}
  union {
    NestedTestAllTypes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NestedTestAllTypesDefaultTypeInternal _NestedTestAllTypes_default_instance_;
}  // namespace proto3_lite_unittest
namespace proto3_lite_unittest {
PROTOBUF_CONSTINIT const uint32_t TestAllTypes_NestedEnum_internal_data_[] = {
    393215u, 0u, };
bool TestAllTypes_NestedEnum_IsValid(int value) {
  return -1 <= value && value <= 3;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    TestAllTypes_NestedEnum_strings[5] = {};

static const char TestAllTypes_NestedEnum_names[] = {
    "BAR"
    "BAZ"
    "FOO"
    "NEG"
    "ZERO"
};

static const ::google::protobuf::internal::EnumEntry TestAllTypes_NestedEnum_entries[] =
    {
        {{&TestAllTypes_NestedEnum_names[0], 3}, 2},
        {{&TestAllTypes_NestedEnum_names[3], 3}, 3},
        {{&TestAllTypes_NestedEnum_names[6], 3}, 1},
        {{&TestAllTypes_NestedEnum_names[9], 3}, -1},
        {{&TestAllTypes_NestedEnum_names[12], 4}, 0},
};

static const int TestAllTypes_NestedEnum_entries_by_number[] = {
    3,  // -1 -> NEG
    4,  // 0 -> ZERO
    2,  // 1 -> FOO
    0,  // 2 -> BAR
    1,  // 3 -> BAZ
};

const std::string& TestAllTypes_NestedEnum_Name(TestAllTypes_NestedEnum value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          TestAllTypes_NestedEnum_entries, TestAllTypes_NestedEnum_entries_by_number,
          5, TestAllTypes_NestedEnum_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      TestAllTypes_NestedEnum_entries, TestAllTypes_NestedEnum_entries_by_number, 5,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : TestAllTypes_NestedEnum_strings[idx].get();
}

bool TestAllTypes_NestedEnum_Parse(absl::string_view name, TestAllTypes_NestedEnum* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      TestAllTypes_NestedEnum_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<TestAllTypes_NestedEnum>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TestAllTypes_NestedEnum TestAllTypes::ZERO;
constexpr TestAllTypes_NestedEnum TestAllTypes::FOO;
constexpr TestAllTypes_NestedEnum TestAllTypes::BAR;
constexpr TestAllTypes_NestedEnum TestAllTypes::BAZ;
constexpr TestAllTypes_NestedEnum TestAllTypes::NEG;
constexpr TestAllTypes_NestedEnum TestAllTypes::NestedEnum_MIN;
constexpr TestAllTypes_NestedEnum TestAllTypes::NestedEnum_MAX;
constexpr int TestAllTypes::NestedEnum_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t ForeignEnum_internal_data_[] = {
    65536u, 32u, 56u, };
bool ForeignEnum_IsValid(int value) {
  return 0 <= value && value <= 6 && ((113u >> value) & 1) != 0;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    ForeignEnum_strings[4] = {};

static const char ForeignEnum_names[] = {
    "FOREIGN_BAR"
    "FOREIGN_BAZ"
    "FOREIGN_FOO"
    "FOREIGN_ZERO"
};

static const ::google::protobuf::internal::EnumEntry ForeignEnum_entries[] =
    {
        {{&ForeignEnum_names[0], 11}, 5},
        {{&ForeignEnum_names[11], 11}, 6},
        {{&ForeignEnum_names[22], 11}, 4},
        {{&ForeignEnum_names[33], 12}, 0},
};

static const int ForeignEnum_entries_by_number[] = {
    3,  // 0 -> FOREIGN_ZERO
    2,  // 4 -> FOREIGN_FOO
    0,  // 5 -> FOREIGN_BAR
    1,  // 6 -> FOREIGN_BAZ
};

const std::string& ForeignEnum_Name(ForeignEnum value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          ForeignEnum_entries, ForeignEnum_entries_by_number,
          4, ForeignEnum_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      ForeignEnum_entries, ForeignEnum_entries_by_number, 4,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : ForeignEnum_strings[idx].get();
}

bool ForeignEnum_Parse(absl::string_view name, ForeignEnum* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      ForeignEnum_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ForeignEnum>(int_value);
  }
  return success;
}
// ===================================================================

class TestAllTypes_NestedMessage::_Internal {
 public:
};

TestAllTypes_NestedMessage::TestAllTypes_NestedMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_lite_unittest.TestAllTypes.NestedMessage)
}
TestAllTypes_NestedMessage::TestAllTypes_NestedMessage(
    ::google::protobuf::Arena* arena, const TestAllTypes_NestedMessage& from)
    : TestAllTypes_NestedMessage(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TestAllTypes_NestedMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TestAllTypes_NestedMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.bb_ = {};
}
TestAllTypes_NestedMessage::~TestAllTypes_NestedMessage() {
  // @@protoc_insertion_point(destructor:proto3_lite_unittest.TestAllTypes.NestedMessage)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TestAllTypes_NestedMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<48>
    TestAllTypes_NestedMessage::_class_data_ = {
        {
            &_TestAllTypes_NestedMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestAllTypes_NestedMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<TestAllTypes_NestedMessage>(),
            ::google::protobuf::MessageLite::GetNewImpl<TestAllTypes_NestedMessage>(),
            ::google::protobuf::MessageLite::GetClearImpl<TestAllTypes_NestedMessage>(), &TestAllTypes_NestedMessage::ByteSizeLong,
                &TestAllTypes_NestedMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestAllTypes_NestedMessage, _impl_._cached_size_),
            true,
        },
        "proto3_lite_unittest.TestAllTypes.NestedMessage",
};
const ::google::protobuf::MessageLite::ClassData* TestAllTypes_NestedMessage::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> TestAllTypes_NestedMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::proto3_lite_unittest::TestAllTypes_NestedMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 bb = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes_NestedMessage, _impl_.bb_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 bb = 1;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes_NestedMessage, _impl_.bb_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TestAllTypes_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_lite_unittest.TestAllTypes.NestedMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bb_ = 0;
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestAllTypes_NestedMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestAllTypes_NestedMessage& this_ = static_cast<const TestAllTypes_NestedMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestAllTypes_NestedMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestAllTypes_NestedMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:proto3_lite_unittest.TestAllTypes.NestedMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 bb = 1;
          if (this_._internal_bb() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_bb(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:proto3_lite_unittest.TestAllTypes.NestedMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestAllTypes_NestedMessage::ByteSizeLong(const MessageLite& base) {
          const TestAllTypes_NestedMessage& this_ = static_cast<const TestAllTypes_NestedMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestAllTypes_NestedMessage::ByteSizeLong() const {
          const TestAllTypes_NestedMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:proto3_lite_unittest.TestAllTypes.NestedMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int32 bb = 1;
            if (this_._internal_bb() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_bb());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TestAllTypes_NestedMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestAllTypes_NestedMessage*>(&to_msg);
  auto& from = static_cast<const TestAllTypes_NestedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto3_lite_unittest.TestAllTypes.NestedMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bb() != 0) {
    _this->_impl_.bb_ = from._impl_.bb_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestAllTypes_NestedMessage::CopyFrom(const TestAllTypes_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_lite_unittest.TestAllTypes.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestAllTypes_NestedMessage::InternalSwap(TestAllTypes_NestedMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.bb_, other->_impl_.bb_);
}

// ===================================================================

class TestAllTypes::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TestAllTypes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::proto3_lite_unittest::TestAllTypes, _impl_._oneof_case_);
};

void TestAllTypes::clear_optional_import_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.optional_import_message_ != nullptr) _impl_.optional_import_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TestAllTypes::clear_optional_public_import_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.optional_public_import_message_ != nullptr) _impl_.optional_public_import_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void TestAllTypes::clear_repeated_import_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.repeated_import_message_.Clear();
}
void TestAllTypes::set_allocated_oneof_nested_message(::proto3_lite_unittest::TestAllTypes_NestedMessage* oneof_nested_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_oneof_field();
  if (oneof_nested_message) {
    ::google::protobuf::Arena* submessage_arena = oneof_nested_message->GetArena();
    if (message_arena != submessage_arena) {
      oneof_nested_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, oneof_nested_message, submessage_arena);
    }
    set_has_oneof_nested_message();
    _impl_.oneof_field_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_lite_unittest.TestAllTypes.oneof_nested_message)
}
TestAllTypes::TestAllTypes(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_lite_unittest.TestAllTypes)
}
inline PROTOBUF_NDEBUG_INLINE TestAllTypes::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::proto3_lite_unittest::TestAllTypes& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        repeated_int32_{visibility, arena, from.repeated_int32_},
        _repeated_int32_cached_byte_size_{0},
        repeated_int64_{visibility, arena, from.repeated_int64_},
        _repeated_int64_cached_byte_size_{0},
        repeated_uint32_{visibility, arena, from.repeated_uint32_},
        _repeated_uint32_cached_byte_size_{0},
        repeated_uint64_{visibility, arena, from.repeated_uint64_},
        _repeated_uint64_cached_byte_size_{0},
        repeated_sint32_{visibility, arena, from.repeated_sint32_},
        _repeated_sint32_cached_byte_size_{0},
        repeated_sint64_{visibility, arena, from.repeated_sint64_},
        _repeated_sint64_cached_byte_size_{0},
        repeated_fixed32_{visibility, arena, from.repeated_fixed32_},
        repeated_fixed64_{visibility, arena, from.repeated_fixed64_},
        repeated_sfixed32_{visibility, arena, from.repeated_sfixed32_},
        repeated_sfixed64_{visibility, arena, from.repeated_sfixed64_},
        repeated_float_{visibility, arena, from.repeated_float_},
        repeated_double_{visibility, arena, from.repeated_double_},
        repeated_bool_{visibility, arena, from.repeated_bool_},
        repeated_string_{visibility, arena, from.repeated_string_},
        repeated_bytes_{visibility, arena, from.repeated_bytes_},
        repeated_nested_message_{visibility, arena, from.repeated_nested_message_},
        repeated_foreign_message_{visibility, arena, from.repeated_foreign_message_},
        repeated_import_message_{visibility, arena, from.repeated_import_message_},
        repeated_nested_enum_{visibility, arena, from.repeated_nested_enum_},
        _repeated_nested_enum_cached_byte_size_{0},
        repeated_foreign_enum_{visibility, arena, from.repeated_foreign_enum_},
        _repeated_foreign_enum_cached_byte_size_{0},
        repeated_string_piece_{visibility, arena, from.repeated_string_piece_},
        repeated_cord_{visibility, arena, from.repeated_cord_},
        repeated_lazy_message_{visibility, arena, from.repeated_lazy_message_},
        optional_string_(arena, from.optional_string_),
        optional_bytes_(arena, from.optional_bytes_),
        optional_string_piece_(arena, from.optional_string_piece_),
        optional_cord_(arena, from.optional_cord_),
        oneof_field_{},
        _oneof_case_{from._oneof_case_[0]} {}

TestAllTypes::TestAllTypes(
    ::google::protobuf::Arena* arena,
    const TestAllTypes& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestAllTypes* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.optional_nested_message_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::proto3_lite_unittest::TestAllTypes_NestedMessage>(
                              arena, *from._impl_.optional_nested_message_)
                        : nullptr;
  _impl_.optional_foreign_message_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::MessageLite::CopyConstruct<::proto3_lite_unittest::ForeignMessage>(
                              arena, *from._impl_.optional_foreign_message_)
                        : nullptr;
  _impl_.optional_import_message_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::MessageLite::CopyConstruct<::protobuf_unittest_import::ImportMessage>(
                              arena, *from._impl_.optional_import_message_)
                        : nullptr;
  _impl_.optional_public_import_message_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::MessageLite::CopyConstruct<::protobuf_unittest_import::PublicImportMessage>(
                              arena, *from._impl_.optional_public_import_message_)
                        : nullptr;
  _impl_.optional_lazy_message_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::MessageLite::CopyConstruct<::proto3_lite_unittest::TestAllTypes_NestedMessage>(
                              arena, *from._impl_.optional_lazy_message_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, optional_int64_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, optional_int64_),
           offsetof(Impl_, optional_foreign_enum_) -
               offsetof(Impl_, optional_int64_) +
               sizeof(Impl_::optional_foreign_enum_));
  switch (oneof_field_case()) {
    case ONEOF_FIELD_NOT_SET:
      break;
      case kOneofUint32:
        _impl_.oneof_field_.oneof_uint32_ = from._impl_.oneof_field_.oneof_uint32_;
        break;
      case kOneofNestedMessage:
        _impl_.oneof_field_.oneof_nested_message_ = ::google::protobuf::MessageLite::CopyConstruct<::proto3_lite_unittest::TestAllTypes_NestedMessage>(arena, *from._impl_.oneof_field_.oneof_nested_message_);
        break;
      case kOneofString:
        new (&_impl_.oneof_field_.oneof_string_) decltype(_impl_.oneof_field_.oneof_string_){arena, from._impl_.oneof_field_.oneof_string_};
        break;
      case kOneofBytes:
        new (&_impl_.oneof_field_.oneof_bytes_) decltype(_impl_.oneof_field_.oneof_bytes_){arena, from._impl_.oneof_field_.oneof_bytes_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:proto3_lite_unittest.TestAllTypes)
}
inline PROTOBUF_NDEBUG_INLINE TestAllTypes::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        repeated_int32_{visibility, arena},
        _repeated_int32_cached_byte_size_{0},
        repeated_int64_{visibility, arena},
        _repeated_int64_cached_byte_size_{0},
        repeated_uint32_{visibility, arena},
        _repeated_uint32_cached_byte_size_{0},
        repeated_uint64_{visibility, arena},
        _repeated_uint64_cached_byte_size_{0},
        repeated_sint32_{visibility, arena},
        _repeated_sint32_cached_byte_size_{0},
        repeated_sint64_{visibility, arena},
        _repeated_sint64_cached_byte_size_{0},
        repeated_fixed32_{visibility, arena},
        repeated_fixed64_{visibility, arena},
        repeated_sfixed32_{visibility, arena},
        repeated_sfixed64_{visibility, arena},
        repeated_float_{visibility, arena},
        repeated_double_{visibility, arena},
        repeated_bool_{visibility, arena},
        repeated_string_{visibility, arena},
        repeated_bytes_{visibility, arena},
        repeated_nested_message_{visibility, arena},
        repeated_foreign_message_{visibility, arena},
        repeated_import_message_{visibility, arena},
        repeated_nested_enum_{visibility, arena},
        _repeated_nested_enum_cached_byte_size_{0},
        repeated_foreign_enum_{visibility, arena},
        _repeated_foreign_enum_cached_byte_size_{0},
        repeated_string_piece_{visibility, arena},
        repeated_cord_{visibility, arena},
        repeated_lazy_message_{visibility, arena},
        optional_string_(arena),
        optional_bytes_(arena),
        optional_string_piece_(arena),
        optional_cord_(arena),
        oneof_field_{},
        _oneof_case_{} {}

inline void TestAllTypes::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, optional_nested_message_),
           0,
           offsetof(Impl_, optional_foreign_enum_) -
               offsetof(Impl_, optional_nested_message_) +
               sizeof(Impl_::optional_foreign_enum_));
}
TestAllTypes::~TestAllTypes() {
  // @@protoc_insertion_point(destructor:proto3_lite_unittest.TestAllTypes)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TestAllTypes::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.optional_string_.Destroy();
  _impl_.optional_bytes_.Destroy();
  _impl_.optional_string_piece_.Destroy();
  _impl_.optional_cord_.Destroy();
  delete _impl_.optional_nested_message_;
  delete _impl_.optional_foreign_message_;
  delete _impl_.optional_import_message_;
  delete _impl_.optional_public_import_message_;
  delete _impl_.optional_lazy_message_;
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  _impl_.~Impl_();
}

void TestAllTypes::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:proto3_lite_unittest.TestAllTypes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (oneof_field_case()) {
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofNestedMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.oneof_field_.oneof_nested_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        if (_impl_.oneof_field_.oneof_nested_message_ != nullptr) {
          _impl_.oneof_field_.oneof_nested_message_->Clear();
        }
      }
      break;
    }
    case kOneofString: {
      _impl_.oneof_field_.oneof_string_.Destroy();
      break;
    }
    case kOneofBytes: {
      _impl_.oneof_field_.oneof_bytes_.Destroy();
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<34>
    TestAllTypes::_class_data_ = {
        {
            &_TestAllTypes_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestAllTypes::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<TestAllTypes>(),
            ::google::protobuf::MessageLite::GetNewImpl<TestAllTypes>(),
            ::google::protobuf::MessageLite::GetClearImpl<TestAllTypes>(), &TestAllTypes::ByteSizeLong,
                &TestAllTypes::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_._cached_size_),
            true,
        },
        "proto3_lite_unittest.TestAllTypes",
};
const ::google::protobuf::MessageLite::ClassData* TestAllTypes::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 51, 10, 200, 17> TestAllTypes::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_._has_bits_),
    0, // no _extensions_
    114, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    943816704,  // skipmap
    offsetof(decltype(_table_), field_entries),
    51,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::proto3_lite_unittest::TestAllTypes>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 optional_int32 = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_int32_)}},
    // int64 optional_int64 = 2;
    {::_pbi::TcParser::FastV64S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_int64_)}},
    // uint32 optional_uint32 = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_uint32_)}},
    // uint64 optional_uint64 = 4;
    {::_pbi::TcParser::FastV64S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_uint64_)}},
    // sint32 optional_sint32 = 5;
    {::_pbi::TcParser::FastZ32S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_sint32_)}},
    // sint64 optional_sint64 = 6;
    {::_pbi::TcParser::FastZ64S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_sint64_)}},
    // fixed32 optional_fixed32 = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_fixed32_)}},
    // fixed64 optional_fixed64 = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_fixed64_)}},
    // sfixed32 optional_sfixed32 = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_sfixed32_)}},
    // sfixed64 optional_sfixed64 = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_sfixed64_)}},
    // float optional_float = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_float_)}},
    // double optional_double = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_double_)}},
    // bool optional_bool = 13;
    {::_pbi::TcParser::FastV8S1,
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_bool_)}},
    // string optional_string = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_string_)}},
    // bytes optional_bytes = 15;
    {::_pbi::TcParser::FastBS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_bytes_)}},
    // repeated int64 repeated_int64 = 32;
    {::_pbi::TcParser::FastV64P2,
     {642, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_int64_)}},
    // repeated uint32 repeated_uint32 = 33;
    {::_pbi::TcParser::FastV32P2,
     {650, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_uint32_)}},
    // .proto3_lite_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 0, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_nested_message_)}},
    // .proto3_lite_unittest.ForeignMessage optional_foreign_message = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 1, 1, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_foreign_message_)}},
    // .protobuf_unittest_import.ImportMessage optional_import_message = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 2, 2, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_import_message_)}},
    // .proto3_lite_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_nested_enum_)}},
    // .proto3_lite_unittest.ForeignEnum optional_foreign_enum = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_foreign_enum_)}},
    // repeated sfixed32 repeated_sfixed32 = 39;
    {::_pbi::TcParser::FastF32P2,
     {698, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_sfixed32_)}},
    // repeated sfixed64 repeated_sfixed64 = 40;
    {::_pbi::TcParser::FastF64P2,
     {706, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_sfixed64_)}},
    // string optional_cord = 25 [ctype = CORD];
    {::_pbi::TcParser::FastUcS2,
     {458, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_cord_)}},
    // .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
    {::_pbi::TcParser::FastMtS2,
     {466, 3, 3, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_public_import_message_)}},
    // .proto3_lite_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
    {::_pbi::TcParser::FastMtS2,
     {474, 4, 4, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_lazy_message_)}},
    // repeated string repeated_string = 44;
    {::_pbi::TcParser::FastUR2,
     {738, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_string_)}},
    // repeated bytes repeated_bytes = 45;
    {::_pbi::TcParser::FastBR2,
     {746, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_bytes_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated int32 repeated_int32 = 31;
    {::_pbi::TcParser::FastV32P2,
     {506, 63, 0, PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_int32_)}},
  }}, {{
    33, 0, 6,
    24576, 26, 65168, 40, 65535, 47, 65535, 47, 16383, 47, 65532, 49,
    65535, 65535
  }}, {{
    // int32 optional_int32 = 1;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_int32_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 optional_int64 = 2;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_int64_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // uint32 optional_uint32 = 3;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_uint32_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint64 optional_uint64 = 4;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_uint64_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // sint32 optional_sint32 = 5;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_sint32_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint64 optional_sint64 = 6;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_sint64_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt64)},
    // fixed32 optional_fixed32 = 7;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_fixed32_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // fixed64 optional_fixed64 = 8;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_fixed64_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // sfixed32 optional_sfixed32 = 9;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_sfixed32_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSFixed32)},
    // sfixed64 optional_sfixed64 = 10;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_sfixed64_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSFixed64)},
    // float optional_float = 11;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_float_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // double optional_double = 12;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_double_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool optional_bool = 13;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_bool_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string optional_string = 14;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_string_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes optional_bytes = 15;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_bytes_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .proto3_lite_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_nested_message_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .proto3_lite_unittest.ForeignMessage optional_foreign_message = 19;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_foreign_message_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf_unittest_import.ImportMessage optional_import_message = 20;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_import_message_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .proto3_lite_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_nested_enum_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .proto3_lite_unittest.ForeignEnum optional_foreign_enum = 22;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_foreign_enum_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string optional_string_piece = 24 [ctype = STRING_PIECE];
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_string_piece_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string optional_cord = 25 [ctype = CORD];
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_cord_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_public_import_message_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .proto3_lite_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_lazy_message_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated int32 repeated_int32 = 31;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_int32_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int64 repeated_int64 = 32;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_int64_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // repeated uint32 repeated_uint32 = 33;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_uint32_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated uint64 repeated_uint64 = 34;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_uint64_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt64)},
    // repeated sint32 repeated_sint32 = 35;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_sint32_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSInt32)},
    // repeated sint64 repeated_sint64 = 36;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_sint64_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSInt64)},
    // repeated fixed32 repeated_fixed32 = 37;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_fixed32_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFixed32)},
    // repeated fixed64 repeated_fixed64 = 38;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_fixed64_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFixed64)},
    // repeated sfixed32 repeated_sfixed32 = 39;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_sfixed32_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSFixed32)},
    // repeated sfixed64 repeated_sfixed64 = 40;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_sfixed64_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSFixed64)},
    // repeated float repeated_float = 41;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_float_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated double repeated_double = 42;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_double_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated bool repeated_bool = 43;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_bool_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
    // repeated string repeated_string = 44;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_string_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated bytes repeated_bytes = 45;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_bytes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // repeated .proto3_lite_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_nested_message_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .proto3_lite_unittest.ForeignMessage repeated_foreign_message = 49;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_foreign_message_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_import_message_), -1, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .proto3_lite_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_nested_enum_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // repeated .proto3_lite_unittest.ForeignEnum repeated_foreign_enum = 52;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_foreign_enum_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_string_piece_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string repeated_cord = 55 [ctype = CORD];
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_cord_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated .proto3_lite_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.repeated_lazy_message_), -1, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 oneof_uint32 = 111;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.oneof_field_.oneof_uint32_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUInt32)},
    // .proto3_lite_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.oneof_field_.oneof_nested_message_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // string oneof_string = 113;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.oneof_field_.oneof_string_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes oneof_bytes = 114;
    {PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.oneof_field_.oneof_bytes_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::proto3_lite_unittest::TestAllTypes_NestedMessage>()},
    {::_pbi::TcParser::GetTable<::proto3_lite_unittest::ForeignMessage>()},
    {::_pbi::TcParser::GetTable<::protobuf_unittest_import::ImportMessage>()},
    {::_pbi::TcParser::GetTable<::protobuf_unittest_import::PublicImportMessage>()},
    {::_pbi::TcParser::GetTable<::proto3_lite_unittest::TestAllTypes_NestedMessage>()},
    {::_pbi::TcParser::GetTable<::proto3_lite_unittest::TestAllTypes_NestedMessage>()},
    {::_pbi::TcParser::GetTable<::proto3_lite_unittest::ForeignMessage>()},
    {::_pbi::TcParser::GetTable<::protobuf_unittest_import::ImportMessage>()},
    {::_pbi::TcParser::GetTable<::proto3_lite_unittest::TestAllTypes_NestedMessage>()},
    {::_pbi::TcParser::GetTable<::proto3_lite_unittest::TestAllTypes_NestedMessage>()},
  }}, {{
    "\41\0\0\0\0\0\0\0\0\0\0\0\0\0\17\0\0\0\0\0\0\25\15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\17\0\0\0\0\0\0\25\15\0\0\0\14\0\0\0\0\0"
    "proto3_lite_unittest.TestAllTypes"
    "optional_string"
    "optional_string_piece"
    "optional_cord"
    "repeated_string"
    "repeated_string_piece"
    "repeated_cord"
    "oneof_string"
  }},
};

PROTOBUF_NOINLINE void TestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_lite_unittest.TestAllTypes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.repeated_int32_.Clear();
  _impl_.repeated_int64_.Clear();
  _impl_.repeated_uint32_.Clear();
  _impl_.repeated_uint64_.Clear();
  _impl_.repeated_sint32_.Clear();
  _impl_.repeated_sint64_.Clear();
  _impl_.repeated_fixed32_.Clear();
  _impl_.repeated_fixed64_.Clear();
  _impl_.repeated_sfixed32_.Clear();
  _impl_.repeated_sfixed64_.Clear();
  _impl_.repeated_float_.Clear();
  _impl_.repeated_double_.Clear();
  _impl_.repeated_bool_.Clear();
  _impl_.repeated_string_.Clear();
  _impl_.repeated_bytes_.Clear();
  _impl_.repeated_nested_message_.Clear();
  _impl_.repeated_foreign_message_.Clear();
  _impl_.repeated_import_message_.Clear();
  _impl_.repeated_nested_enum_.Clear();
  _impl_.repeated_foreign_enum_.Clear();
  _impl_.repeated_string_piece_.Clear();
  _impl_.repeated_cord_.Clear();
  _impl_.repeated_lazy_message_.Clear();
  _impl_.optional_string_.ClearToEmpty();
  _impl_.optional_bytes_.ClearToEmpty();
  _impl_.optional_string_piece_.ClearToEmpty();
  _impl_.optional_cord_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.optional_nested_message_ != nullptr);
      _impl_.optional_nested_message_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.optional_foreign_message_ != nullptr);
      _impl_.optional_foreign_message_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.optional_import_message_ != nullptr);
      _impl_.optional_import_message_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.optional_public_import_message_ != nullptr);
      _impl_.optional_public_import_message_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.optional_lazy_message_ != nullptr);
      _impl_.optional_lazy_message_->Clear();
    }
  }
  ::memset(&_impl_.optional_int64_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.optional_foreign_enum_) -
      reinterpret_cast<char*>(&_impl_.optional_int64_)) + sizeof(_impl_.optional_foreign_enum_));
  clear_oneof_field();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestAllTypes::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestAllTypes& this_ = static_cast<const TestAllTypes&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestAllTypes::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestAllTypes& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:proto3_lite_unittest.TestAllTypes)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 optional_int32 = 1;
          if (this_._internal_optional_int32() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_optional_int32(), target);
          }

          // int64 optional_int64 = 2;
          if (this_._internal_optional_int64() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_optional_int64(), target);
          }

          // uint32 optional_uint32 = 3;
          if (this_._internal_optional_uint32() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_optional_uint32(), target);
          }

          // uint64 optional_uint64 = 4;
          if (this_._internal_optional_uint64() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_optional_uint64(), target);
          }

          // sint32 optional_sint32 = 5;
          if (this_._internal_optional_sint32() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                5, this_._internal_optional_sint32(), target);
          }

          // sint64 optional_sint64 = 6;
          if (this_._internal_optional_sint64() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                6, this_._internal_optional_sint64(), target);
          }

          // fixed32 optional_fixed32 = 7;
          if (this_._internal_optional_fixed32() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                7, this_._internal_optional_fixed32(), target);
          }

          // fixed64 optional_fixed64 = 8;
          if (this_._internal_optional_fixed64() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                8, this_._internal_optional_fixed64(), target);
          }

          // sfixed32 optional_sfixed32 = 9;
          if (this_._internal_optional_sfixed32() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(
                9, this_._internal_optional_sfixed32(), target);
          }

          // sfixed64 optional_sfixed64 = 10;
          if (this_._internal_optional_sfixed64() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
                10, this_._internal_optional_sfixed64(), target);
          }

          // float optional_float = 11;
          if (::absl::bit_cast<::uint32_t>(this_._internal_optional_float()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                11, this_._internal_optional_float(), target);
          }

          // double optional_double = 12;
          if (::absl::bit_cast<::uint64_t>(this_._internal_optional_double()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                12, this_._internal_optional_double(), target);
          }

          // bool optional_bool = 13;
          if (this_._internal_optional_bool() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_optional_bool(), target);
          }

          // string optional_string = 14;
          if (!this_._internal_optional_string().empty()) {
            const std::string& _s = this_._internal_optional_string();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "proto3_lite_unittest.TestAllTypes.optional_string");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // bytes optional_bytes = 15;
          if (!this_._internal_optional_bytes().empty()) {
            const std::string& _s = this_._internal_optional_bytes();
            target = stream->WriteBytesMaybeAliased(15, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .proto3_lite_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                18, *this_._impl_.optional_nested_message_, this_._impl_.optional_nested_message_->GetCachedSize(), target,
                stream);
          }

          // .proto3_lite_unittest.ForeignMessage optional_foreign_message = 19;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                19, *this_._impl_.optional_foreign_message_, this_._impl_.optional_foreign_message_->GetCachedSize(), target,
                stream);
          }

          // .protobuf_unittest_import.ImportMessage optional_import_message = 20;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                20, *this_._impl_.optional_import_message_, this_._impl_.optional_import_message_->GetCachedSize(), target,
                stream);
          }

          // .proto3_lite_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
          if (this_._internal_optional_nested_enum() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                21, this_._internal_optional_nested_enum(), target);
          }

          // .proto3_lite_unittest.ForeignEnum optional_foreign_enum = 22;
          if (this_._internal_optional_foreign_enum() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                22, this_._internal_optional_foreign_enum(), target);
          }

          // string optional_string_piece = 24 [ctype = STRING_PIECE];
          if (!this_._internal_optional_string_piece().empty()) {
            const std::string& _s = this_._internal_optional_string_piece();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "proto3_lite_unittest.TestAllTypes.optional_string_piece");
            target = stream->WriteStringMaybeAliased(24, _s, target);
          }

          // string optional_cord = 25 [ctype = CORD];
          if (!this_._internal_optional_cord().empty()) {
            const std::string& _s = this_._internal_optional_cord();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "proto3_lite_unittest.TestAllTypes.optional_cord");
            target = stream->WriteStringMaybeAliased(25, _s, target);
          }

          // .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                26, *this_._impl_.optional_public_import_message_, this_._impl_.optional_public_import_message_->GetCachedSize(), target,
                stream);
          }

          // .proto3_lite_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                27, *this_._impl_.optional_lazy_message_, this_._impl_.optional_lazy_message_->GetCachedSize(), target,
                stream);
          }

          // repeated int32 repeated_int32 = 31;
          {
            int byte_size = this_._impl_._repeated_int32_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt32Packed(
                  31, this_._internal_repeated_int32(), byte_size, target);
            }
          }

          // repeated int64 repeated_int64 = 32;
          {
            int byte_size = this_._impl_._repeated_int64_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt64Packed(
                  32, this_._internal_repeated_int64(), byte_size, target);
            }
          }

          // repeated uint32 repeated_uint32 = 33;
          {
            int byte_size = this_._impl_._repeated_uint32_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  33, this_._internal_repeated_uint32(), byte_size, target);
            }
          }

          // repeated uint64 repeated_uint64 = 34;
          {
            int byte_size = this_._impl_._repeated_uint64_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt64Packed(
                  34, this_._internal_repeated_uint64(), byte_size, target);
            }
          }

          // repeated sint32 repeated_sint32 = 35;
          {
            int byte_size = this_._impl_._repeated_sint32_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteSInt32Packed(
                  35, this_._internal_repeated_sint32(), byte_size, target);
            }
          }

          // repeated sint64 repeated_sint64 = 36;
          {
            int byte_size = this_._impl_._repeated_sint64_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteSInt64Packed(
                  36, this_._internal_repeated_sint64(), byte_size, target);
            }
          }

          // repeated fixed32 repeated_fixed32 = 37;
          if (this_._internal_repeated_fixed32_size() > 0) {
            target = stream->WriteFixedPacked(37, this_._internal_repeated_fixed32(), target);
          }

          // repeated fixed64 repeated_fixed64 = 38;
          if (this_._internal_repeated_fixed64_size() > 0) {
            target = stream->WriteFixedPacked(38, this_._internal_repeated_fixed64(), target);
          }

          // repeated sfixed32 repeated_sfixed32 = 39;
          if (this_._internal_repeated_sfixed32_size() > 0) {
            target = stream->WriteFixedPacked(39, this_._internal_repeated_sfixed32(), target);
          }

          // repeated sfixed64 repeated_sfixed64 = 40;
          if (this_._internal_repeated_sfixed64_size() > 0) {
            target = stream->WriteFixedPacked(40, this_._internal_repeated_sfixed64(), target);
          }

          // repeated float repeated_float = 41;
          if (this_._internal_repeated_float_size() > 0) {
            target = stream->WriteFixedPacked(41, this_._internal_repeated_float(), target);
          }

          // repeated double repeated_double = 42;
          if (this_._internal_repeated_double_size() > 0) {
            target = stream->WriteFixedPacked(42, this_._internal_repeated_double(), target);
          }

          // repeated bool repeated_bool = 43;
          if (this_._internal_repeated_bool_size() > 0) {
            target = stream->WriteFixedPacked(43, this_._internal_repeated_bool(), target);
          }

          // repeated string repeated_string = 44;
          for (int i = 0, n = this_._internal_repeated_string_size(); i < n; ++i) {
            const auto& s = this_._internal_repeated_string().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "proto3_lite_unittest.TestAllTypes.repeated_string");
            target = stream->WriteString(44, s, target);
          }

          // repeated bytes repeated_bytes = 45;
          for (int i = 0, n = this_._internal_repeated_bytes_size(); i < n; ++i) {
            const auto& s = this_._internal_repeated_bytes().Get(i);
            target = stream->WriteBytes(45, s, target);
          }

          // repeated .proto3_lite_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_repeated_nested_message_size());
               i < n; i++) {
            const auto& repfield = this_._internal_repeated_nested_message().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    48, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .proto3_lite_unittest.ForeignMessage repeated_foreign_message = 49;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_repeated_foreign_message_size());
               i < n; i++) {
            const auto& repfield = this_._internal_repeated_foreign_message().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    49, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_repeated_import_message_size());
               i < n; i++) {
            const auto& repfield = this_._internal_repeated_import_message().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    50, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .proto3_lite_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
          {
            std::size_t byte_size =
                                              this_._impl_._repeated_nested_enum_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  51, this_._internal_repeated_nested_enum(), byte_size, target);
            }
          }

          // repeated .proto3_lite_unittest.ForeignEnum repeated_foreign_enum = 52;
          {
            std::size_t byte_size =
                                              this_._impl_._repeated_foreign_enum_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  52, this_._internal_repeated_foreign_enum(), byte_size, target);
            }
          }

          // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
          for (int i = 0, n = this_._internal_repeated_string_piece_size(); i < n; ++i) {
            const auto& s = this_._internal_repeated_string_piece().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "proto3_lite_unittest.TestAllTypes.repeated_string_piece");
            target = stream->WriteString(54, s, target);
          }

          // repeated string repeated_cord = 55 [ctype = CORD];
          for (int i = 0, n = this_._internal_repeated_cord_size(); i < n; ++i) {
            const auto& s = this_._internal_repeated_cord().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "proto3_lite_unittest.TestAllTypes.repeated_cord");
            target = stream->WriteString(55, s, target);
          }

          // repeated .proto3_lite_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_repeated_lazy_message_size());
               i < n; i++) {
            const auto& repfield = this_._internal_repeated_lazy_message().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    57, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          switch (this_.oneof_field_case()) {
            case kOneofUint32: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                  111, this_._internal_oneof_uint32(), target);
              break;
            }
            case kOneofNestedMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  112, *this_._impl_.oneof_field_.oneof_nested_message_, this_._impl_.oneof_field_.oneof_nested_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kOneofString: {
              const std::string& _s = this_._internal_oneof_string();
              ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                  _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "proto3_lite_unittest.TestAllTypes.oneof_string");
              target = stream->WriteStringMaybeAliased(113, _s, target);
              break;
            }
            case kOneofBytes: {
              const std::string& _s = this_._internal_oneof_bytes();
              target = stream->WriteBytesMaybeAliased(114, _s, target);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:proto3_lite_unittest.TestAllTypes)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestAllTypes::ByteSizeLong(const MessageLite& base) {
          const TestAllTypes& this_ = static_cast<const TestAllTypes&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestAllTypes::ByteSizeLong() const {
          const TestAllTypes& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:proto3_lite_unittest.TestAllTypes)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated int32 repeated_int32 = 31;
             {
              total_size +=
                  ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
                      this_._internal_repeated_int32(), 2,
                      this_._impl_._repeated_int32_cached_byte_size_);
            }
            // repeated int64 repeated_int64 = 32;
             {
              total_size +=
                  ::_pbi::WireFormatLite::Int64SizeWithPackedTagSize(
                      this_._internal_repeated_int64(), 2,
                      this_._impl_._repeated_int64_cached_byte_size_);
            }
            // repeated uint32 repeated_uint32 = 33;
             {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_repeated_uint32(), 2,
                      this_._impl_._repeated_uint32_cached_byte_size_);
            }
            // repeated uint64 repeated_uint64 = 34;
             {
              total_size +=
                  ::_pbi::WireFormatLite::UInt64SizeWithPackedTagSize(
                      this_._internal_repeated_uint64(), 2,
                      this_._impl_._repeated_uint64_cached_byte_size_);
            }
            // repeated sint32 repeated_sint32 = 35;
             {
              total_size +=
                  ::_pbi::WireFormatLite::SInt32SizeWithPackedTagSize(
                      this_._internal_repeated_sint32(), 2,
                      this_._impl_._repeated_sint32_cached_byte_size_);
            }
            // repeated sint64 repeated_sint64 = 36;
             {
              total_size +=
                  ::_pbi::WireFormatLite::SInt64SizeWithPackedTagSize(
                      this_._internal_repeated_sint64(), 2,
                      this_._impl_._repeated_sint64_cached_byte_size_);
            }
            // repeated fixed32 repeated_fixed32 = 37;
             {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_repeated_fixed32_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated fixed64 repeated_fixed64 = 38;
             {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_repeated_fixed64_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated sfixed32 repeated_sfixed32 = 39;
             {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_repeated_sfixed32_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated sfixed64 repeated_sfixed64 = 40;
             {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_repeated_sfixed64_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated float repeated_float = 41;
             {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_repeated_float_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double repeated_double = 42;
             {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_repeated_double_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated bool repeated_bool = 43;
             {
              std::size_t data_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_bool_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated string repeated_string = 44;
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_repeated_string().size());
              for (int i = 0, n = this_._internal_repeated_string().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_repeated_string().Get(i));
              }
            }
            // repeated bytes repeated_bytes = 45;
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_repeated_bytes().size());
              for (int i = 0, n = this_._internal_repeated_bytes().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
                    this_._internal_repeated_bytes().Get(i));
              }
            }
            // repeated .proto3_lite_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
             {
              total_size += 2UL * this_._internal_repeated_nested_message_size();
              for (const auto& msg : this_._internal_repeated_nested_message()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .proto3_lite_unittest.ForeignMessage repeated_foreign_message = 49;
             {
              total_size += 2UL * this_._internal_repeated_foreign_message_size();
              for (const auto& msg : this_._internal_repeated_foreign_message()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
             {
              total_size += 2UL * this_._internal_repeated_import_message_size();
              for (const auto& msg : this_._internal_repeated_import_message()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .proto3_lite_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
             {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_repeated_nested_enum(), 2, this_._impl_._repeated_nested_enum_cached_byte_size_);
            }
            // repeated .proto3_lite_unittest.ForeignEnum repeated_foreign_enum = 52;
             {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_repeated_foreign_enum(), 2, this_._impl_._repeated_foreign_enum_cached_byte_size_);
            }
            // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_repeated_string_piece().size());
              for (int i = 0, n = this_._internal_repeated_string_piece().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_repeated_string_piece().Get(i));
              }
            }
            // repeated string repeated_cord = 55 [ctype = CORD];
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_repeated_cord().size());
              for (int i = 0, n = this_._internal_repeated_cord().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_repeated_cord().Get(i));
              }
            }
            // repeated .proto3_lite_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57;
             {
              total_size += 2UL * this_._internal_repeated_lazy_message_size();
              for (const auto& msg : this_._internal_repeated_lazy_message()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string optional_string = 14;
            if (!this_._internal_optional_string().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_optional_string());
            }
            // bytes optional_bytes = 15;
            if (!this_._internal_optional_bytes().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_optional_bytes());
            }
            // string optional_string_piece = 24 [ctype = STRING_PIECE];
            if (!this_._internal_optional_string_piece().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_optional_string_piece());
            }
            // string optional_cord = 25 [ctype = CORD];
            if (!this_._internal_optional_cord().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_optional_cord());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // .proto3_lite_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.optional_nested_message_);
            }
            // .proto3_lite_unittest.ForeignMessage optional_foreign_message = 19;
            if (cached_has_bits & 0x00000002u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.optional_foreign_message_);
            }
            // .protobuf_unittest_import.ImportMessage optional_import_message = 20;
            if (cached_has_bits & 0x00000004u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.optional_import_message_);
            }
            // .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
            if (cached_has_bits & 0x00000008u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.optional_public_import_message_);
            }
            // .proto3_lite_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
            if (cached_has_bits & 0x00000010u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.optional_lazy_message_);
            }
          }
           {
            // int64 optional_int64 = 2;
            if (this_._internal_optional_int64() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_optional_int64());
            }
            // int32 optional_int32 = 1;
            if (this_._internal_optional_int32() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_optional_int32());
            }
            // uint32 optional_uint32 = 3;
            if (this_._internal_optional_uint32() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_optional_uint32());
            }
            // uint64 optional_uint64 = 4;
            if (this_._internal_optional_uint64() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_optional_uint64());
            }
            // sint64 optional_sint64 = 6;
            if (this_._internal_optional_sint64() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_optional_sint64());
            }
            // sint32 optional_sint32 = 5;
            if (this_._internal_optional_sint32() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_optional_sint32());
            }
            // fixed32 optional_fixed32 = 7;
            if (this_._internal_optional_fixed32() != 0) {
              total_size += 5;
            }
            // fixed64 optional_fixed64 = 8;
            if (this_._internal_optional_fixed64() != 0) {
              total_size += 9;
            }
            // sfixed64 optional_sfixed64 = 10;
            if (this_._internal_optional_sfixed64() != 0) {
              total_size += 9;
            }
            // sfixed32 optional_sfixed32 = 9;
            if (this_._internal_optional_sfixed32() != 0) {
              total_size += 5;
            }
            // float optional_float = 11;
            if (::absl::bit_cast<::uint32_t>(this_._internal_optional_float()) != 0) {
              total_size += 5;
            }
            // double optional_double = 12;
            if (::absl::bit_cast<::uint64_t>(this_._internal_optional_double()) != 0) {
              total_size += 9;
            }
            // bool optional_bool = 13;
            if (this_._internal_optional_bool() != 0) {
              total_size += 2;
            }
            // .proto3_lite_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
            if (this_._internal_optional_nested_enum() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_optional_nested_enum());
            }
            // .proto3_lite_unittest.ForeignEnum optional_foreign_enum = 22;
            if (this_._internal_optional_foreign_enum() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_optional_foreign_enum());
            }
          }
          switch (this_.oneof_field_case()) {
            // uint32 oneof_uint32 = 111;
            case kOneofUint32: {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_oneof_uint32());
              break;
            }
            // .proto3_lite_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
            case kOneofNestedMessage: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.oneof_field_.oneof_nested_message_);
              break;
            }
            // string oneof_string = 113;
            case kOneofString: {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_oneof_string());
              break;
            }
            // bytes oneof_bytes = 114;
            case kOneofBytes: {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_oneof_bytes());
              break;
            }
            case ONEOF_FIELD_NOT_SET: {
              break;
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TestAllTypes::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestAllTypes*>(&to_msg);
  auto& from = static_cast<const TestAllTypes&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:proto3_lite_unittest.TestAllTypes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_repeated_int32()->MergeFrom(from._internal_repeated_int32());
  _this->_internal_mutable_repeated_int64()->MergeFrom(from._internal_repeated_int64());
  _this->_internal_mutable_repeated_uint32()->MergeFrom(from._internal_repeated_uint32());
  _this->_internal_mutable_repeated_uint64()->MergeFrom(from._internal_repeated_uint64());
  _this->_internal_mutable_repeated_sint32()->MergeFrom(from._internal_repeated_sint32());
  _this->_internal_mutable_repeated_sint64()->MergeFrom(from._internal_repeated_sint64());
  _this->_internal_mutable_repeated_fixed32()->MergeFrom(from._internal_repeated_fixed32());
  _this->_internal_mutable_repeated_fixed64()->MergeFrom(from._internal_repeated_fixed64());
  _this->_internal_mutable_repeated_sfixed32()->MergeFrom(from._internal_repeated_sfixed32());
  _this->_internal_mutable_repeated_sfixed64()->MergeFrom(from._internal_repeated_sfixed64());
  _this->_internal_mutable_repeated_float()->MergeFrom(from._internal_repeated_float());
  _this->_internal_mutable_repeated_double()->MergeFrom(from._internal_repeated_double());
  _this->_internal_mutable_repeated_bool()->MergeFrom(from._internal_repeated_bool());
  _this->_internal_mutable_repeated_string()->MergeFrom(from._internal_repeated_string());
  _this->_internal_mutable_repeated_bytes()->MergeFrom(from._internal_repeated_bytes());
  _this->_internal_mutable_repeated_nested_message()->MergeFrom(
      from._internal_repeated_nested_message());
  _this->_internal_mutable_repeated_foreign_message()->MergeFrom(
      from._internal_repeated_foreign_message());
  _this->_internal_mutable_repeated_import_message()->MergeFrom(
      from._internal_repeated_import_message());
  _this->_internal_mutable_repeated_nested_enum()->MergeFrom(from._internal_repeated_nested_enum());
  _this->_internal_mutable_repeated_foreign_enum()->MergeFrom(from._internal_repeated_foreign_enum());
  _this->_internal_mutable_repeated_string_piece()->MergeFrom(from._internal_repeated_string_piece());
  _this->_internal_mutable_repeated_cord()->MergeFrom(from._internal_repeated_cord());
  _this->_internal_mutable_repeated_lazy_message()->MergeFrom(
      from._internal_repeated_lazy_message());
  if (!from._internal_optional_string().empty()) {
    _this->_internal_set_optional_string(from._internal_optional_string());
  }
  if (!from._internal_optional_bytes().empty()) {
    _this->_internal_set_optional_bytes(from._internal_optional_bytes());
  }
  if (!from._internal_optional_string_piece().empty()) {
    _this->_internal_set_optional_string_piece(from._internal_optional_string_piece());
  }
  if (!from._internal_optional_cord().empty()) {
    _this->_internal_set_optional_cord(from._internal_optional_cord());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.optional_nested_message_ != nullptr);
      if (_this->_impl_.optional_nested_message_ == nullptr) {
        _this->_impl_.optional_nested_message_ =
            ::google::protobuf::MessageLite::CopyConstruct<::proto3_lite_unittest::TestAllTypes_NestedMessage>(arena, *from._impl_.optional_nested_message_);
      } else {
        _this->_impl_.optional_nested_message_->MergeFrom(*from._impl_.optional_nested_message_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.optional_foreign_message_ != nullptr);
      if (_this->_impl_.optional_foreign_message_ == nullptr) {
        _this->_impl_.optional_foreign_message_ =
            ::google::protobuf::MessageLite::CopyConstruct<::proto3_lite_unittest::ForeignMessage>(arena, *from._impl_.optional_foreign_message_);
      } else {
        _this->_impl_.optional_foreign_message_->MergeFrom(*from._impl_.optional_foreign_message_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.optional_import_message_ != nullptr);
      if (_this->_impl_.optional_import_message_ == nullptr) {
        _this->_impl_.optional_import_message_ =
            ::google::protobuf::MessageLite::CopyConstruct<::protobuf_unittest_import::ImportMessage>(arena, *from._impl_.optional_import_message_);
      } else {
        _this->_impl_.optional_import_message_->MergeFrom(*from._impl_.optional_import_message_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.optional_public_import_message_ != nullptr);
      if (_this->_impl_.optional_public_import_message_ == nullptr) {
        _this->_impl_.optional_public_import_message_ =
            ::google::protobuf::MessageLite::CopyConstruct<::protobuf_unittest_import::PublicImportMessage>(arena, *from._impl_.optional_public_import_message_);
      } else {
        _this->_impl_.optional_public_import_message_->MergeFrom(*from._impl_.optional_public_import_message_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.optional_lazy_message_ != nullptr);
      if (_this->_impl_.optional_lazy_message_ == nullptr) {
        _this->_impl_.optional_lazy_message_ =
            ::google::protobuf::MessageLite::CopyConstruct<::proto3_lite_unittest::TestAllTypes_NestedMessage>(arena, *from._impl_.optional_lazy_message_);
      } else {
        _this->_impl_.optional_lazy_message_->MergeFrom(*from._impl_.optional_lazy_message_);
      }
    }
  }
  if (from._internal_optional_int64() != 0) {
    _this->_impl_.optional_int64_ = from._impl_.optional_int64_;
  }
  if (from._internal_optional_int32() != 0) {
    _this->_impl_.optional_int32_ = from._impl_.optional_int32_;
  }
  if (from._internal_optional_uint32() != 0) {
    _this->_impl_.optional_uint32_ = from._impl_.optional_uint32_;
  }
  if (from._internal_optional_uint64() != 0) {
    _this->_impl_.optional_uint64_ = from._impl_.optional_uint64_;
  }
  if (from._internal_optional_sint64() != 0) {
    _this->_impl_.optional_sint64_ = from._impl_.optional_sint64_;
  }
  if (from._internal_optional_sint32() != 0) {
    _this->_impl_.optional_sint32_ = from._impl_.optional_sint32_;
  }
  if (from._internal_optional_fixed32() != 0) {
    _this->_impl_.optional_fixed32_ = from._impl_.optional_fixed32_;
  }
  if (from._internal_optional_fixed64() != 0) {
    _this->_impl_.optional_fixed64_ = from._impl_.optional_fixed64_;
  }
  if (from._internal_optional_sfixed64() != 0) {
    _this->_impl_.optional_sfixed64_ = from._impl_.optional_sfixed64_;
  }
  if (from._internal_optional_sfixed32() != 0) {
    _this->_impl_.optional_sfixed32_ = from._impl_.optional_sfixed32_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_optional_float()) != 0) {
    _this->_impl_.optional_float_ = from._impl_.optional_float_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_optional_double()) != 0) {
    _this->_impl_.optional_double_ = from._impl_.optional_double_;
  }
  if (from._internal_optional_bool() != 0) {
    _this->_impl_.optional_bool_ = from._impl_.optional_bool_;
  }
  if (from._internal_optional_nested_enum() != 0) {
    _this->_impl_.optional_nested_enum_ = from._impl_.optional_nested_enum_;
  }
  if (from._internal_optional_foreign_enum() != 0) {
    _this->_impl_.optional_foreign_enum_ = from._impl_.optional_foreign_enum_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_oneof_field();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kOneofUint32: {
        _this->_impl_.oneof_field_.oneof_uint32_ = from._impl_.oneof_field_.oneof_uint32_;
        break;
      }
      case kOneofNestedMessage: {
        if (oneof_needs_init) {
          _this->_impl_.oneof_field_.oneof_nested_message_ =
              ::google::protobuf::MessageLite::CopyConstruct<::proto3_lite_unittest::TestAllTypes_NestedMessage>(arena, *from._impl_.oneof_field_.oneof_nested_message_);
        } else {
          _this->_impl_.oneof_field_.oneof_nested_message_->MergeFrom(from._internal_oneof_nested_message());
        }
        break;
      }
      case kOneofString: {
        if (oneof_needs_init) {
          _this->_impl_.oneof_field_.oneof_string_.InitDefault();
        }
        _this->_impl_.oneof_field_.oneof_string_.Set(from._internal_oneof_string(), arena);
        break;
      }
      case kOneofBytes: {
        if (oneof_needs_init) {
          _this->_impl_.oneof_field_.oneof_bytes_.InitDefault();
        }
        _this->_impl_.oneof_field_.oneof_bytes_.Set(from._internal_oneof_bytes(), arena);
        break;
      }
      case ONEOF_FIELD_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestAllTypes::CopyFrom(const TestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_lite_unittest.TestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestAllTypes::InternalSwap(TestAllTypes* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.repeated_int32_.InternalSwap(&other->_impl_.repeated_int32_);
  _impl_.repeated_int64_.InternalSwap(&other->_impl_.repeated_int64_);
  _impl_.repeated_uint32_.InternalSwap(&other->_impl_.repeated_uint32_);
  _impl_.repeated_uint64_.InternalSwap(&other->_impl_.repeated_uint64_);
  _impl_.repeated_sint32_.InternalSwap(&other->_impl_.repeated_sint32_);
  _impl_.repeated_sint64_.InternalSwap(&other->_impl_.repeated_sint64_);
  _impl_.repeated_fixed32_.InternalSwap(&other->_impl_.repeated_fixed32_);
  _impl_.repeated_fixed64_.InternalSwap(&other->_impl_.repeated_fixed64_);
  _impl_.repeated_sfixed32_.InternalSwap(&other->_impl_.repeated_sfixed32_);
  _impl_.repeated_sfixed64_.InternalSwap(&other->_impl_.repeated_sfixed64_);
  _impl_.repeated_float_.InternalSwap(&other->_impl_.repeated_float_);
  _impl_.repeated_double_.InternalSwap(&other->_impl_.repeated_double_);
  _impl_.repeated_bool_.InternalSwap(&other->_impl_.repeated_bool_);
  _impl_.repeated_string_.InternalSwap(&other->_impl_.repeated_string_);
  _impl_.repeated_bytes_.InternalSwap(&other->_impl_.repeated_bytes_);
  _impl_.repeated_nested_message_.InternalSwap(&other->_impl_.repeated_nested_message_);
  _impl_.repeated_foreign_message_.InternalSwap(&other->_impl_.repeated_foreign_message_);
  _impl_.repeated_import_message_.InternalSwap(&other->_impl_.repeated_import_message_);
  _impl_.repeated_nested_enum_.InternalSwap(&other->_impl_.repeated_nested_enum_);
  _impl_.repeated_foreign_enum_.InternalSwap(&other->_impl_.repeated_foreign_enum_);
  _impl_.repeated_string_piece_.InternalSwap(&other->_impl_.repeated_string_piece_);
  _impl_.repeated_cord_.InternalSwap(&other->_impl_.repeated_cord_);
  _impl_.repeated_lazy_message_.InternalSwap(&other->_impl_.repeated_lazy_message_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.optional_string_, &other->_impl_.optional_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.optional_bytes_, &other->_impl_.optional_bytes_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.optional_string_piece_, &other->_impl_.optional_string_piece_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.optional_cord_, &other->_impl_.optional_cord_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_foreign_enum_)
      + sizeof(TestAllTypes::_impl_.optional_foreign_enum_)
      - PROTOBUF_FIELD_OFFSET(TestAllTypes, _impl_.optional_nested_message_)>(
          reinterpret_cast<char*>(&_impl_.optional_nested_message_),
          reinterpret_cast<char*>(&other->_impl_.optional_nested_message_));
  swap(_impl_.oneof_field_, other->_impl_.oneof_field_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

// ===================================================================

class TestPackedTypes::_Internal {
 public:
};

TestPackedTypes::TestPackedTypes(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_lite_unittest.TestPackedTypes)
}
inline PROTOBUF_NDEBUG_INLINE TestPackedTypes::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::proto3_lite_unittest::TestPackedTypes& from_msg)
      : packed_int32_{visibility, arena, from.packed_int32_},
        _packed_int32_cached_byte_size_{0},
        packed_int64_{visibility, arena, from.packed_int64_},
        _packed_int64_cached_byte_size_{0},
        packed_uint32_{visibility, arena, from.packed_uint32_},
        _packed_uint32_cached_byte_size_{0},
        packed_uint64_{visibility, arena, from.packed_uint64_},
        _packed_uint64_cached_byte_size_{0},
        packed_sint32_{visibility, arena, from.packed_sint32_},
        _packed_sint32_cached_byte_size_{0},
        packed_sint64_{visibility, arena, from.packed_sint64_},
        _packed_sint64_cached_byte_size_{0},
        packed_fixed32_{visibility, arena, from.packed_fixed32_},
        packed_fixed64_{visibility, arena, from.packed_fixed64_},
        packed_sfixed32_{visibility, arena, from.packed_sfixed32_},
        packed_sfixed64_{visibility, arena, from.packed_sfixed64_},
        packed_float_{visibility, arena, from.packed_float_},
        packed_double_{visibility, arena, from.packed_double_},
        packed_bool_{visibility, arena, from.packed_bool_},
        packed_enum_{visibility, arena, from.packed_enum_},
        _packed_enum_cached_byte_size_{0},
        _cached_size_{0} {}

TestPackedTypes::TestPackedTypes(
    ::google::protobuf::Arena* arena,
    const TestPackedTypes& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestPackedTypes* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:proto3_lite_unittest.TestPackedTypes)
}
inline PROTOBUF_NDEBUG_INLINE TestPackedTypes::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : packed_int32_{visibility, arena},
        _packed_int32_cached_byte_size_{0},
        packed_int64_{visibility, arena},
        _packed_int64_cached_byte_size_{0},
        packed_uint32_{visibility, arena},
        _packed_uint32_cached_byte_size_{0},
        packed_uint64_{visibility, arena},
        _packed_uint64_cached_byte_size_{0},
        packed_sint32_{visibility, arena},
        _packed_sint32_cached_byte_size_{0},
        packed_sint64_{visibility, arena},
        _packed_sint64_cached_byte_size_{0},
        packed_fixed32_{visibility, arena},
        packed_fixed64_{visibility, arena},
        packed_sfixed32_{visibility, arena},
        packed_sfixed64_{visibility, arena},
        packed_float_{visibility, arena},
        packed_double_{visibility, arena},
        packed_bool_{visibility, arena},
        packed_enum_{visibility, arena},
        _packed_enum_cached_byte_size_{0},
        _cached_size_{0} {}

inline void TestPackedTypes::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestPackedTypes::~TestPackedTypes() {
  // @@protoc_insertion_point(destructor:proto3_lite_unittest.TestPackedTypes)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TestPackedTypes::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<37>
    TestPackedTypes::_class_data_ = {
        {
            &_TestPackedTypes_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestPackedTypes::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<TestPackedTypes>(),
            ::google::protobuf::MessageLite::GetNewImpl<TestPackedTypes>(),
            ::google::protobuf::MessageLite::GetClearImpl<TestPackedTypes>(), &TestPackedTypes::ByteSizeLong,
                &TestPackedTypes::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_._cached_size_),
            true,
        },
        "proto3_lite_unittest.TestPackedTypes",
};
const ::google::protobuf::MessageLite::ClassData* TestPackedTypes::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 0, 0, 7> TestPackedTypes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    103, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::proto3_lite_unittest::TestPackedTypes>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated fixed32 packed_fixed32 = 96 [packed = true];
    {::_pbi::TcParser::FastF32P2,
     {1666, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_fixed32_)}},
    // repeated fixed64 packed_fixed64 = 97 [packed = true];
    {::_pbi::TcParser::FastF64P2,
     {1674, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_fixed64_)}},
    // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
    {::_pbi::TcParser::FastF32P2,
     {1682, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_sfixed32_)}},
    // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
    {::_pbi::TcParser::FastF64P2,
     {1690, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_sfixed64_)}},
    // repeated float packed_float = 100 [packed = true];
    {::_pbi::TcParser::FastF32P2,
     {1698, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_float_)}},
    // repeated double packed_double = 101 [packed = true];
    {::_pbi::TcParser::FastF64P2,
     {1706, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_double_)}},
    // repeated bool packed_bool = 102 [packed = true];
    {::_pbi::TcParser::FastV8P2,
     {1714, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_bool_)}},
    // repeated .proto3_lite_unittest.ForeignEnum packed_enum = 103 [packed = true];
    {::_pbi::TcParser::FastV32P2,
     {1722, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_enum_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated int32 packed_int32 = 90 [packed = true];
    {::_pbi::TcParser::FastV32P2,
     {1490, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_int32_)}},
    // repeated int64 packed_int64 = 91 [packed = true];
    {::_pbi::TcParser::FastV64P2,
     {1498, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_int64_)}},
    // repeated uint32 packed_uint32 = 92 [packed = true];
    {::_pbi::TcParser::FastV32P2,
     {1506, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_uint32_)}},
    // repeated uint64 packed_uint64 = 93 [packed = true];
    {::_pbi::TcParser::FastV64P2,
     {1514, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_uint64_)}},
    // repeated sint32 packed_sint32 = 94 [packed = true];
    {::_pbi::TcParser::FastZ32P2,
     {1522, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_sint32_)}},
    // repeated sint64 packed_sint64 = 95 [packed = true];
    {::_pbi::TcParser::FastZ64P2,
     {1530, 63, 0, PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_sint64_)}},
  }}, {{
    90, 0, 1,
    49152, 0,
    65535, 65535
  }}, {{
    // repeated int32 packed_int32 = 90 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_int32_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int64 packed_int64 = 91 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_int64_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // repeated uint32 packed_uint32 = 92 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_uint32_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated uint64 packed_uint64 = 93 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_uint64_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt64)},
    // repeated sint32 packed_sint32 = 94 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_sint32_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSInt32)},
    // repeated sint64 packed_sint64 = 95 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_sint64_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSInt64)},
    // repeated fixed32 packed_fixed32 = 96 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_fixed32_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFixed32)},
    // repeated fixed64 packed_fixed64 = 97 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_fixed64_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFixed64)},
    // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_sfixed32_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSFixed32)},
    // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_sfixed64_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSFixed64)},
    // repeated float packed_float = 100 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_float_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated double packed_double = 101 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_double_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated bool packed_bool = 102 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_bool_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
    // repeated .proto3_lite_unittest.ForeignEnum packed_enum = 103 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestPackedTypes, _impl_.packed_enum_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TestPackedTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_lite_unittest.TestPackedTypes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packed_int32_.Clear();
  _impl_.packed_int64_.Clear();
  _impl_.packed_uint32_.Clear();
  _impl_.packed_uint64_.Clear();
  _impl_.packed_sint32_.Clear();
  _impl_.packed_sint64_.Clear();
  _impl_.packed_fixed32_.Clear();
  _impl_.packed_fixed64_.Clear();
  _impl_.packed_sfixed32_.Clear();
  _impl_.packed_sfixed64_.Clear();
  _impl_.packed_float_.Clear();
  _impl_.packed_double_.Clear();
  _impl_.packed_bool_.Clear();
  _impl_.packed_enum_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestPackedTypes::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestPackedTypes& this_ = static_cast<const TestPackedTypes&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestPackedTypes::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestPackedTypes& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:proto3_lite_unittest.TestPackedTypes)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated int32 packed_int32 = 90 [packed = true];
          {
            int byte_size = this_._impl_._packed_int32_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt32Packed(
                  90, this_._internal_packed_int32(), byte_size, target);
            }
          }

          // repeated int64 packed_int64 = 91 [packed = true];
          {
            int byte_size = this_._impl_._packed_int64_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt64Packed(
                  91, this_._internal_packed_int64(), byte_size, target);
            }
          }

          // repeated uint32 packed_uint32 = 92 [packed = true];
          {
            int byte_size = this_._impl_._packed_uint32_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  92, this_._internal_packed_uint32(), byte_size, target);
            }
          }

          // repeated uint64 packed_uint64 = 93 [packed = true];
          {
            int byte_size = this_._impl_._packed_uint64_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt64Packed(
                  93, this_._internal_packed_uint64(), byte_size, target);
            }
          }

          // repeated sint32 packed_sint32 = 94 [packed = true];
          {
            int byte_size = this_._impl_._packed_sint32_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteSInt32Packed(
                  94, this_._internal_packed_sint32(), byte_size, target);
            }
          }

          // repeated sint64 packed_sint64 = 95 [packed = true];
          {
            int byte_size = this_._impl_._packed_sint64_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteSInt64Packed(
                  95, this_._internal_packed_sint64(), byte_size, target);
            }
          }

          // repeated fixed32 packed_fixed32 = 96 [packed = true];
          if (this_._internal_packed_fixed32_size() > 0) {
            target = stream->WriteFixedPacked(96, this_._internal_packed_fixed32(), target);
          }

          // repeated fixed64 packed_fixed64 = 97 [packed = true];
          if (this_._internal_packed_fixed64_size() > 0) {
            target = stream->WriteFixedPacked(97, this_._internal_packed_fixed64(), target);
          }

          // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
          if (this_._internal_packed_sfixed32_size() > 0) {
            target = stream->WriteFixedPacked(98, this_._internal_packed_sfixed32(), target);
          }

          // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
          if (this_._internal_packed_sfixed64_size() > 0) {
            target = stream->WriteFixedPacked(99, this_._internal_packed_sfixed64(), target);
          }

          // repeated float packed_float = 100 [packed = true];
          if (this_._internal_packed_float_size() > 0) {
            target = stream->WriteFixedPacked(100, this_._internal_packed_float(), target);
          }

          // repeated double packed_double = 101 [packed = true];
          if (this_._internal_packed_double_size() > 0) {
            target = stream->WriteFixedPacked(101, this_._internal_packed_double(), target);
          }

          // repeated bool packed_bool = 102 [packed = true];
          if (this_._internal_packed_bool_size() > 0) {
            target = stream->WriteFixedPacked(102, this_._internal_packed_bool(), target);
          }

          // repeated .proto3_lite_unittest.ForeignEnum packed_enum = 103 [packed = true];
          {
            std::size_t byte_size =
                                              this_._impl_._packed_enum_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  103, this_._internal_packed_enum(), byte_size, target);
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:proto3_lite_unittest.TestPackedTypes)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestPackedTypes::ByteSizeLong(const MessageLite& base) {
          const TestPackedTypes& this_ = static_cast<const TestPackedTypes&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestPackedTypes::ByteSizeLong() const {
          const TestPackedTypes& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:proto3_lite_unittest.TestPackedTypes)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated int32 packed_int32 = 90 [packed = true];
             {
              total_size +=
                  ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
                      this_._internal_packed_int32(), 2,
                      this_._impl_._packed_int32_cached_byte_size_);
            }
            // repeated int64 packed_int64 = 91 [packed = true];
             {
              total_size +=
                  ::_pbi::WireFormatLite::Int64SizeWithPackedTagSize(
                      this_._internal_packed_int64(), 2,
                      this_._impl_._packed_int64_cached_byte_size_);
            }
            // repeated uint32 packed_uint32 = 92 [packed = true];
             {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_packed_uint32(), 2,
                      this_._impl_._packed_uint32_cached_byte_size_);
            }
            // repeated uint64 packed_uint64 = 93 [packed = true];
             {
              total_size +=
                  ::_pbi::WireFormatLite::UInt64SizeWithPackedTagSize(
                      this_._internal_packed_uint64(), 2,
                      this_._impl_._packed_uint64_cached_byte_size_);
            }
            // repeated sint32 packed_sint32 = 94 [packed = true];
             {
              total_size +=
                  ::_pbi::WireFormatLite::SInt32SizeWithPackedTagSize(
                      this_._internal_packed_sint32(), 2,
                      this_._impl_._packed_sint32_cached_byte_size_);
            }
            // repeated sint64 packed_sint64 = 95 [packed = true];
             {
              total_size +=
                  ::_pbi::WireFormatLite::SInt64SizeWithPackedTagSize(
                      this_._internal_packed_sint64(), 2,
                      this_._impl_._packed_sint64_cached_byte_size_);
            }
            // repeated fixed32 packed_fixed32 = 96 [packed = true];
             {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_packed_fixed32_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated fixed64 packed_fixed64 = 97 [packed = true];
             {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_packed_fixed64_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
             {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_packed_sfixed32_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
             {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_packed_sfixed64_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated float packed_float = 100 [packed = true];
             {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_packed_float_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double packed_double = 101 [packed = true];
             {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_packed_double_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated bool packed_bool = 102 [packed = true];
             {
              std::size_t data_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_packed_bool_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 2 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated .proto3_lite_unittest.ForeignEnum packed_enum = 103 [packed = true];
             {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_packed_enum(), 2, this_._impl_._packed_enum_cached_byte_size_);
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TestPackedTypes::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestPackedTypes*>(&to_msg);
  auto& from = static_cast<const TestPackedTypes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto3_lite_unittest.TestPackedTypes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_packed_int32()->MergeFrom(from._internal_packed_int32());
  _this->_internal_mutable_packed_int64()->MergeFrom(from._internal_packed_int64());
  _this->_internal_mutable_packed_uint32()->MergeFrom(from._internal_packed_uint32());
  _this->_internal_mutable_packed_uint64()->MergeFrom(from._internal_packed_uint64());
  _this->_internal_mutable_packed_sint32()->MergeFrom(from._internal_packed_sint32());
  _this->_internal_mutable_packed_sint64()->MergeFrom(from._internal_packed_sint64());
  _this->_internal_mutable_packed_fixed32()->MergeFrom(from._internal_packed_fixed32());
  _this->_internal_mutable_packed_fixed64()->MergeFrom(from._internal_packed_fixed64());
  _this->_internal_mutable_packed_sfixed32()->MergeFrom(from._internal_packed_sfixed32());
  _this->_internal_mutable_packed_sfixed64()->MergeFrom(from._internal_packed_sfixed64());
  _this->_internal_mutable_packed_float()->MergeFrom(from._internal_packed_float());
  _this->_internal_mutable_packed_double()->MergeFrom(from._internal_packed_double());
  _this->_internal_mutable_packed_bool()->MergeFrom(from._internal_packed_bool());
  _this->_internal_mutable_packed_enum()->MergeFrom(from._internal_packed_enum());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestPackedTypes::CopyFrom(const TestPackedTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_lite_unittest.TestPackedTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestPackedTypes::InternalSwap(TestPackedTypes* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.packed_int32_.InternalSwap(&other->_impl_.packed_int32_);
  _impl_.packed_int64_.InternalSwap(&other->_impl_.packed_int64_);
  _impl_.packed_uint32_.InternalSwap(&other->_impl_.packed_uint32_);
  _impl_.packed_uint64_.InternalSwap(&other->_impl_.packed_uint64_);
  _impl_.packed_sint32_.InternalSwap(&other->_impl_.packed_sint32_);
  _impl_.packed_sint64_.InternalSwap(&other->_impl_.packed_sint64_);
  _impl_.packed_fixed32_.InternalSwap(&other->_impl_.packed_fixed32_);
  _impl_.packed_fixed64_.InternalSwap(&other->_impl_.packed_fixed64_);
  _impl_.packed_sfixed32_.InternalSwap(&other->_impl_.packed_sfixed32_);
  _impl_.packed_sfixed64_.InternalSwap(&other->_impl_.packed_sfixed64_);
  _impl_.packed_float_.InternalSwap(&other->_impl_.packed_float_);
  _impl_.packed_double_.InternalSwap(&other->_impl_.packed_double_);
  _impl_.packed_bool_.InternalSwap(&other->_impl_.packed_bool_);
  _impl_.packed_enum_.InternalSwap(&other->_impl_.packed_enum_);
}

// ===================================================================

class TestUnpackedTypes::_Internal {
 public:
};

TestUnpackedTypes::TestUnpackedTypes(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_lite_unittest.TestUnpackedTypes)
}
inline PROTOBUF_NDEBUG_INLINE TestUnpackedTypes::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::proto3_lite_unittest::TestUnpackedTypes& from_msg)
      : repeated_int32_{visibility, arena, from.repeated_int32_},
        repeated_int64_{visibility, arena, from.repeated_int64_},
        repeated_uint32_{visibility, arena, from.repeated_uint32_},
        repeated_uint64_{visibility, arena, from.repeated_uint64_},
        repeated_sint32_{visibility, arena, from.repeated_sint32_},
        repeated_sint64_{visibility, arena, from.repeated_sint64_},
        repeated_fixed32_{visibility, arena, from.repeated_fixed32_},
        repeated_fixed64_{visibility, arena, from.repeated_fixed64_},
        repeated_sfixed32_{visibility, arena, from.repeated_sfixed32_},
        repeated_sfixed64_{visibility, arena, from.repeated_sfixed64_},
        repeated_float_{visibility, arena, from.repeated_float_},
        repeated_double_{visibility, arena, from.repeated_double_},
        repeated_bool_{visibility, arena, from.repeated_bool_},
        repeated_nested_enum_{visibility, arena, from.repeated_nested_enum_},
        _cached_size_{0} {}

TestUnpackedTypes::TestUnpackedTypes(
    ::google::protobuf::Arena* arena,
    const TestUnpackedTypes& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestUnpackedTypes* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:proto3_lite_unittest.TestUnpackedTypes)
}
inline PROTOBUF_NDEBUG_INLINE TestUnpackedTypes::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : repeated_int32_{visibility, arena},
        repeated_int64_{visibility, arena},
        repeated_uint32_{visibility, arena},
        repeated_uint64_{visibility, arena},
        repeated_sint32_{visibility, arena},
        repeated_sint64_{visibility, arena},
        repeated_fixed32_{visibility, arena},
        repeated_fixed64_{visibility, arena},
        repeated_sfixed32_{visibility, arena},
        repeated_sfixed64_{visibility, arena},
        repeated_float_{visibility, arena},
        repeated_double_{visibility, arena},
        repeated_bool_{visibility, arena},
        repeated_nested_enum_{visibility, arena},
        _cached_size_{0} {}

inline void TestUnpackedTypes::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestUnpackedTypes::~TestUnpackedTypes() {
  // @@protoc_insertion_point(destructor:proto3_lite_unittest.TestUnpackedTypes)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TestUnpackedTypes::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<39>
    TestUnpackedTypes::_class_data_ = {
        {
            &_TestUnpackedTypes_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestUnpackedTypes::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<TestUnpackedTypes>(),
            ::google::protobuf::MessageLite::GetNewImpl<TestUnpackedTypes>(),
            ::google::protobuf::MessageLite::GetClearImpl<TestUnpackedTypes>(), &TestUnpackedTypes::ByteSizeLong,
                &TestUnpackedTypes::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_._cached_size_),
            true,
        },
        "proto3_lite_unittest.TestUnpackedTypes",
};
const ::google::protobuf::MessageLite::ClassData* TestUnpackedTypes::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 0, 0, 2> TestUnpackedTypes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::proto3_lite_unittest::TestUnpackedTypes>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated int32 repeated_int32 = 1 [packed = false];
    {::_pbi::TcParser::FastV32R1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_int32_)}},
    // repeated int64 repeated_int64 = 2 [packed = false];
    {::_pbi::TcParser::FastV64R1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_int64_)}},
    // repeated uint32 repeated_uint32 = 3 [packed = false];
    {::_pbi::TcParser::FastV32R1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_uint32_)}},
    // repeated uint64 repeated_uint64 = 4 [packed = false];
    {::_pbi::TcParser::FastV64R1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_uint64_)}},
    // repeated sint32 repeated_sint32 = 5 [packed = false];
    {::_pbi::TcParser::FastZ32R1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_sint32_)}},
    // repeated sint64 repeated_sint64 = 6 [packed = false];
    {::_pbi::TcParser::FastZ64R1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_sint64_)}},
    // repeated fixed32 repeated_fixed32 = 7 [packed = false];
    {::_pbi::TcParser::FastF32R1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_fixed32_)}},
    // repeated fixed64 repeated_fixed64 = 8 [packed = false];
    {::_pbi::TcParser::FastF64R1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_fixed64_)}},
    // repeated sfixed32 repeated_sfixed32 = 9 [packed = false];
    {::_pbi::TcParser::FastF32R1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_sfixed32_)}},
    // repeated sfixed64 repeated_sfixed64 = 10 [packed = false];
    {::_pbi::TcParser::FastF64R1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_sfixed64_)}},
    // repeated float repeated_float = 11 [packed = false];
    {::_pbi::TcParser::FastF32R1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_float_)}},
    // repeated double repeated_double = 12 [packed = false];
    {::_pbi::TcParser::FastF64R1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_double_)}},
    // repeated bool repeated_bool = 13 [packed = false];
    {::_pbi::TcParser::FastV8R1,
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_bool_)}},
    // repeated .proto3_lite_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];
    {::_pbi::TcParser::FastV32R1,
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_nested_enum_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int32 repeated_int32 = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_int32_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kInt32)},
    // repeated int64 repeated_int64 = 2 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_int64_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kInt64)},
    // repeated uint32 repeated_uint32 = 3 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_uint32_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // repeated uint64 repeated_uint64 = 4 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_uint64_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt64)},
    // repeated sint32 repeated_sint32 = 5 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_sint32_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kSInt32)},
    // repeated sint64 repeated_sint64 = 6 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_sint64_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kSInt64)},
    // repeated fixed32 repeated_fixed32 = 7 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_fixed32_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // repeated fixed64 repeated_fixed64 = 8 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_fixed64_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed64)},
    // repeated sfixed32 repeated_sfixed32 = 9 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_sfixed32_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kSFixed32)},
    // repeated sfixed64 repeated_sfixed64 = 10 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_sfixed64_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kSFixed64)},
    // repeated float repeated_float = 11 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_float_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFloat)},
    // repeated double repeated_double = 12 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_double_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kDouble)},
    // repeated bool repeated_bool = 13 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_bool_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBool)},
    // repeated .proto3_lite_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestUnpackedTypes, _impl_.repeated_nested_enum_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TestUnpackedTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_lite_unittest.TestUnpackedTypes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.repeated_int32_.Clear();
  _impl_.repeated_int64_.Clear();
  _impl_.repeated_uint32_.Clear();
  _impl_.repeated_uint64_.Clear();
  _impl_.repeated_sint32_.Clear();
  _impl_.repeated_sint64_.Clear();
  _impl_.repeated_fixed32_.Clear();
  _impl_.repeated_fixed64_.Clear();
  _impl_.repeated_sfixed32_.Clear();
  _impl_.repeated_sfixed64_.Clear();
  _impl_.repeated_float_.Clear();
  _impl_.repeated_double_.Clear();
  _impl_.repeated_bool_.Clear();
  _impl_.repeated_nested_enum_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestUnpackedTypes::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestUnpackedTypes& this_ = static_cast<const TestUnpackedTypes&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestUnpackedTypes::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestUnpackedTypes& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:proto3_lite_unittest.TestUnpackedTypes)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated int32 repeated_int32 = 1 [packed = false];
          for (int i = 0, n = this_._internal_repeated_int32_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                1, this_._internal_repeated_int32().Get(i), target);
          }

          // repeated int64 repeated_int64 = 2 [packed = false];
          for (int i = 0, n = this_._internal_repeated_int64_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                2, this_._internal_repeated_int64().Get(i), target);
          }

          // repeated uint32 repeated_uint32 = 3 [packed = false];
          for (int i = 0, n = this_._internal_repeated_uint32_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_repeated_uint32().Get(i), target);
          }

          // repeated uint64 repeated_uint64 = 4 [packed = false];
          for (int i = 0, n = this_._internal_repeated_uint64_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_repeated_uint64().Get(i), target);
          }

          // repeated sint32 repeated_sint32 = 5 [packed = false];
          for (int i = 0, n = this_._internal_repeated_sint32_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                5, this_._internal_repeated_sint32().Get(i), target);
          }

          // repeated sint64 repeated_sint64 = 6 [packed = false];
          for (int i = 0, n = this_._internal_repeated_sint64_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                6, this_._internal_repeated_sint64().Get(i), target);
          }

          // repeated fixed32 repeated_fixed32 = 7 [packed = false];
          for (int i = 0, n = this_._internal_repeated_fixed32_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                7, this_._internal_repeated_fixed32().Get(i), target);
          }

          // repeated fixed64 repeated_fixed64 = 8 [packed = false];
          for (int i = 0, n = this_._internal_repeated_fixed64_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                8, this_._internal_repeated_fixed64().Get(i), target);
          }

          // repeated sfixed32 repeated_sfixed32 = 9 [packed = false];
          for (int i = 0, n = this_._internal_repeated_sfixed32_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(
                9, this_._internal_repeated_sfixed32().Get(i), target);
          }

          // repeated sfixed64 repeated_sfixed64 = 10 [packed = false];
          for (int i = 0, n = this_._internal_repeated_sfixed64_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
                10, this_._internal_repeated_sfixed64().Get(i), target);
          }

          // repeated float repeated_float = 11 [packed = false];
          for (int i = 0, n = this_._internal_repeated_float_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                11, this_._internal_repeated_float().Get(i), target);
          }

          // repeated double repeated_double = 12 [packed = false];
          for (int i = 0, n = this_._internal_repeated_double_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                12, this_._internal_repeated_double().Get(i), target);
          }

          // repeated bool repeated_bool = 13 [packed = false];
          for (int i = 0, n = this_._internal_repeated_bool_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_repeated_bool().Get(i), target);
          }

          // repeated .proto3_lite_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];
          for (int i = 0, n = this_._internal_repeated_nested_enum_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                14, static_cast<::proto3_lite_unittest::TestAllTypes_NestedEnum>(this_._internal_repeated_nested_enum().Get(i)),
                target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:proto3_lite_unittest.TestUnpackedTypes)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestUnpackedTypes::ByteSizeLong(const MessageLite& base) {
          const TestUnpackedTypes& this_ = static_cast<const TestUnpackedTypes&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestUnpackedTypes::ByteSizeLong() const {
          const TestUnpackedTypes& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:proto3_lite_unittest.TestUnpackedTypes)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated int32 repeated_int32 = 1 [packed = false];
             {
              std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
                  this_._internal_repeated_int32());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_int32_size());
              total_size += tag_size + data_size;
            }
            // repeated int64 repeated_int64 = 2 [packed = false];
             {
              std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
                  this_._internal_repeated_int64());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_int64_size());
              total_size += tag_size + data_size;
            }
            // repeated uint32 repeated_uint32 = 3 [packed = false];
             {
              std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
                  this_._internal_repeated_uint32());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_uint32_size());
              total_size += tag_size + data_size;
            }
            // repeated uint64 repeated_uint64 = 4 [packed = false];
             {
              std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
                  this_._internal_repeated_uint64());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_uint64_size());
              total_size += tag_size + data_size;
            }
            // repeated sint32 repeated_sint32 = 5 [packed = false];
             {
              std::size_t data_size = ::_pbi::WireFormatLite::SInt32Size(
                  this_._internal_repeated_sint32());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_sint32_size());
              total_size += tag_size + data_size;
            }
            // repeated sint64 repeated_sint64 = 6 [packed = false];
             {
              std::size_t data_size = ::_pbi::WireFormatLite::SInt64Size(
                  this_._internal_repeated_sint64());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_sint64_size());
              total_size += tag_size + data_size;
            }
            // repeated fixed32 repeated_fixed32 = 7 [packed = false];
             {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_repeated_fixed32_size());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_fixed32_size());
              total_size += tag_size + data_size;
            }
            // repeated fixed64 repeated_fixed64 = 8 [packed = false];
             {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_repeated_fixed64_size());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_fixed64_size());
              total_size += tag_size + data_size;
            }
            // repeated sfixed32 repeated_sfixed32 = 9 [packed = false];
             {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_repeated_sfixed32_size());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_sfixed32_size());
              total_size += tag_size + data_size;
            }
            // repeated sfixed64 repeated_sfixed64 = 10 [packed = false];
             {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_repeated_sfixed64_size());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_sfixed64_size());
              total_size += tag_size + data_size;
            }
            // repeated float repeated_float = 11 [packed = false];
             {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_repeated_float_size());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_float_size());
              total_size += tag_size + data_size;
            }
            // repeated double repeated_double = 12 [packed = false];
             {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_repeated_double_size());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_double_size());
              total_size += tag_size + data_size;
            }
            // repeated bool repeated_bool = 13 [packed = false];
             {
              std::size_t data_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_bool_size());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_bool_size());
              total_size += tag_size + data_size;
            }
            // repeated .proto3_lite_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];
             {
              std::size_t data_size =
                  ::_pbi::WireFormatLite::EnumSize(this_._internal_repeated_nested_enum());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_repeated_nested_enum_size());
              total_size += data_size + tag_size;
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TestUnpackedTypes::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestUnpackedTypes*>(&to_msg);
  auto& from = static_cast<const TestUnpackedTypes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto3_lite_unittest.TestUnpackedTypes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_repeated_int32()->MergeFrom(from._internal_repeated_int32());
  _this->_internal_mutable_repeated_int64()->MergeFrom(from._internal_repeated_int64());
  _this->_internal_mutable_repeated_uint32()->MergeFrom(from._internal_repeated_uint32());
  _this->_internal_mutable_repeated_uint64()->MergeFrom(from._internal_repeated_uint64());
  _this->_internal_mutable_repeated_sint32()->MergeFrom(from._internal_repeated_sint32());
  _this->_internal_mutable_repeated_sint64()->MergeFrom(from._internal_repeated_sint64());
  _this->_internal_mutable_repeated_fixed32()->MergeFrom(from._internal_repeated_fixed32());
  _this->_internal_mutable_repeated_fixed64()->MergeFrom(from._internal_repeated_fixed64());
  _this->_internal_mutable_repeated_sfixed32()->MergeFrom(from._internal_repeated_sfixed32());
  _this->_internal_mutable_repeated_sfixed64()->MergeFrom(from._internal_repeated_sfixed64());
  _this->_internal_mutable_repeated_float()->MergeFrom(from._internal_repeated_float());
  _this->_internal_mutable_repeated_double()->MergeFrom(from._internal_repeated_double());
  _this->_internal_mutable_repeated_bool()->MergeFrom(from._internal_repeated_bool());
  _this->_internal_mutable_repeated_nested_enum()->MergeFrom(from._internal_repeated_nested_enum());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestUnpackedTypes::CopyFrom(const TestUnpackedTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_lite_unittest.TestUnpackedTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestUnpackedTypes::InternalSwap(TestUnpackedTypes* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.repeated_int32_.InternalSwap(&other->_impl_.repeated_int32_);
  _impl_.repeated_int64_.InternalSwap(&other->_impl_.repeated_int64_);
  _impl_.repeated_uint32_.InternalSwap(&other->_impl_.repeated_uint32_);
  _impl_.repeated_uint64_.InternalSwap(&other->_impl_.repeated_uint64_);
  _impl_.repeated_sint32_.InternalSwap(&other->_impl_.repeated_sint32_);
  _impl_.repeated_sint64_.InternalSwap(&other->_impl_.repeated_sint64_);
  _impl_.repeated_fixed32_.InternalSwap(&other->_impl_.repeated_fixed32_);
  _impl_.repeated_fixed64_.InternalSwap(&other->_impl_.repeated_fixed64_);
  _impl_.repeated_sfixed32_.InternalSwap(&other->_impl_.repeated_sfixed32_);
  _impl_.repeated_sfixed64_.InternalSwap(&other->_impl_.repeated_sfixed64_);
  _impl_.repeated_float_.InternalSwap(&other->_impl_.repeated_float_);
  _impl_.repeated_double_.InternalSwap(&other->_impl_.repeated_double_);
  _impl_.repeated_bool_.InternalSwap(&other->_impl_.repeated_bool_);
  _impl_.repeated_nested_enum_.InternalSwap(&other->_impl_.repeated_nested_enum_);
}

// ===================================================================

class NestedTestAllTypes::_Internal {
 public:
  using HasBits =
      decltype(std::declval<NestedTestAllTypes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(NestedTestAllTypes, _impl_._has_bits_);
};

NestedTestAllTypes::NestedTestAllTypes(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_lite_unittest.NestedTestAllTypes)
}
inline PROTOBUF_NDEBUG_INLINE NestedTestAllTypes::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::proto3_lite_unittest::NestedTestAllTypes& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

NestedTestAllTypes::NestedTestAllTypes(
    ::google::protobuf::Arena* arena,
    const NestedTestAllTypes& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NestedTestAllTypes* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.child_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::proto3_lite_unittest::NestedTestAllTypes>(
                              arena, *from._impl_.child_)
                        : nullptr;
  _impl_.payload_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::MessageLite::CopyConstruct<::proto3_lite_unittest::TestAllTypes>(
                              arena, *from._impl_.payload_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:proto3_lite_unittest.NestedTestAllTypes)
}
inline PROTOBUF_NDEBUG_INLINE NestedTestAllTypes::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void NestedTestAllTypes::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, child_),
           0,
           offsetof(Impl_, payload_) -
               offsetof(Impl_, child_) +
               sizeof(Impl_::payload_));
}
NestedTestAllTypes::~NestedTestAllTypes() {
  // @@protoc_insertion_point(destructor:proto3_lite_unittest.NestedTestAllTypes)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void NestedTestAllTypes::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.child_;
  delete _impl_.payload_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<40>
    NestedTestAllTypes::_class_data_ = {
        {
            &_NestedTestAllTypes_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &NestedTestAllTypes::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<NestedTestAllTypes>(),
            ::google::protobuf::MessageLite::GetNewImpl<NestedTestAllTypes>(),
            ::google::protobuf::MessageLite::GetClearImpl<NestedTestAllTypes>(), &NestedTestAllTypes::ByteSizeLong,
                &NestedTestAllTypes::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(NestedTestAllTypes, _impl_._cached_size_),
            true,
        },
        "proto3_lite_unittest.NestedTestAllTypes",
};
const ::google::protobuf::MessageLite::ClassData* NestedTestAllTypes::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> NestedTestAllTypes::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NestedTestAllTypes, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::proto3_lite_unittest::NestedTestAllTypes>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .proto3_lite_unittest.TestAllTypes payload = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(NestedTestAllTypes, _impl_.payload_)}},
    // .proto3_lite_unittest.NestedTestAllTypes child = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(NestedTestAllTypes, _impl_.child_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .proto3_lite_unittest.NestedTestAllTypes child = 1;
    {PROTOBUF_FIELD_OFFSET(NestedTestAllTypes, _impl_.child_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .proto3_lite_unittest.TestAllTypes payload = 2;
    {PROTOBUF_FIELD_OFFSET(NestedTestAllTypes, _impl_.payload_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::proto3_lite_unittest::NestedTestAllTypes>()},
    {::_pbi::TcParser::GetTable<::proto3_lite_unittest::TestAllTypes>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void NestedTestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_lite_unittest.NestedTestAllTypes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.child_ != nullptr);
      _impl_.child_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.payload_ != nullptr);
      _impl_.payload_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* NestedTestAllTypes::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const NestedTestAllTypes& this_ = static_cast<const NestedTestAllTypes&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* NestedTestAllTypes::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const NestedTestAllTypes& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:proto3_lite_unittest.NestedTestAllTypes)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .proto3_lite_unittest.NestedTestAllTypes child = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.child_, this_._impl_.child_->GetCachedSize(), target,
                stream);
          }

          // .proto3_lite_unittest.TestAllTypes payload = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.payload_, this_._impl_.payload_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:proto3_lite_unittest.NestedTestAllTypes)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t NestedTestAllTypes::ByteSizeLong(const MessageLite& base) {
          const NestedTestAllTypes& this_ = static_cast<const NestedTestAllTypes&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t NestedTestAllTypes::ByteSizeLong() const {
          const NestedTestAllTypes& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:proto3_lite_unittest.NestedTestAllTypes)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .proto3_lite_unittest.NestedTestAllTypes child = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.child_);
            }
            // .proto3_lite_unittest.TestAllTypes payload = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_);
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void NestedTestAllTypes::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NestedTestAllTypes*>(&to_msg);
  auto& from = static_cast<const NestedTestAllTypes&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:proto3_lite_unittest.NestedTestAllTypes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.child_ != nullptr);
      if (_this->_impl_.child_ == nullptr) {
        _this->_impl_.child_ =
            ::google::protobuf::MessageLite::CopyConstruct<::proto3_lite_unittest::NestedTestAllTypes>(arena, *from._impl_.child_);
      } else {
        _this->_impl_.child_->MergeFrom(*from._impl_.child_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.payload_ != nullptr);
      if (_this->_impl_.payload_ == nullptr) {
        _this->_impl_.payload_ =
            ::google::protobuf::MessageLite::CopyConstruct<::proto3_lite_unittest::TestAllTypes>(arena, *from._impl_.payload_);
      } else {
        _this->_impl_.payload_->MergeFrom(*from._impl_.payload_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NestedTestAllTypes::CopyFrom(const NestedTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_lite_unittest.NestedTestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NestedTestAllTypes::InternalSwap(NestedTestAllTypes* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NestedTestAllTypes, _impl_.payload_)
      + sizeof(NestedTestAllTypes::_impl_.payload_)
      - PROTOBUF_FIELD_OFFSET(NestedTestAllTypes, _impl_.child_)>(
          reinterpret_cast<char*>(&_impl_.child_),
          reinterpret_cast<char*>(&other->_impl_.child_));
}

// ===================================================================

class ForeignMessage::_Internal {
 public:
};

ForeignMessage::ForeignMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_lite_unittest.ForeignMessage)
}
ForeignMessage::ForeignMessage(
    ::google::protobuf::Arena* arena, const ForeignMessage& from)
    : ForeignMessage(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ForeignMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ForeignMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.c_ = {};
}
ForeignMessage::~ForeignMessage() {
  // @@protoc_insertion_point(destructor:proto3_lite_unittest.ForeignMessage)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void ForeignMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<36>
    ForeignMessage::_class_data_ = {
        {
            &_ForeignMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ForeignMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<ForeignMessage>(),
            ::google::protobuf::MessageLite::GetNewImpl<ForeignMessage>(),
            ::google::protobuf::MessageLite::GetClearImpl<ForeignMessage>(), &ForeignMessage::ByteSizeLong,
                &ForeignMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ForeignMessage, _impl_._cached_size_),
            true,
        },
        "proto3_lite_unittest.ForeignMessage",
};
const ::google::protobuf::MessageLite::ClassData* ForeignMessage::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ForeignMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::proto3_lite_unittest::ForeignMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 c = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ForeignMessage, _impl_.c_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 c = 1;
    {PROTOBUF_FIELD_OFFSET(ForeignMessage, _impl_.c_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ForeignMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_lite_unittest.ForeignMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.c_ = 0;
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ForeignMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ForeignMessage& this_ = static_cast<const ForeignMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ForeignMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ForeignMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:proto3_lite_unittest.ForeignMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 c = 1;
          if (this_._internal_c() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_c(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:proto3_lite_unittest.ForeignMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ForeignMessage::ByteSizeLong(const MessageLite& base) {
          const ForeignMessage& this_ = static_cast<const ForeignMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ForeignMessage::ByteSizeLong() const {
          const ForeignMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:proto3_lite_unittest.ForeignMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int32 c = 1;
            if (this_._internal_c() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_c());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void ForeignMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ForeignMessage*>(&to_msg);
  auto& from = static_cast<const ForeignMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto3_lite_unittest.ForeignMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_c() != 0) {
    _this->_impl_.c_ = from._impl_.c_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ForeignMessage::CopyFrom(const ForeignMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_lite_unittest.ForeignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ForeignMessage::InternalSwap(ForeignMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.c_, other->_impl_.c_);
}

// ===================================================================

class TestEmptyMessage::_Internal {
 public:
};

TestEmptyMessage::TestEmptyMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_lite_unittest.TestEmptyMessage)
}
TestEmptyMessage::TestEmptyMessage(
    ::google::protobuf::Arena* arena, const TestEmptyMessage& from)
    : TestEmptyMessage(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TestEmptyMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TestEmptyMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestEmptyMessage::~TestEmptyMessage() {
  // @@protoc_insertion_point(destructor:proto3_lite_unittest.TestEmptyMessage)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TestEmptyMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataLite<38>
    TestEmptyMessage::_class_data_ = {
        {
            &_TestEmptyMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestEmptyMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::MessageLite::GetDeleteImpl<TestEmptyMessage>(),
            ::google::protobuf::MessageLite::GetNewImpl<TestEmptyMessage>(),
            ::google::protobuf::MessageLite::GetClearImpl<TestEmptyMessage>(), &TestEmptyMessage::ByteSizeLong,
                &TestEmptyMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestEmptyMessage, _impl_._cached_size_),
            true,
        },
        "proto3_lite_unittest.TestEmptyMessage",
};
const ::google::protobuf::MessageLite::ClassData* TestEmptyMessage::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> TestEmptyMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::proto3_lite_unittest::TestEmptyMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TestEmptyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_lite_unittest.TestEmptyMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestEmptyMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestEmptyMessage& this_ = static_cast<const TestEmptyMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestEmptyMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestEmptyMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:proto3_lite_unittest.TestEmptyMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:proto3_lite_unittest.TestEmptyMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestEmptyMessage::ByteSizeLong(const MessageLite& base) {
          const TestEmptyMessage& this_ = static_cast<const TestEmptyMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestEmptyMessage::ByteSizeLong() const {
          const TestEmptyMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:proto3_lite_unittest.TestEmptyMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TestEmptyMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestEmptyMessage*>(&to_msg);
  auto& from = static_cast<const TestEmptyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto3_lite_unittest.TestEmptyMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestEmptyMessage::CopyFrom(const TestEmptyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_lite_unittest.TestEmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestEmptyMessage::InternalSwap(TestEmptyMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto3_lite_unittest
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
