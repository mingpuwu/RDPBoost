// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/protobuf/compiler/cpp/test_bad_identifiers.proto
// Protobuf C++ Version: 5.29.0-dev

#include "google/protobuf/compiler/cpp/test_bad_identifiers.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace protobuf_unittest {
              template <typename>
PROTOBUF_CONSTEXPR TestConflictingSymbolNamesExtension::TestConflictingSymbolNamesExtension(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct TestConflictingSymbolNamesExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNamesExtensionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNamesExtensionDefaultTypeInternal() {}
  union {
    TestConflictingSymbolNamesExtension _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNamesExtensionDefaultTypeInternal _TestConflictingSymbolNamesExtension_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_TypeTraits::TestConflictingSymbolNames_TypeTraits(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct TestConflictingSymbolNames_TypeTraitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_TypeTraitsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_TypeTraitsDefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_TypeTraits _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_TypeTraitsDefaultTypeInternal _TestConflictingSymbolNames_TypeTraits_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_StringPiece::TestConflictingSymbolNames_StringPiece(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct TestConflictingSymbolNames_StringPieceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_StringPieceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_StringPieceDefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_StringPiece _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_StringPieceDefaultTypeInternal _TestConflictingSymbolNames_StringPiece_default_instance_;

inline constexpr TestConflictingSymbolNames_Data6::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data6::TestConflictingSymbolNames_Data6(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestConflictingSymbolNames_Data6DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data6DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_Data6DefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Data6 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_Data6DefaultTypeInternal _TestConflictingSymbolNames_Data6_default_instance_;

inline constexpr TestConflictingSymbolNames_Data5::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data5::TestConflictingSymbolNames_Data5(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestConflictingSymbolNames_Data5DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data5DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_Data5DefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Data5 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_Data5DefaultTypeInternal _TestConflictingSymbolNames_Data5_default_instance_;

inline constexpr TestConflictingSymbolNames_Data4::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data4::TestConflictingSymbolNames_Data4(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestConflictingSymbolNames_Data4DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data4DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_Data4DefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Data4 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_Data4DefaultTypeInternal _TestConflictingSymbolNames_Data4_default_instance_;

inline constexpr TestConflictingSymbolNames_Data3::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data3::TestConflictingSymbolNames_Data3(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestConflictingSymbolNames_Data3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_Data3DefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Data3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_Data3DefaultTypeInternal _TestConflictingSymbolNames_Data3_default_instance_;

inline constexpr TestConflictingSymbolNames_Data2::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data2::TestConflictingSymbolNames_Data2(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestConflictingSymbolNames_Data2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_Data2DefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Data2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_Data2DefaultTypeInternal _TestConflictingSymbolNames_Data2_default_instance_;

inline constexpr TestConflictingSymbolNames_Data1::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data1::TestConflictingSymbolNames_Data1(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestConflictingSymbolNames_Data1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_Data1DefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Data1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_Data1DefaultTypeInternal _TestConflictingSymbolNames_Data1_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_DO::TestConflictingSymbolNames_DO(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct TestConflictingSymbolNames_DODefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_DODefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_DODefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_DO _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_DODefaultTypeInternal _TestConflictingSymbolNames_DO_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Cord::TestConflictingSymbolNames_Cord(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct TestConflictingSymbolNames_CordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_CordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_CordDefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Cord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_CordDefaultTypeInternal _TestConflictingSymbolNames_Cord_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_BuildDescriptors::TestConflictingSymbolNames_BuildDescriptors(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct TestConflictingSymbolNames_BuildDescriptorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_BuildDescriptorsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_BuildDescriptorsDefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_BuildDescriptors _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_BuildDescriptorsDefaultTypeInternal _TestConflictingSymbolNames_BuildDescriptors_default_instance_;

inline constexpr TestConflictingEnumNames::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        conflicting_enum_{static_cast< ::protobuf_unittest::TestConflictingEnumNames_while >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TestConflictingEnumNames::TestConflictingEnumNames(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestConflictingEnumNamesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingEnumNamesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingEnumNamesDefaultTypeInternal() {}
  union {
    TestConflictingEnumNames _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingEnumNamesDefaultTypeInternal _TestConflictingEnumNames_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR TableStruct::TableStruct(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct TableStructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableStructDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableStructDefaultTypeInternal() {}
  union {
    TableStruct _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableStructDefaultTypeInternal _TableStruct_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Shutdown::Shutdown(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ShutdownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShutdownDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShutdownDefaultTypeInternal() {}
  union {
    Shutdown _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShutdownDefaultTypeInternal _Shutdown_default_instance_;

inline constexpr NULL_::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        int__{0} {}

template <typename>
PROTOBUF_CONSTEXPR NULL_::NULL_(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NULL_DefaultTypeInternal {
  PROTOBUF_CONSTEXPR NULL_DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NULL_DefaultTypeInternal() {}
  union {
    NULL_ _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NULL_DefaultTypeInternal _NULL__default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR DummyMessage::DummyMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DummyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DummyMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DummyMessageDefaultTypeInternal() {}
  union {
    DummyMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DummyMessageDefaultTypeInternal _DummyMessage_default_instance_;

inline constexpr TestConflictingSymbolNames::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        i_{},
        new_element_{},
        index_{},
        length_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        some_cord_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        some_string_piece_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        release_length_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        do__{nullptr},
        release_do_{nullptr},
        input_{0},
        output_{0},
        total_size_{0},
        tag_{0},
        source_{0},
        value_{0},
        file_{0},
        from_{0},
        handle_uninterpreted_{0},
        controller_{0},
        already_here_{0},
        uint32_{0u},
        uint64_{::uint64_t{0u}},
        memset_{0},
        int32_{0},
        int64_{::int64_t{0}},
        cached_size_{0u},
        extensions_{0u},
        bit_{0u},
        bits_{0u},
        offsets_{0u},
        reflection_{0u},
        int__{0u},
        friend__{0u},
        field_type_{0},
        is_packed_{false},
        class__{0u},
        typedecl_{0u},
        auto__{0u},
        uint32_t_{0u},
        uint64_t_{0u},
        int32_t_{0},
        int64_t_{::int64_t{0}},
        size_t_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR TestConflictingSymbolNames::TestConflictingSymbolNames(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestConflictingSymbolNamesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNamesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNamesDefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNamesDefaultTypeInternal _TestConflictingSymbolNames_default_instance_;
}  // namespace protobuf_unittest
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[3];
static const ::_pb::ServiceDescriptor*
    file_level_service_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[1];
const ::uint32_t
    TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_BuildDescriptors, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_TypeTraits, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data1, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data1, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data2, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data2, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data3, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data3, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data4, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data4, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data5, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data5, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data6, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data6, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Cord, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_StringPiece, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_DO, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _internal_metadata_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_._extensions_),
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.input_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.output_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.length_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.i_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.new_element_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.total_size_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.tag_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.source_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.file_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.from_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.handle_uninterpreted_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.controller_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.already_here_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.uint32_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.uint32_t_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.uint64_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.uint64_t_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.string_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.memset_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.int32_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.int32_t_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.int64_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.int64_t_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.size_t_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.cached_size_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.extensions_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.bit_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.bits_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.offsets_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.reflection_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.some_cord_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.some_string_piece_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.int__),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.friend__),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.class__),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.typedecl_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.auto__),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.do__),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.field_type_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.is_packed_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.release_length_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.release_do_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.target_),
        8,
        9,
        0,
        ~0u,
        ~0u,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        ~0u,
        17,
        18,
        19,
        37,
        20,
        38,
        1,
        21,
        22,
        39,
        23,
        40,
        41,
        24,
        25,
        26,
        27,
        28,
        29,
        2,
        3,
        30,
        31,
        34,
        35,
        36,
        6,
        32,
        33,
        4,
        7,
        5,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNamesExtension, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingEnumNames, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingEnumNames, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingEnumNames, _impl_.conflicting_enum_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::DummyMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NULL_, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NULL_, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NULL_, _impl_.int__),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Shutdown, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TableStruct, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_BuildDescriptors)},
        {8, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_TypeTraits)},
        {16, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Data1)},
        {25, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Data2)},
        {34, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Data3)},
        {43, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Data4)},
        {52, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Data5)},
        {61, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Data6)},
        {70, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Cord)},
        {78, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_StringPiece)},
        {86, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_DO)},
        {94, 147, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames)},
        {192, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNamesExtension)},
        {200, 209, -1, sizeof(::protobuf_unittest::TestConflictingEnumNames)},
        {210, -1, -1, sizeof(::protobuf_unittest::DummyMessage)},
        {218, 227, -1, sizeof(::protobuf_unittest::NULL_)},
        {228, -1, -1, sizeof(::protobuf_unittest::Shutdown)},
        {236, -1, -1, sizeof(::protobuf_unittest::TableStruct)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::protobuf_unittest::_TestConflictingSymbolNames_BuildDescriptors_default_instance_._instance,
    &::protobuf_unittest::_TestConflictingSymbolNames_TypeTraits_default_instance_._instance,
    &::protobuf_unittest::_TestConflictingSymbolNames_Data1_default_instance_._instance,
    &::protobuf_unittest::_TestConflictingSymbolNames_Data2_default_instance_._instance,
    &::protobuf_unittest::_TestConflictingSymbolNames_Data3_default_instance_._instance,
    &::protobuf_unittest::_TestConflictingSymbolNames_Data4_default_instance_._instance,
    &::protobuf_unittest::_TestConflictingSymbolNames_Data5_default_instance_._instance,
    &::protobuf_unittest::_TestConflictingSymbolNames_Data6_default_instance_._instance,
    &::protobuf_unittest::_TestConflictingSymbolNames_Cord_default_instance_._instance,
    &::protobuf_unittest::_TestConflictingSymbolNames_StringPiece_default_instance_._instance,
    &::protobuf_unittest::_TestConflictingSymbolNames_DO_default_instance_._instance,
    &::protobuf_unittest::_TestConflictingSymbolNames_default_instance_._instance,
    &::protobuf_unittest::_TestConflictingSymbolNamesExtension_default_instance_._instance,
    &::protobuf_unittest::_TestConflictingEnumNames_default_instance_._instance,
    &::protobuf_unittest::_DummyMessage_default_instance_._instance,
    &::protobuf_unittest::_NULL__default_instance_._instance,
    &::protobuf_unittest::_Shutdown_default_instance_._instance,
    &::protobuf_unittest::_TableStruct_default_instance_._instance,
};
const char descriptor_table_protodef_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n7google/protobuf/compiler/cpp/test_bad_"
    "identifiers.proto\022\021protobuf_unittest\"\362\t\n"
    "\032TestConflictingSymbolNames\022\r\n\005input\030\001 \001"
    "(\005\022\016\n\006output\030\002 \001(\005\022\016\n\006length\030\003 \001(\t\022\t\n\001i\030"
    "\004 \003(\005\022\027\n\013new_element\030\005 \003(\tB\002\010\002\022\022\n\ntotal_"
    "size\030\006 \001(\005\022\013\n\003tag\030\007 \001(\005\022\016\n\006source\030\010 \001(\005\022"
    "\r\n\005value\030\t \001(\005\022\014\n\004file\030\n \001(\005\022\014\n\004from\030\013 \001"
    "(\005\022\034\n\024handle_uninterpreted\030\014 \001(\005\022\r\n\005inde"
    "x\030\r \003(\005\022\022\n\ncontroller\030\016 \001(\005\022\024\n\014already_h"
    "ere\030\017 \001(\005\022\016\n\006uint32\030\020 \001(\r\022\020\n\010uint32_t\030) "
    "\001(\r\022\016\n\006uint64\030\021 \001(\004\022\020\n\010uint64_t\030* \001(\r\022\016\n"
    "\006string\030\022 \001(\t\022\016\n\006memset\030\023 \001(\005\022\r\n\005int32\030\024"
    " \001(\005\022\017\n\007int32_t\030+ \001(\005\022\r\n\005int64\030\025 \001(\003\022\017\n\007"
    "int64_t\030, \001(\003\022\016\n\006size_t\030- \001(\003\022\023\n\013cached_"
    "size\030\026 \001(\r\022\022\n\nextensions\030\027 \001(\r\022\013\n\003bit\030\030 "
    "\001(\r\022\014\n\004bits\030\031 \001(\r\022\017\n\007offsets\030\032 \001(\r\022\022\n\nre"
    "flection\030\033 \001(\r\022\025\n\tsome_cord\030\034 \001(\tB\002\010\001\022\035\n"
    "\021some_string_piece\030\035 \001(\tB\002\010\002\022\013\n\003int\030\036 \001("
    "\r\022\016\n\006friend\030\037 \001(\r\022\r\n\005class\030% \001(\r\022\020\n\010type"
    "decl\030\' \001(\r\022\014\n\004auto\030( \001(\r\022<\n\002do\030  \001(\01320.p"
    "rotobuf_unittest.TestConflictingSymbolNa"
    "mes.DO\022\022\n\nfield_type\030! \001(\005\022\021\n\tis_packed\030"
    "\" \001(\010\022\026\n\016release_length\030# \001(\t\022D\n\nrelease"
    "_do\030$ \001(\01320.protobuf_unittest.TestConfli"
    "ctingSymbolNames.DO\022\016\n\006target\030& \001(\t\032\022\n\020B"
    "uildDescriptors\032\014\n\nTypeTraits\032\025\n\005Data1\022\014"
    "\n\004data\030\001 \003(\005\032M\n\005Data2\022D\n\004data\030\001 \003(\01626.pr"
    "otobuf_unittest.TestConflictingSymbolNam"
    "es.TestEnum\032\025\n\005Data3\022\014\n\004data\030\001 \003(\t\032J\n\005Da"
    "ta4\022A\n\004data\030\001 \003(\01323.protobuf_unittest.Te"
    "stConflictingSymbolNames.Data4\032\031\n\005Data5\022"
    "\020\n\004data\030\001 \003(\tB\002\010\002\032\031\n\005Data6\022\020\n\004data\030\001 \003(\t"
    "B\002\010\001\032\006\n\004Cord\032\r\n\013StringPiece\032\004\n\002DO\"\023\n\010Tes"
    "tEnum\022\007\n\003FOO\020\000*\t\010\350\007\020\200\200\200\200\002\"w\n#TestConflic"
    "tingSymbolNamesExtension2P\n\022repeated_int"
    "32_ext\022-.protobuf_unittest.TestConflicti"
    "ngSymbolNames\030\326\307\336\t \003(\005B\002\020\001\"\260\001\n\030TestConfl"
    "ictingEnumNames\022K\n\020conflicting_enum\030\001 \001("
    "\01621.protobuf_unittest.TestConflictingEnu"
    "mNames.while\"G\n\005while\022\013\n\007default\020\000\022\007\n\003an"
    "d\020\001\022\t\n\005class\020\002\022\007\n\003int\020\003\022\013\n\007typedef\020\004\022\007\n\003"
    "XOR\020\005\"\016\n\014DummyMessage\"\023\n\004NULL\022\013\n\003int\030\001 \001"
    "(\005\"\n\n\010Shutdown\"\r\n\013TableStruct*9\n\004bool\022\013\n"
    "\007default\020\000\022\n\n\006NOT_EQ\020\001\022\014\n\010volatile\020\002\022\n\n\006"
    "return\020\0032i\n\032TestConflictingMethodNames\022K"
    "\n\007Closure\022\037.protobuf_unittest.DummyMessa"
    "ge\032\037.protobuf_unittest.DummyMessage:=\n\004v"
    "oid\022-.protobuf_unittest.TestConflictingS"
    "ymbolNames\030\215\227\023 \001(\005B\003\200\001\001"
};
static ::absl::once_flag descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto = {
    false,
    false,
    1943,
    descriptor_table_protodef_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
    "google/protobuf/compiler/cpp/test_bad_identifiers.proto",
    &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
    nullptr,
    0,
    18,
    schemas,
    file_default_instances,
    TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto::offsets,
    file_level_enum_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
    file_level_service_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
};
namespace protobuf_unittest {
const ::google::protobuf::EnumDescriptor* TestConflictingSymbolNames_TestEnum_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t TestConflictingSymbolNames_TestEnum_internal_data_[] = {
    65536u, 0u, };
bool TestConflictingSymbolNames_TestEnum_IsValid(int value) {
  return 0 <= value && value <= 0;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames::FOO;
constexpr TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames::TestEnum_MIN;
constexpr TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames::TestEnum_MAX;
constexpr int TestConflictingSymbolNames::TestEnum_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TestConflictingEnumNames_while_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t TestConflictingEnumNames_while_internal_data_[] = {
    393216u, 0u, };
bool TestConflictingEnumNames_while_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TestConflictingEnumNames_while TestConflictingEnumNames::default_;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::and_;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::class_;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::int_;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::typedef_;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::XOR;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::while_MIN;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::while_MAX;
constexpr int TestConflictingEnumNames::while_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* bool__descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t bool__internal_data_[] = {
    262144u, 0u, };
bool bool__IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class TestConflictingSymbolNames_BuildDescriptors::_Internal {
 public:
};

TestConflictingSymbolNames_BuildDescriptors::TestConflictingSymbolNames_BuildDescriptors(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.BuildDescriptors)
}
TestConflictingSymbolNames_BuildDescriptors::TestConflictingSymbolNames_BuildDescriptors(
    ::google::protobuf::Arena* arena,
    const TestConflictingSymbolNames_BuildDescriptors& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestConflictingSymbolNames_BuildDescriptors* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.BuildDescriptors)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingSymbolNames_BuildDescriptors::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_TestConflictingSymbolNames_BuildDescriptors_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestConflictingSymbolNames_BuildDescriptors::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<TestConflictingSymbolNames_BuildDescriptors>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<TestConflictingSymbolNames_BuildDescriptors>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<TestConflictingSymbolNames_BuildDescriptors>(), &TestConflictingSymbolNames_BuildDescriptors::ByteSizeLong,
                &TestConflictingSymbolNames_BuildDescriptors::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_BuildDescriptors, _impl_._cached_size_),
            false,
        },
        &TestConflictingSymbolNames_BuildDescriptors::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingSymbolNames_BuildDescriptors::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> TestConflictingSymbolNames_BuildDescriptors::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_BuildDescriptors>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata TestConflictingSymbolNames_BuildDescriptors::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestConflictingSymbolNames_TypeTraits::_Internal {
 public:
};

TestConflictingSymbolNames_TypeTraits::TestConflictingSymbolNames_TypeTraits(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.TypeTraits)
}
TestConflictingSymbolNames_TypeTraits::TestConflictingSymbolNames_TypeTraits(
    ::google::protobuf::Arena* arena,
    const TestConflictingSymbolNames_TypeTraits& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestConflictingSymbolNames_TypeTraits* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.TypeTraits)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingSymbolNames_TypeTraits::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_TestConflictingSymbolNames_TypeTraits_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestConflictingSymbolNames_TypeTraits::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<TestConflictingSymbolNames_TypeTraits>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<TestConflictingSymbolNames_TypeTraits>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<TestConflictingSymbolNames_TypeTraits>(), &TestConflictingSymbolNames_TypeTraits::ByteSizeLong,
                &TestConflictingSymbolNames_TypeTraits::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_TypeTraits, _impl_._cached_size_),
            false,
        },
        &TestConflictingSymbolNames_TypeTraits::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingSymbolNames_TypeTraits::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> TestConflictingSymbolNames_TypeTraits::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_TypeTraits>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata TestConflictingSymbolNames_TypeTraits::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestConflictingSymbolNames_Data1::_Internal {
 public:
};

TestConflictingSymbolNames_Data1::TestConflictingSymbolNames_Data1(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Data1)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames_Data1::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestConflictingSymbolNames_Data1& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

TestConflictingSymbolNames_Data1::TestConflictingSymbolNames_Data1(
    ::google::protobuf::Arena* arena,
    const TestConflictingSymbolNames_Data1& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestConflictingSymbolNames_Data1* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Data1)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames_Data1::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void TestConflictingSymbolNames_Data1::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestConflictingSymbolNames_Data1::~TestConflictingSymbolNames_Data1() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames.Data1)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestConflictingSymbolNames_Data1::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingSymbolNames_Data1::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TestConflictingSymbolNames_Data1_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestConflictingSymbolNames_Data1::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TestConflictingSymbolNames_Data1>(),
            ::google::protobuf::Message::GetNewImpl<TestConflictingSymbolNames_Data1>(),
            ::google::protobuf::Message::GetClearImpl<TestConflictingSymbolNames_Data1>(), &TestConflictingSymbolNames_Data1::ByteSizeLong,
                &TestConflictingSymbolNames_Data1::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data1, _impl_._cached_size_),
            false,
        },
        &TestConflictingSymbolNames_Data1::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingSymbolNames_Data1::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> TestConflictingSymbolNames_Data1::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_Data1>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated int32 data = 1;
    {::_pbi::TcParser::FastV32R1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data1, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int32 data = 1;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data1, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TestConflictingSymbolNames_Data1::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames.Data1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestConflictingSymbolNames_Data1::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestConflictingSymbolNames_Data1& this_ = static_cast<const TestConflictingSymbolNames_Data1&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestConflictingSymbolNames_Data1::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestConflictingSymbolNames_Data1& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames.Data1)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated int32 data = 1;
          for (int i = 0, n = this_._internal_data_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                1, this_._internal_data().Get(i), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames.Data1)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestConflictingSymbolNames_Data1::ByteSizeLong(const MessageLite& base) {
          const TestConflictingSymbolNames_Data1& this_ = static_cast<const TestConflictingSymbolNames_Data1&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestConflictingSymbolNames_Data1::ByteSizeLong() const {
          const TestConflictingSymbolNames_Data1& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames.Data1)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated int32 data = 1;
             {
              std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
                  this_._internal_data());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_data_size());
              total_size += tag_size + data_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestConflictingSymbolNames_Data1::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames_Data1*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames_Data1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames.Data1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames_Data1::CopyFrom(const TestConflictingSymbolNames_Data1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames.Data1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestConflictingSymbolNames_Data1::InternalSwap(TestConflictingSymbolNames_Data1* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata TestConflictingSymbolNames_Data1::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestConflictingSymbolNames_Data2::_Internal {
 public:
};

TestConflictingSymbolNames_Data2::TestConflictingSymbolNames_Data2(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Data2)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames_Data2::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestConflictingSymbolNames_Data2& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

TestConflictingSymbolNames_Data2::TestConflictingSymbolNames_Data2(
    ::google::protobuf::Arena* arena,
    const TestConflictingSymbolNames_Data2& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestConflictingSymbolNames_Data2* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Data2)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames_Data2::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void TestConflictingSymbolNames_Data2::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestConflictingSymbolNames_Data2::~TestConflictingSymbolNames_Data2() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames.Data2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestConflictingSymbolNames_Data2::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingSymbolNames_Data2::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TestConflictingSymbolNames_Data2_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestConflictingSymbolNames_Data2::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TestConflictingSymbolNames_Data2>(),
            ::google::protobuf::Message::GetNewImpl<TestConflictingSymbolNames_Data2>(),
            ::google::protobuf::Message::GetClearImpl<TestConflictingSymbolNames_Data2>(), &TestConflictingSymbolNames_Data2::ByteSizeLong,
                &TestConflictingSymbolNames_Data2::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data2, _impl_._cached_size_),
            false,
        },
        &TestConflictingSymbolNames_Data2::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingSymbolNames_Data2::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestConflictingSymbolNames_Data2::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_Data2>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
    {::_pbi::TcParser::FastEr0R1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data2, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data2, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kEnumRange)},
  }}, {{
    {0, 1},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TestConflictingSymbolNames_Data2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames.Data2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestConflictingSymbolNames_Data2::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestConflictingSymbolNames_Data2& this_ = static_cast<const TestConflictingSymbolNames_Data2&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestConflictingSymbolNames_Data2::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestConflictingSymbolNames_Data2& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames.Data2)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
          for (int i = 0, n = this_._internal_data_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, static_cast<::protobuf_unittest::TestConflictingSymbolNames_TestEnum>(this_._internal_data().Get(i)),
                target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames.Data2)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestConflictingSymbolNames_Data2::ByteSizeLong(const MessageLite& base) {
          const TestConflictingSymbolNames_Data2& this_ = static_cast<const TestConflictingSymbolNames_Data2&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestConflictingSymbolNames_Data2::ByteSizeLong() const {
          const TestConflictingSymbolNames_Data2& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames.Data2)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
             {
              std::size_t data_size =
                  ::_pbi::WireFormatLite::EnumSize(this_._internal_data());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_data_size());
              total_size += data_size + tag_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestConflictingSymbolNames_Data2::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames_Data2*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames_Data2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames.Data2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames_Data2::CopyFrom(const TestConflictingSymbolNames_Data2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames.Data2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestConflictingSymbolNames_Data2::InternalSwap(TestConflictingSymbolNames_Data2* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata TestConflictingSymbolNames_Data2::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestConflictingSymbolNames_Data3::_Internal {
 public:
};

TestConflictingSymbolNames_Data3::TestConflictingSymbolNames_Data3(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Data3)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames_Data3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestConflictingSymbolNames_Data3& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

TestConflictingSymbolNames_Data3::TestConflictingSymbolNames_Data3(
    ::google::protobuf::Arena* arena,
    const TestConflictingSymbolNames_Data3& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestConflictingSymbolNames_Data3* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Data3)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames_Data3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void TestConflictingSymbolNames_Data3::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestConflictingSymbolNames_Data3::~TestConflictingSymbolNames_Data3() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames.Data3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestConflictingSymbolNames_Data3::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingSymbolNames_Data3::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TestConflictingSymbolNames_Data3_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestConflictingSymbolNames_Data3::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TestConflictingSymbolNames_Data3>(),
            ::google::protobuf::Message::GetNewImpl<TestConflictingSymbolNames_Data3>(),
            ::google::protobuf::Message::GetClearImpl<TestConflictingSymbolNames_Data3>(), &TestConflictingSymbolNames_Data3::ByteSizeLong,
                &TestConflictingSymbolNames_Data3::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data3, _impl_._cached_size_),
            false,
        },
        &TestConflictingSymbolNames_Data3::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingSymbolNames_Data3::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 63, 2> TestConflictingSymbolNames_Data3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_Data3>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string data = 1;
    {::_pbi::TcParser::FastSR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data3, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string data = 1;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data3, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\62\4\0\0\0\0\0\0"
    "protobuf_unittest.TestConflictingSymbolNames.Data3"
    "data"
  }},
};

PROTOBUF_NOINLINE void TestConflictingSymbolNames_Data3::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames.Data3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestConflictingSymbolNames_Data3::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestConflictingSymbolNames_Data3& this_ = static_cast<const TestConflictingSymbolNames_Data3&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestConflictingSymbolNames_Data3::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestConflictingSymbolNames_Data3& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames.Data3)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string data = 1;
          for (int i = 0, n = this_._internal_data_size(); i < n; ++i) {
            const auto& s = this_._internal_data().Get(i);
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "protobuf_unittest.TestConflictingSymbolNames.Data3.data");
            target = stream->WriteString(1, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames.Data3)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestConflictingSymbolNames_Data3::ByteSizeLong(const MessageLite& base) {
          const TestConflictingSymbolNames_Data3& this_ = static_cast<const TestConflictingSymbolNames_Data3&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestConflictingSymbolNames_Data3::ByteSizeLong() const {
          const TestConflictingSymbolNames_Data3& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames.Data3)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string data = 1;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_data().size());
              for (int i = 0, n = this_._internal_data().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_data().Get(i));
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestConflictingSymbolNames_Data3::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames_Data3*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames_Data3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames.Data3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames_Data3::CopyFrom(const TestConflictingSymbolNames_Data3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames.Data3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestConflictingSymbolNames_Data3::InternalSwap(TestConflictingSymbolNames_Data3* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata TestConflictingSymbolNames_Data3::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestConflictingSymbolNames_Data4::_Internal {
 public:
};

TestConflictingSymbolNames_Data4::TestConflictingSymbolNames_Data4(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Data4)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames_Data4::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestConflictingSymbolNames_Data4& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

TestConflictingSymbolNames_Data4::TestConflictingSymbolNames_Data4(
    ::google::protobuf::Arena* arena,
    const TestConflictingSymbolNames_Data4& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestConflictingSymbolNames_Data4* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Data4)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames_Data4::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void TestConflictingSymbolNames_Data4::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestConflictingSymbolNames_Data4::~TestConflictingSymbolNames_Data4() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames.Data4)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestConflictingSymbolNames_Data4::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingSymbolNames_Data4::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TestConflictingSymbolNames_Data4_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestConflictingSymbolNames_Data4::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TestConflictingSymbolNames_Data4>(),
            ::google::protobuf::Message::GetNewImpl<TestConflictingSymbolNames_Data4>(),
            ::google::protobuf::Message::GetClearImpl<TestConflictingSymbolNames_Data4>(), &TestConflictingSymbolNames_Data4::ByteSizeLong,
                &TestConflictingSymbolNames_Data4::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data4, _impl_._cached_size_),
            false,
        },
        &TestConflictingSymbolNames_Data4::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingSymbolNames_Data4::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestConflictingSymbolNames_Data4::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_Data4>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data4, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data4, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_Data4>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TestConflictingSymbolNames_Data4::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames.Data4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestConflictingSymbolNames_Data4::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestConflictingSymbolNames_Data4& this_ = static_cast<const TestConflictingSymbolNames_Data4&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestConflictingSymbolNames_Data4::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestConflictingSymbolNames_Data4& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames.Data4)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames.Data4)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestConflictingSymbolNames_Data4::ByteSizeLong(const MessageLite& base) {
          const TestConflictingSymbolNames_Data4& this_ = static_cast<const TestConflictingSymbolNames_Data4&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestConflictingSymbolNames_Data4::ByteSizeLong() const {
          const TestConflictingSymbolNames_Data4& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames.Data4)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
             {
              total_size += 1UL * this_._internal_data_size();
              for (const auto& msg : this_._internal_data()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestConflictingSymbolNames_Data4::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames_Data4*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames_Data4&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames.Data4)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(
      from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames_Data4::CopyFrom(const TestConflictingSymbolNames_Data4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames.Data4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestConflictingSymbolNames_Data4::InternalSwap(TestConflictingSymbolNames_Data4* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata TestConflictingSymbolNames_Data4::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestConflictingSymbolNames_Data5::_Internal {
 public:
};

TestConflictingSymbolNames_Data5::TestConflictingSymbolNames_Data5(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Data5)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames_Data5::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestConflictingSymbolNames_Data5& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

TestConflictingSymbolNames_Data5::TestConflictingSymbolNames_Data5(
    ::google::protobuf::Arena* arena,
    const TestConflictingSymbolNames_Data5& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestConflictingSymbolNames_Data5* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Data5)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames_Data5::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void TestConflictingSymbolNames_Data5::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestConflictingSymbolNames_Data5::~TestConflictingSymbolNames_Data5() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames.Data5)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestConflictingSymbolNames_Data5::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingSymbolNames_Data5::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TestConflictingSymbolNames_Data5_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestConflictingSymbolNames_Data5::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TestConflictingSymbolNames_Data5>(),
            ::google::protobuf::Message::GetNewImpl<TestConflictingSymbolNames_Data5>(),
            ::google::protobuf::Message::GetClearImpl<TestConflictingSymbolNames_Data5>(), &TestConflictingSymbolNames_Data5::ByteSizeLong,
                &TestConflictingSymbolNames_Data5::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data5, _impl_._cached_size_),
            false,
        },
        &TestConflictingSymbolNames_Data5::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingSymbolNames_Data5::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 63, 2> TestConflictingSymbolNames_Data5::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_Data5>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string data = 1 [ctype = STRING_PIECE];
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data5, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\62\4\0\0\0\0\0\0"
    "protobuf_unittest.TestConflictingSymbolNames.Data5"
    "data"
  }},
};

PROTOBUF_NOINLINE void TestConflictingSymbolNames_Data5::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames.Data5)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestConflictingSymbolNames_Data5::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestConflictingSymbolNames_Data5& this_ = static_cast<const TestConflictingSymbolNames_Data5&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestConflictingSymbolNames_Data5::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestConflictingSymbolNames_Data5& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames.Data5)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string data = 1 [ctype = STRING_PIECE];
          for (int i = 0, n = this_._internal_data_size(); i < n; ++i) {
            const auto& s = this_._internal_data().Get(i);
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "protobuf_unittest.TestConflictingSymbolNames.Data5.data");
            target = stream->WriteString(1, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames.Data5)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestConflictingSymbolNames_Data5::ByteSizeLong(const MessageLite& base) {
          const TestConflictingSymbolNames_Data5& this_ = static_cast<const TestConflictingSymbolNames_Data5&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestConflictingSymbolNames_Data5::ByteSizeLong() const {
          const TestConflictingSymbolNames_Data5& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames.Data5)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string data = 1 [ctype = STRING_PIECE];
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_data().size());
              for (int i = 0, n = this_._internal_data().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_data().Get(i));
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestConflictingSymbolNames_Data5::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames_Data5*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames_Data5&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames.Data5)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames_Data5::CopyFrom(const TestConflictingSymbolNames_Data5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames.Data5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestConflictingSymbolNames_Data5::InternalSwap(TestConflictingSymbolNames_Data5* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata TestConflictingSymbolNames_Data5::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestConflictingSymbolNames_Data6::_Internal {
 public:
};

TestConflictingSymbolNames_Data6::TestConflictingSymbolNames_Data6(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Data6)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames_Data6::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestConflictingSymbolNames_Data6& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

TestConflictingSymbolNames_Data6::TestConflictingSymbolNames_Data6(
    ::google::protobuf::Arena* arena,
    const TestConflictingSymbolNames_Data6& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestConflictingSymbolNames_Data6* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Data6)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames_Data6::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void TestConflictingSymbolNames_Data6::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestConflictingSymbolNames_Data6::~TestConflictingSymbolNames_Data6() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames.Data6)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestConflictingSymbolNames_Data6::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingSymbolNames_Data6::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TestConflictingSymbolNames_Data6_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestConflictingSymbolNames_Data6::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TestConflictingSymbolNames_Data6>(),
            ::google::protobuf::Message::GetNewImpl<TestConflictingSymbolNames_Data6>(),
            ::google::protobuf::Message::GetClearImpl<TestConflictingSymbolNames_Data6>(), &TestConflictingSymbolNames_Data6::ByteSizeLong,
                &TestConflictingSymbolNames_Data6::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data6, _impl_._cached_size_),
            false,
        },
        &TestConflictingSymbolNames_Data6::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingSymbolNames_Data6::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 63, 2> TestConflictingSymbolNames_Data6::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_Data6>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string data = 1 [ctype = CORD];
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Data6, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\62\4\0\0\0\0\0\0"
    "protobuf_unittest.TestConflictingSymbolNames.Data6"
    "data"
  }},
};

PROTOBUF_NOINLINE void TestConflictingSymbolNames_Data6::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames.Data6)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestConflictingSymbolNames_Data6::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestConflictingSymbolNames_Data6& this_ = static_cast<const TestConflictingSymbolNames_Data6&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestConflictingSymbolNames_Data6::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestConflictingSymbolNames_Data6& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames.Data6)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string data = 1 [ctype = CORD];
          for (int i = 0, n = this_._internal_data_size(); i < n; ++i) {
            const auto& s = this_._internal_data().Get(i);
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "protobuf_unittest.TestConflictingSymbolNames.Data6.data");
            target = stream->WriteString(1, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames.Data6)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestConflictingSymbolNames_Data6::ByteSizeLong(const MessageLite& base) {
          const TestConflictingSymbolNames_Data6& this_ = static_cast<const TestConflictingSymbolNames_Data6&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestConflictingSymbolNames_Data6::ByteSizeLong() const {
          const TestConflictingSymbolNames_Data6& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames.Data6)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string data = 1 [ctype = CORD];
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_data().size());
              for (int i = 0, n = this_._internal_data().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_data().Get(i));
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestConflictingSymbolNames_Data6::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames_Data6*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames_Data6&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames.Data6)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames_Data6::CopyFrom(const TestConflictingSymbolNames_Data6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames.Data6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestConflictingSymbolNames_Data6::InternalSwap(TestConflictingSymbolNames_Data6* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata TestConflictingSymbolNames_Data6::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestConflictingSymbolNames_Cord::_Internal {
 public:
};

TestConflictingSymbolNames_Cord::TestConflictingSymbolNames_Cord(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Cord)
}
TestConflictingSymbolNames_Cord::TestConflictingSymbolNames_Cord(
    ::google::protobuf::Arena* arena,
    const TestConflictingSymbolNames_Cord& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestConflictingSymbolNames_Cord* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Cord)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingSymbolNames_Cord::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_TestConflictingSymbolNames_Cord_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestConflictingSymbolNames_Cord::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<TestConflictingSymbolNames_Cord>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<TestConflictingSymbolNames_Cord>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<TestConflictingSymbolNames_Cord>(), &TestConflictingSymbolNames_Cord::ByteSizeLong,
                &TestConflictingSymbolNames_Cord::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_Cord, _impl_._cached_size_),
            false,
        },
        &TestConflictingSymbolNames_Cord::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingSymbolNames_Cord::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> TestConflictingSymbolNames_Cord::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_Cord>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata TestConflictingSymbolNames_Cord::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestConflictingSymbolNames_StringPiece::_Internal {
 public:
};

TestConflictingSymbolNames_StringPiece::TestConflictingSymbolNames_StringPiece(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.StringPiece)
}
TestConflictingSymbolNames_StringPiece::TestConflictingSymbolNames_StringPiece(
    ::google::protobuf::Arena* arena,
    const TestConflictingSymbolNames_StringPiece& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestConflictingSymbolNames_StringPiece* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.StringPiece)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingSymbolNames_StringPiece::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_TestConflictingSymbolNames_StringPiece_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestConflictingSymbolNames_StringPiece::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<TestConflictingSymbolNames_StringPiece>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<TestConflictingSymbolNames_StringPiece>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<TestConflictingSymbolNames_StringPiece>(), &TestConflictingSymbolNames_StringPiece::ByteSizeLong,
                &TestConflictingSymbolNames_StringPiece::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_StringPiece, _impl_._cached_size_),
            false,
        },
        &TestConflictingSymbolNames_StringPiece::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingSymbolNames_StringPiece::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> TestConflictingSymbolNames_StringPiece::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_StringPiece>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata TestConflictingSymbolNames_StringPiece::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestConflictingSymbolNames_DO::_Internal {
 public:
};

TestConflictingSymbolNames_DO::TestConflictingSymbolNames_DO(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.DO)
}
TestConflictingSymbolNames_DO::TestConflictingSymbolNames_DO(
    ::google::protobuf::Arena* arena,
    const TestConflictingSymbolNames_DO& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestConflictingSymbolNames_DO* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.DO)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingSymbolNames_DO::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_TestConflictingSymbolNames_DO_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestConflictingSymbolNames_DO::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<TestConflictingSymbolNames_DO>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<TestConflictingSymbolNames_DO>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<TestConflictingSymbolNames_DO>(), &TestConflictingSymbolNames_DO::ByteSizeLong,
                &TestConflictingSymbolNames_DO::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames_DO, _impl_._cached_size_),
            false,
        },
        &TestConflictingSymbolNames_DO::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingSymbolNames_DO::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> TestConflictingSymbolNames_DO::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_DO>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata TestConflictingSymbolNames_DO::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestConflictingSymbolNames::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TestConflictingSymbolNames>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_._has_bits_);
};

TestConflictingSymbolNames::TestConflictingSymbolNames(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protobuf_unittest::TestConflictingSymbolNames& from_msg)
      : _extensions_{visibility, arena},
        _has_bits_{from._has_bits_},
        _cached_size_{0},
        i_{visibility, arena, from.i_},
        new_element_{visibility, arena, from.new_element_},
        index_{visibility, arena, from.index_},
        length_(arena, from.length_),
        string_(arena, from.string_),
        some_cord_(arena, from.some_cord_),
        some_string_piece_(arena, from.some_string_piece_),
        release_length_(arena, from.release_length_),
        target_(arena, from.target_) {}

TestConflictingSymbolNames::TestConflictingSymbolNames(
    ::google::protobuf::Arena* arena,
    const TestConflictingSymbolNames& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestConflictingSymbolNames* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_._extensions_.MergeFrom(this, from._impl_._extensions_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.do__ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::protobuf_unittest::TestConflictingSymbolNames_DO>(
                              arena, *from._impl_.do__)
                        : nullptr;
  _impl_.release_do_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::protobuf_unittest::TestConflictingSymbolNames_DO>(
                              arena, *from._impl_.release_do_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, input_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, input_),
           offsetof(Impl_, size_t_) -
               offsetof(Impl_, input_) +
               sizeof(Impl_::size_t_));

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames)
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingSymbolNames::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _extensions_{visibility, arena},
        _cached_size_{0},
        i_{visibility, arena},
        new_element_{visibility, arena},
        index_{visibility, arena},
        length_(arena),
        string_(arena),
        some_cord_(arena),
        some_string_piece_(arena),
        release_length_(arena),
        target_(arena) {}

inline void TestConflictingSymbolNames::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, do__),
           0,
           offsetof(Impl_, size_t_) -
               offsetof(Impl_, do__) +
               sizeof(Impl_::size_t_));
}
TestConflictingSymbolNames::~TestConflictingSymbolNames() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestConflictingSymbolNames::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.length_.Destroy();
  _impl_.string_.Destroy();
  _impl_.some_cord_.Destroy();
  _impl_.some_string_piece_.Destroy();
  _impl_.release_length_.Destroy();
  _impl_.target_.Destroy();
  delete _impl_.do__;
  delete _impl_.release_do_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingSymbolNames::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TestConflictingSymbolNames_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            TestConflictingSymbolNames::IsInitializedImpl,
            &TestConflictingSymbolNames::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TestConflictingSymbolNames>(),
            ::google::protobuf::Message::GetNewImpl<TestConflictingSymbolNames>(),
            ::google::protobuf::Message::GetClearImpl<TestConflictingSymbolNames>(), &TestConflictingSymbolNames::ByteSizeLong,
                &TestConflictingSymbolNames::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_._cached_size_),
            false,
        },
        &TestConflictingSymbolNames::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingSymbolNames::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 45, 2, 162, 7> TestConflictingSymbolNames::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_._extensions_),
    45, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    45,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 input = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestConflictingSymbolNames, _impl_.input_), 8>(),
     {8, 8, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.input_)}},
    // optional int32 output = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestConflictingSymbolNames, _impl_.output_), 9>(),
     {16, 9, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.output_)}},
    // optional string length = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.length_)}},
    // repeated int32 i = 4;
    {::_pbi::TcParser::FastV32R1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.i_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 total_size = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestConflictingSymbolNames, _impl_.total_size_), 10>(),
     {48, 10, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.total_size_)}},
    // optional int32 tag = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestConflictingSymbolNames, _impl_.tag_), 11>(),
     {56, 11, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.tag_)}},
    // optional int32 source = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestConflictingSymbolNames, _impl_.source_), 12>(),
     {64, 12, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.source_)}},
    // optional int32 value = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestConflictingSymbolNames, _impl_.value_), 13>(),
     {72, 13, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.value_)}},
    // optional int32 file = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestConflictingSymbolNames, _impl_.file_), 14>(),
     {80, 14, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.file_)}},
    // optional int32 from = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestConflictingSymbolNames, _impl_.from_), 15>(),
     {88, 15, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.from_)}},
    // optional int32 handle_uninterpreted = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestConflictingSymbolNames, _impl_.handle_uninterpreted_), 16>(),
     {96, 16, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.handle_uninterpreted_)}},
    // repeated int32 index = 13;
    {::_pbi::TcParser::FastV32R1,
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.index_)}},
    // optional int32 controller = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestConflictingSymbolNames, _impl_.controller_), 17>(),
     {112, 17, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.controller_)}},
    // optional int32 already_here = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestConflictingSymbolNames, _impl_.already_here_), 18>(),
     {120, 18, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.already_here_)}},
    // optional uint32 uint32 = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 19, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.uint32_)}},
    // optional uint64 uint64 = 17;
    {::_pbi::TcParser::FastV64S2,
     {392, 20, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.uint64_)}},
    // optional string string = 18;
    {::_pbi::TcParser::FastSS2,
     {402, 1, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.string_)}},
    // optional int32 memset = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 21, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.memset_)}},
    // optional int32 int32 = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 22, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.int32_)}},
    // optional int64 int64 = 21;
    {::_pbi::TcParser::FastV64S2,
     {424, 23, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.int64_)}},
    // optional uint32 cached_size = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 24, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.cached_size_)}},
    // optional uint32 extensions = 23;
    {::_pbi::TcParser::FastV32S2,
     {440, 25, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.extensions_)}},
    // optional uint32 bit = 24;
    {::_pbi::TcParser::FastV32S2,
     {448, 26, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.bit_)}},
    // optional uint32 bits = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 27, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.bits_)}},
    // optional uint32 offsets = 26;
    {::_pbi::TcParser::FastV32S2,
     {464, 28, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.offsets_)}},
    // optional uint32 reflection = 27;
    {::_pbi::TcParser::FastV32S2,
     {472, 29, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.reflection_)}},
    // optional string some_cord = 28 [ctype = CORD];
    {::_pbi::TcParser::FastScS2,
     {482, 2, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.some_cord_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 int = 30;
    {::_pbi::TcParser::FastV32S2,
     {496, 30, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.int__)}},
    // optional uint32 friend = 31;
    {::_pbi::TcParser::FastV32S2,
     {504, 31, 0, PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.friend__)}},
  }}, {{
    33, 0, 1,
    57344, 32,
    65535, 65535
  }}, {{
    // optional int32 input = 1;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.input_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 output = 2;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.output_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string length = 3;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.length_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // repeated int32 i = 4;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.i_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kInt32)},
    // repeated string new_element = 5 [ctype = STRING_PIECE];
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.new_element_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
    // optional int32 total_size = 6;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.total_size_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 tag = 7;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.tag_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 source = 8;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.source_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 value = 9;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.value_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 file = 10;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.file_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 from = 11;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.from_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 handle_uninterpreted = 12;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.handle_uninterpreted_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated int32 index = 13;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.index_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kInt32)},
    // optional int32 controller = 14;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.controller_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 already_here = 15;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.already_here_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 uint32 = 16;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.uint32_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 uint64 = 17;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.uint64_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string string = 18;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.string_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 memset = 19;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.memset_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 int32 = 20;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.int32_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int64 int64 = 21;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.int64_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional uint32 cached_size = 22;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.cached_size_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 extensions = 23;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.extensions_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 bit = 24;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.bit_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 bits = 25;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.bits_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 offsets = 26;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.offsets_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 reflection = 27;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.reflection_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string some_cord = 28 [ctype = CORD];
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.some_cord_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string some_string_piece = 29 [ctype = STRING_PIECE];
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.some_string_piece_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 int = 30;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.int__), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 friend = 31;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.friend__), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.do__), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 field_type = 33;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.field_type_), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool is_packed = 34;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.is_packed_), _Internal::kHasBitsOffset + 33, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string release_length = 35;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.release_length_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .protobuf_unittest.TestConflictingSymbolNames.DO release_do = 36;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.release_do_), _Internal::kHasBitsOffset + 7, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 class = 37;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.class__), _Internal::kHasBitsOffset + 34, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string target = 38;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.target_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 typedecl = 39;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.typedecl_), _Internal::kHasBitsOffset + 35, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 auto = 40;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.auto__), _Internal::kHasBitsOffset + 36, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 uint32_t = 41;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.uint32_t_), _Internal::kHasBitsOffset + 37, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 uint64_t = 42;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.uint64_t_), _Internal::kHasBitsOffset + 38, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 int32_t = 43;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.int32_t_), _Internal::kHasBitsOffset + 39, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int64 int64_t = 44;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.int64_t_), _Internal::kHasBitsOffset + 40, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int64 size_t = 45;
    {PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.size_t_), _Internal::kHasBitsOffset + 41, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_DO>()},
    {::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNames_DO>()},
  }}, {{
    "\54\0\0\6\0\13\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\0\0\0\0\0\0\11\21\0\0\0\0\0\16\0\0\6\0\0\0\0\0\0\0\0\0"
    "protobuf_unittest.TestConflictingSymbolNames"
    "length"
    "new_element"
    "string"
    "some_cord"
    "some_string_piece"
    "release_length"
    "target"
  }},
};

PROTOBUF_NOINLINE void TestConflictingSymbolNames::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _impl_.i_.Clear();
  _impl_.new_element_.Clear();
  _impl_.index_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.length_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.some_cord_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.some_string_piece_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.release_length_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.target_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.do__ != nullptr);
      _impl_.do__->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.release_do_ != nullptr);
      _impl_.release_do_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.input_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.from_) -
        reinterpret_cast<char*>(&_impl_.input_)) + sizeof(_impl_.from_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.handle_uninterpreted_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.int64_) -
        reinterpret_cast<char*>(&_impl_.handle_uninterpreted_)) + sizeof(_impl_.int64_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.cached_size_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.friend__) -
        reinterpret_cast<char*>(&_impl_.cached_size_)) + sizeof(_impl_.friend__));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.field_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.int32_t_) -
        reinterpret_cast<char*>(&_impl_.field_type_)) + sizeof(_impl_.int32_t_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.int64_t_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.size_t_) -
        reinterpret_cast<char*>(&_impl_.int64_t_)) + sizeof(_impl_.size_t_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestConflictingSymbolNames::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestConflictingSymbolNames& this_ = static_cast<const TestConflictingSymbolNames&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestConflictingSymbolNames::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestConflictingSymbolNames& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional int32 input = 1;
          if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_input(), target);
          }

          // optional int32 output = 2;
          if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_output(), target);
          }

          // optional string length = 3;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_length();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "protobuf_unittest.TestConflictingSymbolNames.length");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // repeated int32 i = 4;
          for (int i = 0, n = this_._internal_i_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                4, this_._internal_i().Get(i), target);
          }

          // repeated string new_element = 5 [ctype = STRING_PIECE];
          for (int i = 0, n = this_._internal_new_element_size(); i < n; ++i) {
            const auto& s = this_._internal_new_element().Get(i);
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "protobuf_unittest.TestConflictingSymbolNames.new_element");
            target = stream->WriteString(5, s, target);
          }

          // optional int32 total_size = 6;
          if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_total_size(), target);
          }

          // optional int32 tag = 7;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_tag(), target);
          }

          // optional int32 source = 8;
          if (cached_has_bits & 0x00001000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_source(), target);
          }

          // optional int32 value = 9;
          if (cached_has_bits & 0x00002000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_value(), target);
          }

          // optional int32 file = 10;
          if (cached_has_bits & 0x00004000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_file(), target);
          }

          // optional int32 from = 11;
          if (cached_has_bits & 0x00008000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<11>(
                    stream, this_._internal_from(), target);
          }

          // optional int32 handle_uninterpreted = 12;
          if (cached_has_bits & 0x00010000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<12>(
                    stream, this_._internal_handle_uninterpreted(), target);
          }

          // repeated int32 index = 13;
          for (int i = 0, n = this_._internal_index_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                13, this_._internal_index().Get(i), target);
          }

          // optional int32 controller = 14;
          if (cached_has_bits & 0x00020000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<14>(
                    stream, this_._internal_controller(), target);
          }

          // optional int32 already_here = 15;
          if (cached_has_bits & 0x00040000u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<15>(
                    stream, this_._internal_already_here(), target);
          }

          // optional uint32 uint32 = 16;
          if (cached_has_bits & 0x00080000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                16, this_._internal_uint32(), target);
          }

          // optional uint64 uint64 = 17;
          if (cached_has_bits & 0x00100000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                17, this_._internal_uint64(), target);
          }

          // optional string string = 18;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_string();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "protobuf_unittest.TestConflictingSymbolNames.string");
            target = stream->WriteStringMaybeAliased(18, _s, target);
          }

          // optional int32 memset = 19;
          if (cached_has_bits & 0x00200000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                19, this_._internal_memset(), target);
          }

          // optional int32 int32 = 20;
          if (cached_has_bits & 0x00400000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                20, this_._internal_int32(), target);
          }

          // optional int64 int64 = 21;
          if (cached_has_bits & 0x00800000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                21, this_._internal_int64(), target);
          }

          // optional uint32 cached_size = 22;
          if (cached_has_bits & 0x01000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                22, this_._internal_cached_size(), target);
          }

          // optional uint32 extensions = 23;
          if (cached_has_bits & 0x02000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                23, this_._internal_extensions(), target);
          }

          // optional uint32 bit = 24;
          if (cached_has_bits & 0x04000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                24, this_._internal_bit(), target);
          }

          // optional uint32 bits = 25;
          if (cached_has_bits & 0x08000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                25, this_._internal_bits(), target);
          }

          // optional uint32 offsets = 26;
          if (cached_has_bits & 0x10000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                26, this_._internal_offsets(), target);
          }

          // optional uint32 reflection = 27;
          if (cached_has_bits & 0x20000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                27, this_._internal_reflection(), target);
          }

          // optional string some_cord = 28 [ctype = CORD];
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_some_cord();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "protobuf_unittest.TestConflictingSymbolNames.some_cord");
            target = stream->WriteStringMaybeAliased(28, _s, target);
          }

          // optional string some_string_piece = 29 [ctype = STRING_PIECE];
          if (cached_has_bits & 0x00000008u) {
            const std::string& _s = this_._internal_some_string_piece();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "protobuf_unittest.TestConflictingSymbolNames.some_string_piece");
            target = stream->WriteStringMaybeAliased(29, _s, target);
          }

          // optional uint32 int = 30;
          if (cached_has_bits & 0x40000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                30, this_._internal_int_(), target);
          }

          // optional uint32 friend = 31;
          if (cached_has_bits & 0x80000000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                31, this_._internal_friend_(), target);
          }

          // optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                32, *this_._impl_.do__, this_._impl_.do__->GetCachedSize(), target,
                stream);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional int32 field_type = 33;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                33, this_._internal_field_type(), target);
          }

          // optional bool is_packed = 34;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                34, this_._internal_is_packed(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string release_length = 35;
          if (cached_has_bits & 0x00000010u) {
            const std::string& _s = this_._internal_release_length();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "protobuf_unittest.TestConflictingSymbolNames.release_length");
            target = stream->WriteStringMaybeAliased(35, _s, target);
          }

          // optional .protobuf_unittest.TestConflictingSymbolNames.DO release_do = 36;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                36, *this_._impl_.release_do_, this_._impl_.release_do_->GetCachedSize(), target,
                stream);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional uint32 class = 37;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                37, this_._internal_class_(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string target = 38;
          if (cached_has_bits & 0x00000020u) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "protobuf_unittest.TestConflictingSymbolNames.target");
            target = stream->WriteStringMaybeAliased(38, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[1];
          // optional uint32 typedecl = 39;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                39, this_._internal_typedecl(), target);
          }

          // optional uint32 auto = 40;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                40, this_._internal_auto_(), target);
          }

          // optional uint32 uint32_t = 41;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                41, this_._internal_uint32_t(), target);
          }

          // optional uint32 uint64_t = 42;
          if (cached_has_bits & 0x00000040u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                42, this_._internal_uint64_t(), target);
          }

          // optional int32 int32_t = 43;
          if (cached_has_bits & 0x00000080u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                43, this_._internal_int32_t(), target);
          }

          // optional int64 int64_t = 44;
          if (cached_has_bits & 0x00000100u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                44, this_._internal_int64_t(), target);
          }

          // optional int64 size_t = 45;
          if (cached_has_bits & 0x00000200u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                45, this_._internal_size_t(), target);
          }

          // Extension range [1000, 536870912)
          target = this_._impl_._extensions_._InternalSerialize(
              internal_default_instance(), 1000, 536870912, target, stream);
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestConflictingSymbolNames::ByteSizeLong(const MessageLite& base) {
          const TestConflictingSymbolNames& this_ = static_cast<const TestConflictingSymbolNames&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestConflictingSymbolNames::ByteSizeLong() const {
          const TestConflictingSymbolNames& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames)
          ::size_t total_size = 0;
          total_size += this_._impl_._extensions_.ByteSize();

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated int32 i = 4;
             {
              std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
                  this_._internal_i());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_i_size());
              total_size += tag_size + data_size;
            }
            // repeated string new_element = 5 [ctype = STRING_PIECE];
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_new_element().size());
              for (int i = 0, n = this_._internal_new_element().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_new_element().Get(i));
              }
            }
            // repeated int32 index = 13;
             {
              std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
                  this_._internal_index());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_index_size());
              total_size += tag_size + data_size;
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // optional string length = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_length());
            }
            // optional string string = 18;
            if (cached_has_bits & 0x00000002u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_string());
            }
            // optional string some_cord = 28 [ctype = CORD];
            if (cached_has_bits & 0x00000004u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_some_cord());
            }
            // optional string some_string_piece = 29 [ctype = STRING_PIECE];
            if (cached_has_bits & 0x00000008u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_some_string_piece());
            }
            // optional string release_length = 35;
            if (cached_has_bits & 0x00000010u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_release_length());
            }
            // optional string target = 38;
            if (cached_has_bits & 0x00000020u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
            // optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.do__);
            }
            // optional .protobuf_unittest.TestConflictingSymbolNames.DO release_do = 36;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.release_do_);
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // optional int32 input = 1;
            if (cached_has_bits & 0x00000100u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_input());
            }
            // optional int32 output = 2;
            if (cached_has_bits & 0x00000200u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_output());
            }
            // optional int32 total_size = 6;
            if (cached_has_bits & 0x00000400u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_size());
            }
            // optional int32 tag = 7;
            if (cached_has_bits & 0x00000800u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_tag());
            }
            // optional int32 source = 8;
            if (cached_has_bits & 0x00001000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_source());
            }
            // optional int32 value = 9;
            if (cached_has_bits & 0x00002000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_value());
            }
            // optional int32 file = 10;
            if (cached_has_bits & 0x00004000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_file());
            }
            // optional int32 from = 11;
            if (cached_has_bits & 0x00008000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_from());
            }
          }
          if (cached_has_bits & 0x00ff0000u) {
            // optional int32 handle_uninterpreted = 12;
            if (cached_has_bits & 0x00010000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_handle_uninterpreted());
            }
            // optional int32 controller = 14;
            if (cached_has_bits & 0x00020000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_controller());
            }
            // optional int32 already_here = 15;
            if (cached_has_bits & 0x00040000u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_already_here());
            }
            // optional uint32 uint32 = 16;
            if (cached_has_bits & 0x00080000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_uint32());
            }
            // optional uint64 uint64 = 17;
            if (cached_has_bits & 0x00100000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                              this_._internal_uint64());
            }
            // optional int32 memset = 19;
            if (cached_has_bits & 0x00200000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_memset());
            }
            // optional int32 int32 = 20;
            if (cached_has_bits & 0x00400000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_int32());
            }
            // optional int64 int64 = 21;
            if (cached_has_bits & 0x00800000u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_int64());
            }
          }
          if (cached_has_bits & 0xff000000u) {
            // optional uint32 cached_size = 22;
            if (cached_has_bits & 0x01000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_cached_size());
            }
            // optional uint32 extensions = 23;
            if (cached_has_bits & 0x02000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_extensions());
            }
            // optional uint32 bit = 24;
            if (cached_has_bits & 0x04000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_bit());
            }
            // optional uint32 bits = 25;
            if (cached_has_bits & 0x08000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_bits());
            }
            // optional uint32 offsets = 26;
            if (cached_has_bits & 0x10000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_offsets());
            }
            // optional uint32 reflection = 27;
            if (cached_has_bits & 0x20000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_reflection());
            }
            // optional uint32 int = 30;
            if (cached_has_bits & 0x40000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_int_());
            }
            // optional uint32 friend = 31;
            if (cached_has_bits & 0x80000000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_friend_());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[1];
          if (cached_has_bits & 0x000000ffu) {
            // optional int32 field_type = 33;
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_field_type());
            }
            // optional bool is_packed = 34;
            if (cached_has_bits & 0x00000002u) {
              total_size += 3;
            }
            // optional uint32 class = 37;
            if (cached_has_bits & 0x00000004u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_class_());
            }
            // optional uint32 typedecl = 39;
            if (cached_has_bits & 0x00000008u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_typedecl());
            }
            // optional uint32 auto = 40;
            if (cached_has_bits & 0x00000010u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_auto_());
            }
            // optional uint32 uint32_t = 41;
            if (cached_has_bits & 0x00000020u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_uint32_t());
            }
            // optional uint32 uint64_t = 42;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_uint64_t());
            }
            // optional int32 int32_t = 43;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_int32_t());
            }
          }
          if (cached_has_bits & 0x00000300u) {
            // optional int64 int64_t = 44;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_int64_t());
            }
            // optional int64 size_t = 45;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_size_t());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestConflictingSymbolNames::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_i()->MergeFrom(from._internal_i());
  _this->_internal_mutable_new_element()->MergeFrom(from._internal_new_element());
  _this->_internal_mutable_index()->MergeFrom(from._internal_index());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_length(from._internal_length());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_some_cord(from._internal_some_cord());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_some_string_piece(from._internal_some_string_piece());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_release_length(from._internal_release_length());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_target(from._internal_target());
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.do__ != nullptr);
      if (_this->_impl_.do__ == nullptr) {
        _this->_impl_.do__ =
            ::google::protobuf::Message::CopyConstruct<::protobuf_unittest::TestConflictingSymbolNames_DO>(arena, *from._impl_.do__);
      } else {
        _this->_impl_.do__->MergeFrom(*from._impl_.do__);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.release_do_ != nullptr);
      if (_this->_impl_.release_do_ == nullptr) {
        _this->_impl_.release_do_ =
            ::google::protobuf::Message::CopyConstruct<::protobuf_unittest::TestConflictingSymbolNames_DO>(arena, *from._impl_.release_do_);
      } else {
        _this->_impl_.release_do_->MergeFrom(*from._impl_.release_do_);
      }
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.input_ = from._impl_.input_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.output_ = from._impl_.output_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.total_size_ = from._impl_.total_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tag_ = from._impl_.tag_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.source_ = from._impl_.source_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.file_ = from._impl_.file_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.from_ = from._impl_.from_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.handle_uninterpreted_ = from._impl_.handle_uninterpreted_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.controller_ = from._impl_.controller_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.already_here_ = from._impl_.already_here_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.uint32_ = from._impl_.uint32_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.uint64_ = from._impl_.uint64_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.memset_ = from._impl_.memset_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.int32_ = from._impl_.int32_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.int64_ = from._impl_.int64_;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.cached_size_ = from._impl_.cached_size_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.extensions_ = from._impl_.extensions_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.bit_ = from._impl_.bit_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.bits_ = from._impl_.bits_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.offsets_ = from._impl_.offsets_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.reflection_ = from._impl_.reflection_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.int__ = from._impl_.int__;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.friend__ = from._impl_.friend__;
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_type_ = from._impl_.field_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_packed_ = from._impl_.is_packed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.class__ = from._impl_.class__;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.typedecl_ = from._impl_.typedecl_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.auto__ = from._impl_.auto__;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.uint32_t_ = from._impl_.uint32_t_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.uint64_t_ = from._impl_.uint64_t_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.int32_t_ = from._impl_.int32_t_;
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.int64_t_ = from._impl_.int64_t_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.size_t_ = from._impl_.size_t_;
    }
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames::CopyFrom(const TestConflictingSymbolNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestConflictingSymbolNames::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const TestConflictingSymbolNames&>(msg);
  if (!this_._impl_._extensions_.IsInitialized(
          internal_default_instance())) {
    return false;
  }
  return true;
}

void TestConflictingSymbolNames::InternalSwap(TestConflictingSymbolNames* PROTOBUF_RESTRICT other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.i_.InternalSwap(&other->_impl_.i_);
  _impl_.new_element_.InternalSwap(&other->_impl_.new_element_);
  _impl_.index_.InternalSwap(&other->_impl_.index_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.length_, &other->_impl_.length_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.string_, &other->_impl_.string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.some_cord_, &other->_impl_.some_cord_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.some_string_piece_, &other->_impl_.some_string_piece_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.release_length_, &other->_impl_.release_length_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.size_t_)
      + sizeof(TestConflictingSymbolNames::_impl_.size_t_)
      - PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.do__)>(
          reinterpret_cast<char*>(&_impl_.do__),
          reinterpret_cast<char*>(&other->_impl_.do__));
}

::google::protobuf::Metadata TestConflictingSymbolNames::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestConflictingSymbolNamesExtension::_Internal {
 public:
};

TestConflictingSymbolNamesExtension::TestConflictingSymbolNamesExtension(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNamesExtension)
}
TestConflictingSymbolNamesExtension::TestConflictingSymbolNamesExtension(
    ::google::protobuf::Arena* arena,
    const TestConflictingSymbolNamesExtension& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestConflictingSymbolNamesExtension* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNamesExtension)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingSymbolNamesExtension::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_TestConflictingSymbolNamesExtension_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestConflictingSymbolNamesExtension::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<TestConflictingSymbolNamesExtension>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<TestConflictingSymbolNamesExtension>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<TestConflictingSymbolNamesExtension>(), &TestConflictingSymbolNamesExtension::ByteSizeLong,
                &TestConflictingSymbolNamesExtension::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNamesExtension, _impl_._cached_size_),
            false,
        },
        &TestConflictingSymbolNamesExtension::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingSymbolNamesExtension::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> TestConflictingSymbolNamesExtension::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingSymbolNamesExtension>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata TestConflictingSymbolNamesExtension::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestConflictingEnumNames::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TestConflictingEnumNames>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TestConflictingEnumNames, _impl_._has_bits_);
};

TestConflictingEnumNames::TestConflictingEnumNames(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingEnumNames)
}
TestConflictingEnumNames::TestConflictingEnumNames(
    ::google::protobuf::Arena* arena, const TestConflictingEnumNames& from)
    : TestConflictingEnumNames(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TestConflictingEnumNames::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TestConflictingEnumNames::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.conflicting_enum_ = {};
}
TestConflictingEnumNames::~TestConflictingEnumNames() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingEnumNames)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestConflictingEnumNames::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TestConflictingEnumNames::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TestConflictingEnumNames_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TestConflictingEnumNames::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TestConflictingEnumNames>(),
            ::google::protobuf::Message::GetNewImpl<TestConflictingEnumNames>(),
            ::google::protobuf::Message::GetClearImpl<TestConflictingEnumNames>(), &TestConflictingEnumNames::ByteSizeLong,
                &TestConflictingEnumNames::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TestConflictingEnumNames, _impl_._cached_size_),
            false,
        },
        &TestConflictingEnumNames::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TestConflictingEnumNames::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestConflictingEnumNames::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestConflictingEnumNames, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TestConflictingEnumNames>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .protobuf_unittest.TestConflictingEnumNames.while conflicting_enum = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 5, PROTOBUF_FIELD_OFFSET(TestConflictingEnumNames, _impl_.conflicting_enum_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .protobuf_unittest.TestConflictingEnumNames.while conflicting_enum = 1;
    {PROTOBUF_FIELD_OFFSET(TestConflictingEnumNames, _impl_.conflicting_enum_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 6},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TestConflictingEnumNames::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingEnumNames)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conflicting_enum_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestConflictingEnumNames::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestConflictingEnumNames& this_ = static_cast<const TestConflictingEnumNames&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestConflictingEnumNames::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestConflictingEnumNames& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingEnumNames)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .protobuf_unittest.TestConflictingEnumNames.while conflicting_enum = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_conflicting_enum(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingEnumNames)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestConflictingEnumNames::ByteSizeLong(const MessageLite& base) {
          const TestConflictingEnumNames& this_ = static_cast<const TestConflictingEnumNames&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestConflictingEnumNames::ByteSizeLong() const {
          const TestConflictingEnumNames& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingEnumNames)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // optional .protobuf_unittest.TestConflictingEnumNames.while conflicting_enum = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_conflicting_enum());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestConflictingEnumNames::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestConflictingEnumNames*>(&to_msg);
  auto& from = static_cast<const TestConflictingEnumNames&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingEnumNames)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.conflicting_enum_ = from._impl_.conflicting_enum_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingEnumNames::CopyFrom(const TestConflictingEnumNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingEnumNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestConflictingEnumNames::InternalSwap(TestConflictingEnumNames* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.conflicting_enum_, other->_impl_.conflicting_enum_);
}

::google::protobuf::Metadata TestConflictingEnumNames::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DummyMessage::_Internal {
 public:
};

DummyMessage::DummyMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.DummyMessage)
}
DummyMessage::DummyMessage(
    ::google::protobuf::Arena* arena,
    const DummyMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DummyMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.DummyMessage)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DummyMessage::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_DummyMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DummyMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<DummyMessage>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<DummyMessage>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<DummyMessage>(), &DummyMessage::ByteSizeLong,
                &DummyMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DummyMessage, _impl_._cached_size_),
            false,
        },
        &DummyMessage::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DummyMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> DummyMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::DummyMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata DummyMessage::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NULL_::_Internal {
 public:
  using HasBits =
      decltype(std::declval<NULL_>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(NULL_, _impl_._has_bits_);
};

NULL_::NULL_(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.NULL)
}
NULL_::NULL_(
    ::google::protobuf::Arena* arena, const NULL_& from)
    : NULL_(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE NULL_::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void NULL_::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.int__ = {};
}
NULL_::~NULL_() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.NULL)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NULL_::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    NULL_::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_NULL__default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &NULL_::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<NULL_>(),
            ::google::protobuf::Message::GetNewImpl<NULL_>(),
            ::google::protobuf::Message::GetClearImpl<NULL_>(), &NULL_::ByteSizeLong,
                &NULL_::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(NULL_, _impl_._cached_size_),
            false,
        },
        &NULL_::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* NULL_::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> NULL_::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NULL_, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::NULL_>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional int32 int = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NULL_, _impl_.int__), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(NULL_, _impl_.int__)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 int = 1;
    {PROTOBUF_FIELD_OFFSET(NULL_, _impl_.int__), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void NULL_::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.NULL)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.int__ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* NULL_::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const NULL_& this_ = static_cast<const NULL_&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* NULL_::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const NULL_& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.NULL)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional int32 int = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_int_(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.NULL)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t NULL_::ByteSizeLong(const MessageLite& base) {
          const NULL_& this_ = static_cast<const NULL_&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t NULL_::ByteSizeLong() const {
          const NULL_& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.NULL)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // optional int32 int = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_int_());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void NULL_::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NULL_*>(&to_msg);
  auto& from = static_cast<const NULL_&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.NULL)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.int__ = from._impl_.int__;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NULL_::CopyFrom(const NULL_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.NULL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NULL_::InternalSwap(NULL_* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.int__, other->_impl_.int__);
}

::google::protobuf::Metadata NULL_::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Shutdown::_Internal {
 public:
};

Shutdown::Shutdown(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.Shutdown)
}
Shutdown::Shutdown(
    ::google::protobuf::Arena* arena,
    const Shutdown& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Shutdown* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.Shutdown)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Shutdown::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Shutdown_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Shutdown::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Shutdown>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Shutdown>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Shutdown>(), &Shutdown::ByteSizeLong,
                &Shutdown::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Shutdown, _impl_._cached_size_),
            false,
        },
        &Shutdown::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Shutdown::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Shutdown::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::Shutdown>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Shutdown::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TableStruct::_Internal {
 public:
};

TableStruct::TableStruct(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TableStruct)
}
TableStruct::TableStruct(
    ::google::protobuf::Arena* arena,
    const TableStruct& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TableStruct* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TableStruct)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TableStruct::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_TableStruct_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TableStruct::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<TableStruct>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<TableStruct>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<TableStruct>(), &TableStruct::ByteSizeLong,
                &TableStruct::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TableStruct, _impl_._cached_size_),
            false,
        },
        &TableStruct::kDescriptorMethods,
        &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TableStruct::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> TableStruct::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protobuf_unittest::TableStruct>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata TableStruct::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

const ::google::protobuf::ServiceDescriptor* TestConflictingMethodNames::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto);
  return file_level_service_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* TestConflictingMethodNames::GetDescriptor() {
  return descriptor();
}

void TestConflictingMethodNames::Closure(::google::protobuf::RpcController* controller,
                         const ::protobuf_unittest::DummyMessage*, ::protobuf_unittest::DummyMessage*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Closure() not implemented.");
  done->Run();
}

void TestConflictingMethodNames::CallMethod(
    const ::google::protobuf::MethodDescriptor* method,
    ::google::protobuf::RpcController* controller,
    const ::google::protobuf::Message* request,
    ::google::protobuf::Message* response, ::google::protobuf::Closure* done) {
  ABSL_DCHECK_EQ(method->service(), file_level_service_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[0]);
  switch (method->index()) {
    case 0:
      Closure(controller, ::google::protobuf::DownCastMessage<::protobuf_unittest::DummyMessage>(request),
             ::google::protobuf::DownCastMessage<::protobuf_unittest::DummyMessage>(response), done);
      break;

    default:
      ABSL_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TestConflictingMethodNames::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  ABSL_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::protobuf_unittest::DummyMessage::default_instance();

    default:
      ABSL_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
                  ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& TestConflictingMethodNames::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  ABSL_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::protobuf_unittest::DummyMessage::default_instance();

    default:
      ABSL_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
                  ->GetPrototype(method->output_type());
  }
}

TestConflictingMethodNames_Stub::TestConflictingMethodNames_Stub(::google::protobuf::RpcChannel* channel)
    : channel_(channel), owns_channel_(false) {}

TestConflictingMethodNames_Stub::TestConflictingMethodNames_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
    : channel_(channel),
      owns_channel_(ownership ==
                    ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}

TestConflictingMethodNames_Stub::~TestConflictingMethodNames_Stub() {
  if (owns_channel_) delete channel_;
}

void TestConflictingMethodNames_Stub::Closure(::google::protobuf::RpcController* controller,
                              const ::protobuf_unittest::DummyMessage* request,
                              ::protobuf_unittest::DummyMessage* response, ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0), controller,
                       request, response, done);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
               const int TestConflictingSymbolNamesExtension::kRepeatedInt32ExtFieldNumber;
#endif
PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::_pbi::
        ExtensionIdentifier<::protobuf_unittest::TestConflictingSymbolNames, ::_pbi::RepeatedPrimitiveTypeTraits< ::int32_t >,
                            5, true>
            TestConflictingSymbolNamesExtension::repeated_int32_ext(kRepeatedInt32ExtFieldNumber, 0);
PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::_pbi::
        ExtensionIdentifier<::protobuf_unittest::TestConflictingSymbolNames, ::_pbi::PrimitiveTypeTraits< ::int32_t >,
                            5, false>
            void_(kVoidFieldNumber, 0);
// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto),
        ::_pbi::ExtensionSet::RegisterExtension(
            &::protobuf_unittest::TestConflictingSymbolNames::default_instance(), 20423638, 5,
            true, true),
        ::_pbi::ExtensionSet::RegisterExtension(
            &::protobuf_unittest::TestConflictingSymbolNames::default_instance(), 314253, 5,
            false, false),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
