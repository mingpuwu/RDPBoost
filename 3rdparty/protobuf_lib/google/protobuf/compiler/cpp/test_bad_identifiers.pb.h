// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/protobuf/compiler/cpp/test_bad_identifiers.proto
// Protobuf C++ Version: 5.29.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/service.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
namespace protobuf_unittest {
class DummyMessage;
struct DummyMessageDefaultTypeInternal;
extern DummyMessageDefaultTypeInternal _DummyMessage_default_instance_;
class NULL_;
struct NULL_DefaultTypeInternal;
extern NULL_DefaultTypeInternal _NULL__default_instance_;
class Shutdown;
struct ShutdownDefaultTypeInternal;
extern ShutdownDefaultTypeInternal _Shutdown_default_instance_;
class TableStruct;
struct TableStructDefaultTypeInternal;
extern TableStructDefaultTypeInternal _TableStruct_default_instance_;
class TestConflictingEnumNames;
struct TestConflictingEnumNamesDefaultTypeInternal;
extern TestConflictingEnumNamesDefaultTypeInternal _TestConflictingEnumNames_default_instance_;
class TestConflictingSymbolNames;
struct TestConflictingSymbolNamesDefaultTypeInternal;
extern TestConflictingSymbolNamesDefaultTypeInternal _TestConflictingSymbolNames_default_instance_;
class TestConflictingSymbolNamesExtension;
struct TestConflictingSymbolNamesExtensionDefaultTypeInternal;
extern TestConflictingSymbolNamesExtensionDefaultTypeInternal _TestConflictingSymbolNamesExtension_default_instance_;
class TestConflictingSymbolNames_BuildDescriptors;
struct TestConflictingSymbolNames_BuildDescriptorsDefaultTypeInternal;
extern TestConflictingSymbolNames_BuildDescriptorsDefaultTypeInternal _TestConflictingSymbolNames_BuildDescriptors_default_instance_;
class TestConflictingSymbolNames_Cord;
struct TestConflictingSymbolNames_CordDefaultTypeInternal;
extern TestConflictingSymbolNames_CordDefaultTypeInternal _TestConflictingSymbolNames_Cord_default_instance_;
class TestConflictingSymbolNames_DO;
struct TestConflictingSymbolNames_DODefaultTypeInternal;
extern TestConflictingSymbolNames_DODefaultTypeInternal _TestConflictingSymbolNames_DO_default_instance_;
class TestConflictingSymbolNames_Data1;
struct TestConflictingSymbolNames_Data1DefaultTypeInternal;
extern TestConflictingSymbolNames_Data1DefaultTypeInternal _TestConflictingSymbolNames_Data1_default_instance_;
class TestConflictingSymbolNames_Data2;
struct TestConflictingSymbolNames_Data2DefaultTypeInternal;
extern TestConflictingSymbolNames_Data2DefaultTypeInternal _TestConflictingSymbolNames_Data2_default_instance_;
class TestConflictingSymbolNames_Data3;
struct TestConflictingSymbolNames_Data3DefaultTypeInternal;
extern TestConflictingSymbolNames_Data3DefaultTypeInternal _TestConflictingSymbolNames_Data3_default_instance_;
class TestConflictingSymbolNames_Data4;
struct TestConflictingSymbolNames_Data4DefaultTypeInternal;
extern TestConflictingSymbolNames_Data4DefaultTypeInternal _TestConflictingSymbolNames_Data4_default_instance_;
class TestConflictingSymbolNames_Data5;
struct TestConflictingSymbolNames_Data5DefaultTypeInternal;
extern TestConflictingSymbolNames_Data5DefaultTypeInternal _TestConflictingSymbolNames_Data5_default_instance_;
class TestConflictingSymbolNames_Data6;
struct TestConflictingSymbolNames_Data6DefaultTypeInternal;
extern TestConflictingSymbolNames_Data6DefaultTypeInternal _TestConflictingSymbolNames_Data6_default_instance_;
class TestConflictingSymbolNames_StringPiece;
struct TestConflictingSymbolNames_StringPieceDefaultTypeInternal;
extern TestConflictingSymbolNames_StringPieceDefaultTypeInternal _TestConflictingSymbolNames_StringPiece_default_instance_;
class TestConflictingSymbolNames_TypeTraits;
struct TestConflictingSymbolNames_TypeTraitsDefaultTypeInternal;
extern TestConflictingSymbolNames_TypeTraitsDefaultTypeInternal _TestConflictingSymbolNames_TypeTraits_default_instance_;
}  // namespace protobuf_unittest
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protobuf_unittest {
enum TestConflictingSymbolNames_TestEnum : int {
  TestConflictingSymbolNames_TestEnum_FOO = 0,
};

bool TestConflictingSymbolNames_TestEnum_IsValid(int value);
extern const uint32_t TestConflictingSymbolNames_TestEnum_internal_data_[];
constexpr TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames_TestEnum_TestEnum_MIN = static_cast<TestConflictingSymbolNames_TestEnum>(0);
constexpr TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames_TestEnum_TestEnum_MAX = static_cast<TestConflictingSymbolNames_TestEnum>(0);
constexpr int TestConflictingSymbolNames_TestEnum_TestEnum_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
TestConflictingSymbolNames_TestEnum_descriptor();
template <typename T>
const std::string& TestConflictingSymbolNames_TestEnum_Name(T value) {
  static_assert(std::is_same<T, TestConflictingSymbolNames_TestEnum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TestEnum_Name().");
  return TestConflictingSymbolNames_TestEnum_Name(static_cast<TestConflictingSymbolNames_TestEnum>(value));
}
template <>
inline const std::string& TestConflictingSymbolNames_TestEnum_Name(TestConflictingSymbolNames_TestEnum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TestConflictingSymbolNames_TestEnum_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool TestConflictingSymbolNames_TestEnum_Parse(absl::string_view name, TestConflictingSymbolNames_TestEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestConflictingSymbolNames_TestEnum>(
      TestConflictingSymbolNames_TestEnum_descriptor(), name, value);
}
enum TestConflictingEnumNames_while : int {
  TestConflictingEnumNames_while_default_ = 0,
  TestConflictingEnumNames_while_and_ = 1,
  TestConflictingEnumNames_while_class_ = 2,
  TestConflictingEnumNames_while_int_ = 3,
  TestConflictingEnumNames_while_typedef_ = 4,
  TestConflictingEnumNames_while_XOR = 5,
};

bool TestConflictingEnumNames_while_IsValid(int value);
extern const uint32_t TestConflictingEnumNames_while_internal_data_[];
constexpr TestConflictingEnumNames_while TestConflictingEnumNames_while_while_MIN = static_cast<TestConflictingEnumNames_while>(0);
constexpr TestConflictingEnumNames_while TestConflictingEnumNames_while_while_MAX = static_cast<TestConflictingEnumNames_while>(5);
constexpr int TestConflictingEnumNames_while_while_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
TestConflictingEnumNames_while_descriptor();
template <typename T>
const std::string& TestConflictingEnumNames_while_Name(T value) {
  static_assert(std::is_same<T, TestConflictingEnumNames_while>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to while_Name().");
  return TestConflictingEnumNames_while_Name(static_cast<TestConflictingEnumNames_while>(value));
}
template <>
inline const std::string& TestConflictingEnumNames_while_Name(TestConflictingEnumNames_while value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TestConflictingEnumNames_while_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool TestConflictingEnumNames_while_Parse(absl::string_view name, TestConflictingEnumNames_while* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestConflictingEnumNames_while>(
      TestConflictingEnumNames_while_descriptor(), name, value);
}
enum bool_ : int {
  default_ = 0,
  NOT_EQ = 1,
  volatile_ = 2,
  return_ = 3,
};

bool bool__IsValid(int value);
extern const uint32_t bool__internal_data_[];
constexpr bool_ bool_MIN = static_cast<bool_>(0);
constexpr bool_ bool_MAX = static_cast<bool_>(3);
constexpr int bool_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
bool__descriptor();
template <typename T>
const std::string& bool__Name(T value) {
  static_assert(std::is_same<T, bool_>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to bool_Name().");
  return bool__Name(static_cast<bool_>(value));
}
template <>
inline const std::string& bool__Name(bool_ value) {
  return ::google::protobuf::internal::NameOfDenseEnum<bool__descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool bool__Parse(absl::string_view name, bool_* value) {
  return ::google::protobuf::internal::ParseNamedEnum<bool_>(
      bool__descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TestConflictingSymbolNamesExtension final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNamesExtension) */ {
 public:
  inline TestConflictingSymbolNamesExtension() : TestConflictingSymbolNamesExtension(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingSymbolNamesExtension(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingSymbolNamesExtension(const TestConflictingSymbolNamesExtension& from) : TestConflictingSymbolNamesExtension(nullptr, from) {}
  inline TestConflictingSymbolNamesExtension(TestConflictingSymbolNamesExtension&& from) noexcept
      : TestConflictingSymbolNamesExtension(nullptr, std::move(from)) {}
  inline TestConflictingSymbolNamesExtension& operator=(const TestConflictingSymbolNamesExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNamesExtension& operator=(TestConflictingSymbolNamesExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingSymbolNamesExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingSymbolNamesExtension* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNamesExtension*>(
        &_TestConflictingSymbolNamesExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(TestConflictingSymbolNamesExtension& a, TestConflictingSymbolNamesExtension& b) { a.Swap(&b); }
  inline void Swap(TestConflictingSymbolNamesExtension* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingSymbolNamesExtension* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingSymbolNamesExtension* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<TestConflictingSymbolNamesExtension>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TestConflictingSymbolNamesExtension& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TestConflictingSymbolNamesExtension& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingSymbolNamesExtension"; }

 protected:
  explicit TestConflictingSymbolNamesExtension(::google::protobuf::Arena* arena);
  TestConflictingSymbolNamesExtension(::google::protobuf::Arena* arena, const TestConflictingSymbolNamesExtension& from);
  TestConflictingSymbolNamesExtension(::google::protobuf::Arena* arena, TestConflictingSymbolNamesExtension&& from) noexcept
      : TestConflictingSymbolNamesExtension(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  static const int kRepeatedInt32ExtFieldNumber = 20423638;
  static ::google::protobuf::internal::ExtensionIdentifier<
      ::protobuf_unittest::TestConflictingSymbolNames, ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::int32_t >, 5,
      true>
      repeated_int32_ext;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNamesExtension)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingSymbolNamesExtension_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingSymbolNamesExtension& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_TypeTraits final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.TypeTraits) */ {
 public:
  inline TestConflictingSymbolNames_TypeTraits() : TestConflictingSymbolNames_TypeTraits(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingSymbolNames_TypeTraits(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingSymbolNames_TypeTraits(const TestConflictingSymbolNames_TypeTraits& from) : TestConflictingSymbolNames_TypeTraits(nullptr, from) {}
  inline TestConflictingSymbolNames_TypeTraits(TestConflictingSymbolNames_TypeTraits&& from) noexcept
      : TestConflictingSymbolNames_TypeTraits(nullptr, std::move(from)) {}
  inline TestConflictingSymbolNames_TypeTraits& operator=(const TestConflictingSymbolNames_TypeTraits& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_TypeTraits& operator=(TestConflictingSymbolNames_TypeTraits&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingSymbolNames_TypeTraits& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingSymbolNames_TypeTraits* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_TypeTraits*>(
        &_TestConflictingSymbolNames_TypeTraits_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TestConflictingSymbolNames_TypeTraits& a, TestConflictingSymbolNames_TypeTraits& b) { a.Swap(&b); }
  inline void Swap(TestConflictingSymbolNames_TypeTraits* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingSymbolNames_TypeTraits* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingSymbolNames_TypeTraits* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<TestConflictingSymbolNames_TypeTraits>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TestConflictingSymbolNames_TypeTraits& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TestConflictingSymbolNames_TypeTraits& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingSymbolNames.TypeTraits"; }

 protected:
  explicit TestConflictingSymbolNames_TypeTraits(::google::protobuf::Arena* arena);
  TestConflictingSymbolNames_TypeTraits(::google::protobuf::Arena* arena, const TestConflictingSymbolNames_TypeTraits& from);
  TestConflictingSymbolNames_TypeTraits(::google::protobuf::Arena* arena, TestConflictingSymbolNames_TypeTraits&& from) noexcept
      : TestConflictingSymbolNames_TypeTraits(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.TypeTraits)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingSymbolNames_TypeTraits_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingSymbolNames_TypeTraits& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_StringPiece final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.StringPiece) */ {
 public:
  inline TestConflictingSymbolNames_StringPiece() : TestConflictingSymbolNames_StringPiece(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingSymbolNames_StringPiece(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingSymbolNames_StringPiece(const TestConflictingSymbolNames_StringPiece& from) : TestConflictingSymbolNames_StringPiece(nullptr, from) {}
  inline TestConflictingSymbolNames_StringPiece(TestConflictingSymbolNames_StringPiece&& from) noexcept
      : TestConflictingSymbolNames_StringPiece(nullptr, std::move(from)) {}
  inline TestConflictingSymbolNames_StringPiece& operator=(const TestConflictingSymbolNames_StringPiece& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_StringPiece& operator=(TestConflictingSymbolNames_StringPiece&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingSymbolNames_StringPiece& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingSymbolNames_StringPiece* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_StringPiece*>(
        &_TestConflictingSymbolNames_StringPiece_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(TestConflictingSymbolNames_StringPiece& a, TestConflictingSymbolNames_StringPiece& b) { a.Swap(&b); }
  inline void Swap(TestConflictingSymbolNames_StringPiece* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingSymbolNames_StringPiece* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingSymbolNames_StringPiece* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<TestConflictingSymbolNames_StringPiece>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TestConflictingSymbolNames_StringPiece& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TestConflictingSymbolNames_StringPiece& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingSymbolNames.StringPiece"; }

 protected:
  explicit TestConflictingSymbolNames_StringPiece(::google::protobuf::Arena* arena);
  TestConflictingSymbolNames_StringPiece(::google::protobuf::Arena* arena, const TestConflictingSymbolNames_StringPiece& from);
  TestConflictingSymbolNames_StringPiece(::google::protobuf::Arena* arena, TestConflictingSymbolNames_StringPiece&& from) noexcept
      : TestConflictingSymbolNames_StringPiece(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.StringPiece)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingSymbolNames_StringPiece_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingSymbolNames_StringPiece& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Data6 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Data6) */ {
 public:
  inline TestConflictingSymbolNames_Data6() : TestConflictingSymbolNames_Data6(nullptr) {}
  ~TestConflictingSymbolNames_Data6() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data6(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingSymbolNames_Data6(const TestConflictingSymbolNames_Data6& from) : TestConflictingSymbolNames_Data6(nullptr, from) {}
  inline TestConflictingSymbolNames_Data6(TestConflictingSymbolNames_Data6&& from) noexcept
      : TestConflictingSymbolNames_Data6(nullptr, std::move(from)) {}
  inline TestConflictingSymbolNames_Data6& operator=(const TestConflictingSymbolNames_Data6& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Data6& operator=(TestConflictingSymbolNames_Data6&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingSymbolNames_Data6& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingSymbolNames_Data6* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Data6*>(
        &_TestConflictingSymbolNames_Data6_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(TestConflictingSymbolNames_Data6& a, TestConflictingSymbolNames_Data6& b) { a.Swap(&b); }
  inline void Swap(TestConflictingSymbolNames_Data6* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingSymbolNames_Data6* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingSymbolNames_Data6* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TestConflictingSymbolNames_Data6>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestConflictingSymbolNames_Data6& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestConflictingSymbolNames_Data6& from) { TestConflictingSymbolNames_Data6::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestConflictingSymbolNames_Data6* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingSymbolNames.Data6"; }

 protected:
  explicit TestConflictingSymbolNames_Data6(::google::protobuf::Arena* arena);
  TestConflictingSymbolNames_Data6(::google::protobuf::Arena* arena, const TestConflictingSymbolNames_Data6& from);
  TestConflictingSymbolNames_Data6(::google::protobuf::Arena* arena, TestConflictingSymbolNames_Data6&& from) noexcept
      : TestConflictingSymbolNames_Data6(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1 [ctype = CORD];
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  private:  // Hidden due to unknown ctype option.
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(int index, Arg_&& value, Args_... args);
  std::string* add_data();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_data(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Data6)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingSymbolNames_Data6_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingSymbolNames_Data6& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Data5 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Data5) */ {
 public:
  inline TestConflictingSymbolNames_Data5() : TestConflictingSymbolNames_Data5(nullptr) {}
  ~TestConflictingSymbolNames_Data5() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data5(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingSymbolNames_Data5(const TestConflictingSymbolNames_Data5& from) : TestConflictingSymbolNames_Data5(nullptr, from) {}
  inline TestConflictingSymbolNames_Data5(TestConflictingSymbolNames_Data5&& from) noexcept
      : TestConflictingSymbolNames_Data5(nullptr, std::move(from)) {}
  inline TestConflictingSymbolNames_Data5& operator=(const TestConflictingSymbolNames_Data5& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Data5& operator=(TestConflictingSymbolNames_Data5&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingSymbolNames_Data5& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingSymbolNames_Data5* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Data5*>(
        &_TestConflictingSymbolNames_Data5_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(TestConflictingSymbolNames_Data5& a, TestConflictingSymbolNames_Data5& b) { a.Swap(&b); }
  inline void Swap(TestConflictingSymbolNames_Data5* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingSymbolNames_Data5* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingSymbolNames_Data5* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TestConflictingSymbolNames_Data5>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestConflictingSymbolNames_Data5& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestConflictingSymbolNames_Data5& from) { TestConflictingSymbolNames_Data5::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestConflictingSymbolNames_Data5* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingSymbolNames.Data5"; }

 protected:
  explicit TestConflictingSymbolNames_Data5(::google::protobuf::Arena* arena);
  TestConflictingSymbolNames_Data5(::google::protobuf::Arena* arena, const TestConflictingSymbolNames_Data5& from);
  TestConflictingSymbolNames_Data5(::google::protobuf::Arena* arena, TestConflictingSymbolNames_Data5&& from) noexcept
      : TestConflictingSymbolNames_Data5(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1 [ctype = STRING_PIECE];
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  private:  // Hidden due to unknown ctype option.
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(int index, Arg_&& value, Args_... args);
  std::string* add_data();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_data(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Data5)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingSymbolNames_Data5_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingSymbolNames_Data5& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Data4 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Data4) */ {
 public:
  inline TestConflictingSymbolNames_Data4() : TestConflictingSymbolNames_Data4(nullptr) {}
  ~TestConflictingSymbolNames_Data4() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data4(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingSymbolNames_Data4(const TestConflictingSymbolNames_Data4& from) : TestConflictingSymbolNames_Data4(nullptr, from) {}
  inline TestConflictingSymbolNames_Data4(TestConflictingSymbolNames_Data4&& from) noexcept
      : TestConflictingSymbolNames_Data4(nullptr, std::move(from)) {}
  inline TestConflictingSymbolNames_Data4& operator=(const TestConflictingSymbolNames_Data4& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Data4& operator=(TestConflictingSymbolNames_Data4&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingSymbolNames_Data4& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingSymbolNames_Data4* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Data4*>(
        &_TestConflictingSymbolNames_Data4_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TestConflictingSymbolNames_Data4& a, TestConflictingSymbolNames_Data4& b) { a.Swap(&b); }
  inline void Swap(TestConflictingSymbolNames_Data4* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingSymbolNames_Data4* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingSymbolNames_Data4* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TestConflictingSymbolNames_Data4>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestConflictingSymbolNames_Data4& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestConflictingSymbolNames_Data4& from) { TestConflictingSymbolNames_Data4::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestConflictingSymbolNames_Data4* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingSymbolNames.Data4"; }

 protected:
  explicit TestConflictingSymbolNames_Data4(::google::protobuf::Arena* arena);
  TestConflictingSymbolNames_Data4(::google::protobuf::Arena* arena, const TestConflictingSymbolNames_Data4& from);
  TestConflictingSymbolNames_Data4(::google::protobuf::Arena* arena, TestConflictingSymbolNames_Data4&& from) noexcept
      : TestConflictingSymbolNames_Data4(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  ::protobuf_unittest::TestConflictingSymbolNames_Data4* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField<::protobuf_unittest::TestConflictingSymbolNames_Data4>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<::protobuf_unittest::TestConflictingSymbolNames_Data4>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<::protobuf_unittest::TestConflictingSymbolNames_Data4>* _internal_mutable_data();
  public:
  const ::protobuf_unittest::TestConflictingSymbolNames_Data4& data(int index) const;
  ::protobuf_unittest::TestConflictingSymbolNames_Data4* add_data();
  const ::google::protobuf::RepeatedPtrField<::protobuf_unittest::TestConflictingSymbolNames_Data4>& data() const;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Data4)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingSymbolNames_Data4_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingSymbolNames_Data4& from_msg);
    ::google::protobuf::RepeatedPtrField< ::protobuf_unittest::TestConflictingSymbolNames_Data4 > data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Data3 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Data3) */ {
 public:
  inline TestConflictingSymbolNames_Data3() : TestConflictingSymbolNames_Data3(nullptr) {}
  ~TestConflictingSymbolNames_Data3() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data3(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingSymbolNames_Data3(const TestConflictingSymbolNames_Data3& from) : TestConflictingSymbolNames_Data3(nullptr, from) {}
  inline TestConflictingSymbolNames_Data3(TestConflictingSymbolNames_Data3&& from) noexcept
      : TestConflictingSymbolNames_Data3(nullptr, std::move(from)) {}
  inline TestConflictingSymbolNames_Data3& operator=(const TestConflictingSymbolNames_Data3& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Data3& operator=(TestConflictingSymbolNames_Data3&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingSymbolNames_Data3& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingSymbolNames_Data3* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Data3*>(
        &_TestConflictingSymbolNames_Data3_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TestConflictingSymbolNames_Data3& a, TestConflictingSymbolNames_Data3& b) { a.Swap(&b); }
  inline void Swap(TestConflictingSymbolNames_Data3* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingSymbolNames_Data3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingSymbolNames_Data3* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TestConflictingSymbolNames_Data3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestConflictingSymbolNames_Data3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestConflictingSymbolNames_Data3& from) { TestConflictingSymbolNames_Data3::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestConflictingSymbolNames_Data3* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingSymbolNames.Data3"; }

 protected:
  explicit TestConflictingSymbolNames_Data3(::google::protobuf::Arena* arena);
  TestConflictingSymbolNames_Data3(::google::protobuf::Arena* arena, const TestConflictingSymbolNames_Data3& from);
  TestConflictingSymbolNames_Data3(::google::protobuf::Arena* arena, TestConflictingSymbolNames_Data3&& from) noexcept
      : TestConflictingSymbolNames_Data3(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(int index, Arg_&& value, Args_... args);
  std::string* add_data();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_data(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Data3)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingSymbolNames_Data3_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingSymbolNames_Data3& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Data2 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Data2) */ {
 public:
  inline TestConflictingSymbolNames_Data2() : TestConflictingSymbolNames_Data2(nullptr) {}
  ~TestConflictingSymbolNames_Data2() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data2(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingSymbolNames_Data2(const TestConflictingSymbolNames_Data2& from) : TestConflictingSymbolNames_Data2(nullptr, from) {}
  inline TestConflictingSymbolNames_Data2(TestConflictingSymbolNames_Data2&& from) noexcept
      : TestConflictingSymbolNames_Data2(nullptr, std::move(from)) {}
  inline TestConflictingSymbolNames_Data2& operator=(const TestConflictingSymbolNames_Data2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Data2& operator=(TestConflictingSymbolNames_Data2&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingSymbolNames_Data2& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingSymbolNames_Data2* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Data2*>(
        &_TestConflictingSymbolNames_Data2_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TestConflictingSymbolNames_Data2& a, TestConflictingSymbolNames_Data2& b) { a.Swap(&b); }
  inline void Swap(TestConflictingSymbolNames_Data2* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingSymbolNames_Data2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingSymbolNames_Data2* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TestConflictingSymbolNames_Data2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestConflictingSymbolNames_Data2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestConflictingSymbolNames_Data2& from) { TestConflictingSymbolNames_Data2::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestConflictingSymbolNames_Data2* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingSymbolNames.Data2"; }

 protected:
  explicit TestConflictingSymbolNames_Data2(::google::protobuf::Arena* arena);
  TestConflictingSymbolNames_Data2(::google::protobuf::Arena* arena, const TestConflictingSymbolNames_Data2& from);
  TestConflictingSymbolNames_Data2(::google::protobuf::Arena* arena, TestConflictingSymbolNames_Data2&& from) noexcept
      : TestConflictingSymbolNames_Data2(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  public:
  ::protobuf_unittest::TestConflictingSymbolNames_TestEnum data(int index) const;
  void set_data(int index, ::protobuf_unittest::TestConflictingSymbolNames_TestEnum value);
  void add_data(::protobuf_unittest::TestConflictingSymbolNames_TestEnum value);
  const ::google::protobuf::RepeatedField<int>& data() const;
  ::google::protobuf::RepeatedField<int>* mutable_data();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_data() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Data2)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingSymbolNames_Data2_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingSymbolNames_Data2& from_msg);
    ::google::protobuf::RepeatedField<int> data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Data1 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Data1) */ {
 public:
  inline TestConflictingSymbolNames_Data1() : TestConflictingSymbolNames_Data1(nullptr) {}
  ~TestConflictingSymbolNames_Data1() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data1(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingSymbolNames_Data1(const TestConflictingSymbolNames_Data1& from) : TestConflictingSymbolNames_Data1(nullptr, from) {}
  inline TestConflictingSymbolNames_Data1(TestConflictingSymbolNames_Data1&& from) noexcept
      : TestConflictingSymbolNames_Data1(nullptr, std::move(from)) {}
  inline TestConflictingSymbolNames_Data1& operator=(const TestConflictingSymbolNames_Data1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Data1& operator=(TestConflictingSymbolNames_Data1&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingSymbolNames_Data1& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingSymbolNames_Data1* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Data1*>(
        &_TestConflictingSymbolNames_Data1_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TestConflictingSymbolNames_Data1& a, TestConflictingSymbolNames_Data1& b) { a.Swap(&b); }
  inline void Swap(TestConflictingSymbolNames_Data1* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingSymbolNames_Data1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingSymbolNames_Data1* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TestConflictingSymbolNames_Data1>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestConflictingSymbolNames_Data1& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestConflictingSymbolNames_Data1& from) { TestConflictingSymbolNames_Data1::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestConflictingSymbolNames_Data1* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingSymbolNames.Data1"; }

 protected:
  explicit TestConflictingSymbolNames_Data1(::google::protobuf::Arena* arena);
  TestConflictingSymbolNames_Data1(::google::protobuf::Arena* arena, const TestConflictingSymbolNames_Data1& from);
  TestConflictingSymbolNames_Data1(::google::protobuf::Arena* arena, TestConflictingSymbolNames_Data1&& from) noexcept
      : TestConflictingSymbolNames_Data1(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated int32 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  ::int32_t data(int index) const;
  void set_data(int index, ::int32_t value);
  void add_data(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& data() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_data();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_data() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Data1)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingSymbolNames_Data1_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingSymbolNames_Data1& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_DO final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.DO) */ {
 public:
  inline TestConflictingSymbolNames_DO() : TestConflictingSymbolNames_DO(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingSymbolNames_DO(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingSymbolNames_DO(const TestConflictingSymbolNames_DO& from) : TestConflictingSymbolNames_DO(nullptr, from) {}
  inline TestConflictingSymbolNames_DO(TestConflictingSymbolNames_DO&& from) noexcept
      : TestConflictingSymbolNames_DO(nullptr, std::move(from)) {}
  inline TestConflictingSymbolNames_DO& operator=(const TestConflictingSymbolNames_DO& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_DO& operator=(TestConflictingSymbolNames_DO&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingSymbolNames_DO& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingSymbolNames_DO* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_DO*>(
        &_TestConflictingSymbolNames_DO_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(TestConflictingSymbolNames_DO& a, TestConflictingSymbolNames_DO& b) { a.Swap(&b); }
  inline void Swap(TestConflictingSymbolNames_DO* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingSymbolNames_DO* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingSymbolNames_DO* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<TestConflictingSymbolNames_DO>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TestConflictingSymbolNames_DO& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TestConflictingSymbolNames_DO& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingSymbolNames.DO"; }

 protected:
  explicit TestConflictingSymbolNames_DO(::google::protobuf::Arena* arena);
  TestConflictingSymbolNames_DO(::google::protobuf::Arena* arena, const TestConflictingSymbolNames_DO& from);
  TestConflictingSymbolNames_DO(::google::protobuf::Arena* arena, TestConflictingSymbolNames_DO&& from) noexcept
      : TestConflictingSymbolNames_DO(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.DO)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingSymbolNames_DO_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingSymbolNames_DO& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Cord final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Cord) */ {
 public:
  inline TestConflictingSymbolNames_Cord() : TestConflictingSymbolNames_Cord(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Cord(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingSymbolNames_Cord(const TestConflictingSymbolNames_Cord& from) : TestConflictingSymbolNames_Cord(nullptr, from) {}
  inline TestConflictingSymbolNames_Cord(TestConflictingSymbolNames_Cord&& from) noexcept
      : TestConflictingSymbolNames_Cord(nullptr, std::move(from)) {}
  inline TestConflictingSymbolNames_Cord& operator=(const TestConflictingSymbolNames_Cord& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Cord& operator=(TestConflictingSymbolNames_Cord&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingSymbolNames_Cord& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingSymbolNames_Cord* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Cord*>(
        &_TestConflictingSymbolNames_Cord_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(TestConflictingSymbolNames_Cord& a, TestConflictingSymbolNames_Cord& b) { a.Swap(&b); }
  inline void Swap(TestConflictingSymbolNames_Cord* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingSymbolNames_Cord* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingSymbolNames_Cord* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<TestConflictingSymbolNames_Cord>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TestConflictingSymbolNames_Cord& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TestConflictingSymbolNames_Cord& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingSymbolNames.Cord"; }

 protected:
  explicit TestConflictingSymbolNames_Cord(::google::protobuf::Arena* arena);
  TestConflictingSymbolNames_Cord(::google::protobuf::Arena* arena, const TestConflictingSymbolNames_Cord& from);
  TestConflictingSymbolNames_Cord(::google::protobuf::Arena* arena, TestConflictingSymbolNames_Cord&& from) noexcept
      : TestConflictingSymbolNames_Cord(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Cord)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingSymbolNames_Cord_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingSymbolNames_Cord& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_BuildDescriptors final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.BuildDescriptors) */ {
 public:
  inline TestConflictingSymbolNames_BuildDescriptors() : TestConflictingSymbolNames_BuildDescriptors(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingSymbolNames_BuildDescriptors(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingSymbolNames_BuildDescriptors(const TestConflictingSymbolNames_BuildDescriptors& from) : TestConflictingSymbolNames_BuildDescriptors(nullptr, from) {}
  inline TestConflictingSymbolNames_BuildDescriptors(TestConflictingSymbolNames_BuildDescriptors&& from) noexcept
      : TestConflictingSymbolNames_BuildDescriptors(nullptr, std::move(from)) {}
  inline TestConflictingSymbolNames_BuildDescriptors& operator=(const TestConflictingSymbolNames_BuildDescriptors& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_BuildDescriptors& operator=(TestConflictingSymbolNames_BuildDescriptors&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingSymbolNames_BuildDescriptors& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingSymbolNames_BuildDescriptors* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_BuildDescriptors*>(
        &_TestConflictingSymbolNames_BuildDescriptors_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TestConflictingSymbolNames_BuildDescriptors& a, TestConflictingSymbolNames_BuildDescriptors& b) { a.Swap(&b); }
  inline void Swap(TestConflictingSymbolNames_BuildDescriptors* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingSymbolNames_BuildDescriptors* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingSymbolNames_BuildDescriptors* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<TestConflictingSymbolNames_BuildDescriptors>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TestConflictingSymbolNames_BuildDescriptors& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TestConflictingSymbolNames_BuildDescriptors& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingSymbolNames.BuildDescriptors"; }

 protected:
  explicit TestConflictingSymbolNames_BuildDescriptors(::google::protobuf::Arena* arena);
  TestConflictingSymbolNames_BuildDescriptors(::google::protobuf::Arena* arena, const TestConflictingSymbolNames_BuildDescriptors& from);
  TestConflictingSymbolNames_BuildDescriptors(::google::protobuf::Arena* arena, TestConflictingSymbolNames_BuildDescriptors&& from) noexcept
      : TestConflictingSymbolNames_BuildDescriptors(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.BuildDescriptors)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingSymbolNames_BuildDescriptors_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingSymbolNames_BuildDescriptors& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingEnumNames final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingEnumNames) */ {
 public:
  inline TestConflictingEnumNames() : TestConflictingEnumNames(nullptr) {}
  ~TestConflictingEnumNames() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingEnumNames(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingEnumNames(const TestConflictingEnumNames& from) : TestConflictingEnumNames(nullptr, from) {}
  inline TestConflictingEnumNames(TestConflictingEnumNames&& from) noexcept
      : TestConflictingEnumNames(nullptr, std::move(from)) {}
  inline TestConflictingEnumNames& operator=(const TestConflictingEnumNames& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingEnumNames& operator=(TestConflictingEnumNames&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingEnumNames& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingEnumNames* internal_default_instance() {
    return reinterpret_cast<const TestConflictingEnumNames*>(
        &_TestConflictingEnumNames_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(TestConflictingEnumNames& a, TestConflictingEnumNames& b) { a.Swap(&b); }
  inline void Swap(TestConflictingEnumNames* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingEnumNames* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingEnumNames* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TestConflictingEnumNames>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestConflictingEnumNames& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestConflictingEnumNames& from) { TestConflictingEnumNames::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestConflictingEnumNames* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingEnumNames"; }

 protected:
  explicit TestConflictingEnumNames(::google::protobuf::Arena* arena);
  TestConflictingEnumNames(::google::protobuf::Arena* arena, const TestConflictingEnumNames& from);
  TestConflictingEnumNames(::google::protobuf::Arena* arena, TestConflictingEnumNames&& from) noexcept
      : TestConflictingEnumNames(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using while_ = TestConflictingEnumNames_while;
  static constexpr while_ default_ = TestConflictingEnumNames_while_default_;
  static constexpr while_ and_ = TestConflictingEnumNames_while_and_;
  static constexpr while_ class_ = TestConflictingEnumNames_while_class_;
  static constexpr while_ int_ = TestConflictingEnumNames_while_int_;
  static constexpr while_ typedef_ = TestConflictingEnumNames_while_typedef_;
  static constexpr while_ XOR = TestConflictingEnumNames_while_XOR;
  static inline bool while_IsValid(int value) {
    return TestConflictingEnumNames_while_IsValid(value);
  }
  static constexpr while_ while_MIN = TestConflictingEnumNames_while_while_MIN;
  static constexpr while_ while_MAX = TestConflictingEnumNames_while_while_MAX;
  static constexpr int while_ARRAYSIZE = TestConflictingEnumNames_while_while_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* while_descriptor() {
    return TestConflictingEnumNames_while_descriptor();
  }
  template <typename T>
  static inline const std::string& while_Name(T value) {
    return TestConflictingEnumNames_while_Name(value);
  }
  static inline bool while_Parse(absl::string_view name, while_* value) {
    return TestConflictingEnumNames_while_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kConflictingEnumFieldNumber = 1,
  };
  // optional .protobuf_unittest.TestConflictingEnumNames.while conflicting_enum = 1;
  bool has_conflicting_enum() const;
  void clear_conflicting_enum() ;
  ::protobuf_unittest::TestConflictingEnumNames_while conflicting_enum() const;
  void set_conflicting_enum(::protobuf_unittest::TestConflictingEnumNames_while value);

  private:
  ::protobuf_unittest::TestConflictingEnumNames_while _internal_conflicting_enum() const;
  void _internal_set_conflicting_enum(::protobuf_unittest::TestConflictingEnumNames_while value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingEnumNames)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingEnumNames_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingEnumNames& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int conflicting_enum_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TableStruct final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TableStruct) */ {
 public:
  inline TableStruct() : TableStruct(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TableStruct(
      ::google::protobuf::internal::ConstantInitialized);

  inline TableStruct(const TableStruct& from) : TableStruct(nullptr, from) {}
  inline TableStruct(TableStruct&& from) noexcept
      : TableStruct(nullptr, std::move(from)) {}
  inline TableStruct& operator=(const TableStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableStruct& operator=(TableStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableStruct* internal_default_instance() {
    return reinterpret_cast<const TableStruct*>(
        &_TableStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(TableStruct& a, TableStruct& b) { a.Swap(&b); }
  inline void Swap(TableStruct* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableStruct* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableStruct* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<TableStruct>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TableStruct& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TableStruct& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TableStruct"; }

 protected:
  explicit TableStruct(::google::protobuf::Arena* arena);
  TableStruct(::google::protobuf::Arena* arena, const TableStruct& from);
  TableStruct(::google::protobuf::Arena* arena, TableStruct&& from) noexcept
      : TableStruct(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TableStruct)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TableStruct_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TableStruct& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class Shutdown final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protobuf_unittest.Shutdown) */ {
 public:
  inline Shutdown() : Shutdown(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Shutdown(
      ::google::protobuf::internal::ConstantInitialized);

  inline Shutdown(const Shutdown& from) : Shutdown(nullptr, from) {}
  inline Shutdown(Shutdown&& from) noexcept
      : Shutdown(nullptr, std::move(from)) {}
  inline Shutdown& operator=(const Shutdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shutdown& operator=(Shutdown&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Shutdown& default_instance() {
    return *internal_default_instance();
  }
  static inline const Shutdown* internal_default_instance() {
    return reinterpret_cast<const Shutdown*>(
        &_Shutdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(Shutdown& a, Shutdown& b) { a.Swap(&b); }
  inline void Swap(Shutdown* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shutdown* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Shutdown* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Shutdown>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Shutdown& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Shutdown& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.Shutdown"; }

 protected:
  explicit Shutdown(::google::protobuf::Arena* arena);
  Shutdown(::google::protobuf::Arena* arena, const Shutdown& from);
  Shutdown(::google::protobuf::Arena* arena, Shutdown&& from) noexcept
      : Shutdown(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:protobuf_unittest.Shutdown)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Shutdown_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Shutdown& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class NULL_ final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_unittest.NULL) */ {
 public:
  inline NULL_() : NULL_(nullptr) {}
  ~NULL_() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NULL_(
      ::google::protobuf::internal::ConstantInitialized);

  inline NULL_(const NULL_& from) : NULL_(nullptr, from) {}
  inline NULL_(NULL_&& from) noexcept
      : NULL_(nullptr, std::move(from)) {}
  inline NULL_& operator=(const NULL_& from) {
    CopyFrom(from);
    return *this;
  }
  inline NULL_& operator=(NULL_&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NULL_& default_instance() {
    return *internal_default_instance();
  }
  static inline const NULL_* internal_default_instance() {
    return reinterpret_cast<const NULL_*>(
        &_NULL__default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(NULL_& a, NULL_& b) { a.Swap(&b); }
  inline void Swap(NULL_* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NULL_* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NULL_* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<NULL_>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NULL_& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NULL_& from) { NULL_::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NULL_* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.NULL"; }

 protected:
  explicit NULL_(::google::protobuf::Arena* arena);
  NULL_(::google::protobuf::Arena* arena, const NULL_& from);
  NULL_(::google::protobuf::Arena* arena, NULL_&& from) noexcept
      : NULL_(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIntFieldNumber = 1,
  };
  // optional int32 int = 1;
  bool has_int_() const;
  void clear_int_() ;
  ::int32_t int_() const;
  void set_int_(::int32_t value);

  private:
  ::int32_t _internal_int_() const;
  void _internal_set_int_(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf_unittest.NULL)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NULL__default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NULL_& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t int__;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class DummyMessage final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protobuf_unittest.DummyMessage) */ {
 public:
  inline DummyMessage() : DummyMessage(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DummyMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline DummyMessage(const DummyMessage& from) : DummyMessage(nullptr, from) {}
  inline DummyMessage(DummyMessage&& from) noexcept
      : DummyMessage(nullptr, std::move(from)) {}
  inline DummyMessage& operator=(const DummyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DummyMessage& operator=(DummyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DummyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DummyMessage* internal_default_instance() {
    return reinterpret_cast<const DummyMessage*>(
        &_DummyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(DummyMessage& a, DummyMessage& b) { a.Swap(&b); }
  inline void Swap(DummyMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DummyMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DummyMessage* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<DummyMessage>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DummyMessage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DummyMessage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.DummyMessage"; }

 protected:
  explicit DummyMessage(::google::protobuf::Arena* arena);
  DummyMessage(::google::protobuf::Arena* arena, const DummyMessage& from);
  DummyMessage(::google::protobuf::Arena* arena, DummyMessage&& from) noexcept
      : DummyMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:protobuf_unittest.DummyMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DummyMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DummyMessage& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames) */ {
 public:
  inline TestConflictingSymbolNames() : TestConflictingSymbolNames(nullptr) {}
  ~TestConflictingSymbolNames() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestConflictingSymbolNames(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestConflictingSymbolNames(const TestConflictingSymbolNames& from) : TestConflictingSymbolNames(nullptr, from) {}
  inline TestConflictingSymbolNames(TestConflictingSymbolNames&& from) noexcept
      : TestConflictingSymbolNames(nullptr, std::move(from)) {}
  inline TestConflictingSymbolNames& operator=(const TestConflictingSymbolNames& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames& operator=(TestConflictingSymbolNames&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestConflictingSymbolNames& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConflictingSymbolNames* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames*>(
        &_TestConflictingSymbolNames_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(TestConflictingSymbolNames& a, TestConflictingSymbolNames& b) { a.Swap(&b); }
  inline void Swap(TestConflictingSymbolNames* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConflictingSymbolNames* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConflictingSymbolNames* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TestConflictingSymbolNames>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestConflictingSymbolNames& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestConflictingSymbolNames& from) { TestConflictingSymbolNames::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestConflictingSymbolNames* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_unittest.TestConflictingSymbolNames"; }

 protected:
  explicit TestConflictingSymbolNames(::google::protobuf::Arena* arena);
  TestConflictingSymbolNames(::google::protobuf::Arena* arena, const TestConflictingSymbolNames& from);
  TestConflictingSymbolNames(::google::protobuf::Arena* arena, TestConflictingSymbolNames&& from) noexcept
      : TestConflictingSymbolNames(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using BuildDescriptors = TestConflictingSymbolNames_BuildDescriptors;
  using TypeTraits = TestConflictingSymbolNames_TypeTraits;
  using Data1 = TestConflictingSymbolNames_Data1;
  using Data2 = TestConflictingSymbolNames_Data2;
  using Data3 = TestConflictingSymbolNames_Data3;
  using Data4 = TestConflictingSymbolNames_Data4;
  using Data5 = TestConflictingSymbolNames_Data5;
  using Data6 = TestConflictingSymbolNames_Data6;
  using Cord = TestConflictingSymbolNames_Cord;
  using StringPiece = TestConflictingSymbolNames_StringPiece;
  using DO = TestConflictingSymbolNames_DO;
  using TestEnum = TestConflictingSymbolNames_TestEnum;
  static constexpr TestEnum FOO = TestConflictingSymbolNames_TestEnum_FOO;
  static inline bool TestEnum_IsValid(int value) {
    return TestConflictingSymbolNames_TestEnum_IsValid(value);
  }
  static constexpr TestEnum TestEnum_MIN = TestConflictingSymbolNames_TestEnum_TestEnum_MIN;
  static constexpr TestEnum TestEnum_MAX = TestConflictingSymbolNames_TestEnum_TestEnum_MAX;
  static constexpr int TestEnum_ARRAYSIZE = TestConflictingSymbolNames_TestEnum_TestEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* TestEnum_descriptor() {
    return TestConflictingSymbolNames_TestEnum_descriptor();
  }
  template <typename T>
  static inline const std::string& TestEnum_Name(T value) {
    return TestConflictingSymbolNames_TestEnum_Name(value);
  }
  static inline bool TestEnum_Parse(absl::string_view name, TestEnum* value) {
    return TestConflictingSymbolNames_TestEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kIFieldNumber = 4,
    kNewElementFieldNumber = 5,
    kIndexFieldNumber = 13,
    kLengthFieldNumber = 3,
    kStringFieldNumber = 18,
    kSomeCordFieldNumber = 28,
    kSomeStringPieceFieldNumber = 29,
    kReleaseLengthFieldNumber = 35,
    kTargetFieldNumber = 38,
    kDoFieldNumber = 32,
    kReleaseDoFieldNumber = 36,
    kInputFieldNumber = 1,
    kOutputFieldNumber = 2,
    kTotalSizeFieldNumber = 6,
    kTagFieldNumber = 7,
    kSourceFieldNumber = 8,
    kValueFieldNumber = 9,
    kFileFieldNumber = 10,
    kFromFieldNumber = 11,
    kHandleUninterpretedFieldNumber = 12,
    kControllerFieldNumber = 14,
    kAlreadyHereFieldNumber = 15,
    kUint32FieldNumber = 16,
    kUint64FieldNumber = 17,
    kMemsetFieldNumber = 19,
    kInt32FieldNumber = 20,
    kInt64FieldNumber = 21,
    kCachedSizeFieldNumber = 22,
    kExtensionsFieldNumber = 23,
    kBitFieldNumber = 24,
    kBitsFieldNumber = 25,
    kOffsetsFieldNumber = 26,
    kReflectionFieldNumber = 27,
    kIntFieldNumber = 30,
    kFriendFieldNumber = 31,
    kFieldTypeFieldNumber = 33,
    kIsPackedFieldNumber = 34,
    kClassFieldNumber = 37,
    kTypedeclFieldNumber = 39,
    kAutoFieldNumber = 40,
    kUint32TFieldNumber = 41,
    kUint64TFieldNumber = 42,
    kInt32TFieldNumber = 43,
    kInt64TFieldNumber = 44,
    kSizeTFieldNumber = 45,
  };
  // repeated int32 i = 4;
  int i_size() const;
  private:
  int _internal_i_size() const;

  public:
  void clear_i() ;
  ::int32_t i(int index) const;
  void set_i(int index, ::int32_t value);
  void add_i(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& i() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_i();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_i() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_i();

  public:
  // repeated string new_element = 5 [ctype = STRING_PIECE];
  int new_element_size() const;
  private:
  int _internal_new_element_size() const;

  public:
  void clear_new_element() ;
  private:  // Hidden due to unknown ctype option.
  const std::string& new_element(int index) const;
  std::string* mutable_new_element(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_element(int index, Arg_&& value, Args_... args);
  std::string* add_new_element();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_new_element(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& new_element() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_new_element();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_new_element() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_new_element();

  public:
  // repeated int32 index = 13;
  int index_size() const;
  private:
  int _internal_index_size() const;

  public:
  void clear_index() ;
  ::int32_t index(int index) const;
  void set_index(int index, ::int32_t value);
  void add_index(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& index() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_index();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_index() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_index();

  public:
  // optional string length = 3;
  bool has_length() const;
  void clear_length() ;
  const std::string& length() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_length(Arg_&& arg, Args_... args);
  std::string* mutable_length();
  PROTOBUF_NODISCARD std::string* release_length__();
  void set_allocated_length(std::string* value);

  private:
  const std::string& _internal_length() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_length(
      const std::string& value);
  std::string* _internal_mutable_length();

  public:
  // optional string string = 18;
  bool has_string() const;
  void clear_string() ;
  const std::string& string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string(Arg_&& arg, Args_... args);
  std::string* mutable_string();
  PROTOBUF_NODISCARD std::string* release_string();
  void set_allocated_string(std::string* value);

  private:
  const std::string& _internal_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string(
      const std::string& value);
  std::string* _internal_mutable_string();

  public:
  // optional string some_cord = 28 [ctype = CORD];
  bool has_some_cord() const;
  void clear_some_cord() ;
  private:  // Hidden due to unknown ctype option.
  const std::string& some_cord() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_some_cord(Arg_&& arg, Args_... args);
  std::string* mutable_some_cord();
  PROTOBUF_NODISCARD std::string* release_some_cord();
  void set_allocated_some_cord(std::string* value);

  private:
  const std::string& _internal_some_cord() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_some_cord(
      const std::string& value);
  std::string* _internal_mutable_some_cord();

  public:
  // optional string some_string_piece = 29 [ctype = STRING_PIECE];
  bool has_some_string_piece() const;
  void clear_some_string_piece() ;
  private:  // Hidden due to unknown ctype option.
  const std::string& some_string_piece() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_some_string_piece(Arg_&& arg, Args_... args);
  std::string* mutable_some_string_piece();
  PROTOBUF_NODISCARD std::string* release_some_string_piece();
  void set_allocated_some_string_piece(std::string* value);

  private:
  const std::string& _internal_some_string_piece() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_some_string_piece(
      const std::string& value);
  std::string* _internal_mutable_some_string_piece();

  public:
  // optional string release_length = 35;
  bool has_release_length() const;
  void clear_release_length() ;
  const std::string& release_length() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_release_length(Arg_&& arg, Args_... args);
  std::string* mutable_release_length();
  PROTOBUF_NODISCARD std::string* release_release_length();
  void set_allocated_release_length(std::string* value);

  private:
  const std::string& _internal_release_length() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_release_length(
      const std::string& value);
  std::string* _internal_mutable_release_length();

  public:
  // optional string target = 38;
  bool has_target() const;
  void clear_target() ;
  const std::string& target() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target(Arg_&& arg, Args_... args);
  std::string* mutable_target();
  PROTOBUF_NODISCARD std::string* release_target();
  void set_allocated_target(std::string* value);

  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(
      const std::string& value);
  std::string* _internal_mutable_target();

  public:
  // optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
  bool has_do_() const;
  void clear_do_() ;
  const ::protobuf_unittest::TestConflictingSymbolNames_DO& do_() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestConflictingSymbolNames_DO* release_do__();
  ::protobuf_unittest::TestConflictingSymbolNames_DO* mutable_do_();
  void set_allocated_do_(::protobuf_unittest::TestConflictingSymbolNames_DO* value);
  void unsafe_arena_set_allocated_do_(::protobuf_unittest::TestConflictingSymbolNames_DO* value);
  ::protobuf_unittest::TestConflictingSymbolNames_DO* unsafe_arena_release_do_();

  private:
  const ::protobuf_unittest::TestConflictingSymbolNames_DO& _internal_do_() const;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* _internal_mutable_do_();

  public:
  // optional .protobuf_unittest.TestConflictingSymbolNames.DO release_do = 36;
  bool has_release_do() const;
  void clear_release_do() ;
  const ::protobuf_unittest::TestConflictingSymbolNames_DO& release_do() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestConflictingSymbolNames_DO* release_release_do();
  ::protobuf_unittest::TestConflictingSymbolNames_DO* mutable_release_do();
  void set_allocated_release_do(::protobuf_unittest::TestConflictingSymbolNames_DO* value);
  void unsafe_arena_set_allocated_release_do(::protobuf_unittest::TestConflictingSymbolNames_DO* value);
  ::protobuf_unittest::TestConflictingSymbolNames_DO* unsafe_arena_release_release_do();

  private:
  const ::protobuf_unittest::TestConflictingSymbolNames_DO& _internal_release_do() const;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* _internal_mutable_release_do();

  public:
  // optional int32 input = 1;
  bool has_input() const;
  void clear_input() ;
  ::int32_t input() const;
  void set_input(::int32_t value);

  private:
  ::int32_t _internal_input() const;
  void _internal_set_input(::int32_t value);

  public:
  // optional int32 output = 2;
  bool has_output() const;
  void clear_output() ;
  ::int32_t output() const;
  void set_output(::int32_t value);

  private:
  ::int32_t _internal_output() const;
  void _internal_set_output(::int32_t value);

  public:
  // optional int32 total_size = 6;
  bool has_total_size() const;
  void clear_total_size() ;
  ::int32_t total_size() const;
  void set_total_size(::int32_t value);

  private:
  ::int32_t _internal_total_size() const;
  void _internal_set_total_size(::int32_t value);

  public:
  // optional int32 tag = 7;
  bool has_tag() const;
  void clear_tag() ;
  ::int32_t tag() const;
  void set_tag(::int32_t value);

  private:
  ::int32_t _internal_tag() const;
  void _internal_set_tag(::int32_t value);

  public:
  // optional int32 source = 8;
  bool has_source() const;
  void clear_source() ;
  ::int32_t source() const;
  void set_source(::int32_t value);

  private:
  ::int32_t _internal_source() const;
  void _internal_set_source(::int32_t value);

  public:
  // optional int32 value = 9;
  bool has_value() const;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // optional int32 file = 10;
  bool has_file() const;
  void clear_file() ;
  ::int32_t file() const;
  void set_file(::int32_t value);

  private:
  ::int32_t _internal_file() const;
  void _internal_set_file(::int32_t value);

  public:
  // optional int32 from = 11;
  bool has_from() const;
  void clear_from() ;
  ::int32_t from() const;
  void set_from(::int32_t value);

  private:
  ::int32_t _internal_from() const;
  void _internal_set_from(::int32_t value);

  public:
  // optional int32 handle_uninterpreted = 12;
  bool has_handle_uninterpreted() const;
  void clear_handle_uninterpreted() ;
  ::int32_t handle_uninterpreted() const;
  void set_handle_uninterpreted(::int32_t value);

  private:
  ::int32_t _internal_handle_uninterpreted() const;
  void _internal_set_handle_uninterpreted(::int32_t value);

  public:
  // optional int32 controller = 14;
  bool has_controller() const;
  void clear_controller() ;
  ::int32_t controller() const;
  void set_controller(::int32_t value);

  private:
  ::int32_t _internal_controller() const;
  void _internal_set_controller(::int32_t value);

  public:
  // optional int32 already_here = 15;
  bool has_already_here() const;
  void clear_already_here() ;
  ::int32_t already_here() const;
  void set_already_here(::int32_t value);

  private:
  ::int32_t _internal_already_here() const;
  void _internal_set_already_here(::int32_t value);

  public:
  // optional uint32 uint32 = 16;
  bool has_uint32() const;
  void clear_uint32() ;
  ::uint32_t uint32() const;
  void set_uint32(::uint32_t value);

  private:
  ::uint32_t _internal_uint32() const;
  void _internal_set_uint32(::uint32_t value);

  public:
  // optional uint64 uint64 = 17;
  bool has_uint64() const;
  void clear_uint64() ;
  ::uint64_t uint64() const;
  void set_uint64(::uint64_t value);

  private:
  ::uint64_t _internal_uint64() const;
  void _internal_set_uint64(::uint64_t value);

  public:
  // optional int32 memset = 19;
  bool has_memset() const;
  void clear_memset() ;
  ::int32_t memset() const;
  void set_memset(::int32_t value);

  private:
  ::int32_t _internal_memset() const;
  void _internal_set_memset(::int32_t value);

  public:
  // optional int32 int32 = 20;
  bool has_int32() const;
  void clear_int32() ;
  ::int32_t int32() const;
  void set_int32(::int32_t value);

  private:
  ::int32_t _internal_int32() const;
  void _internal_set_int32(::int32_t value);

  public:
  // optional int64 int64 = 21;
  bool has_int64() const;
  void clear_int64() ;
  ::int64_t int64() const;
  void set_int64(::int64_t value);

  private:
  ::int64_t _internal_int64() const;
  void _internal_set_int64(::int64_t value);

  public:
  // optional uint32 cached_size = 22;
  bool has_cached_size() const;
  void clear_cached_size() ;
  ::uint32_t cached_size() const;
  void set_cached_size(::uint32_t value);

  private:
  ::uint32_t _internal_cached_size() const;
  void _internal_set_cached_size(::uint32_t value);

  public:
  // optional uint32 extensions = 23;
  bool has_extensions() const;
  void clear_extensions() ;
  ::uint32_t extensions() const;
  void set_extensions(::uint32_t value);

  private:
  ::uint32_t _internal_extensions() const;
  void _internal_set_extensions(::uint32_t value);

  public:
  // optional uint32 bit = 24;
  bool has_bit() const;
  void clear_bit() ;
  ::uint32_t bit() const;
  void set_bit(::uint32_t value);

  private:
  ::uint32_t _internal_bit() const;
  void _internal_set_bit(::uint32_t value);

  public:
  // optional uint32 bits = 25;
  bool has_bits() const;
  void clear_bits() ;
  ::uint32_t bits() const;
  void set_bits(::uint32_t value);

  private:
  ::uint32_t _internal_bits() const;
  void _internal_set_bits(::uint32_t value);

  public:
  // optional uint32 offsets = 26;
  bool has_offsets() const;
  void clear_offsets() ;
  ::uint32_t offsets() const;
  void set_offsets(::uint32_t value);

  private:
  ::uint32_t _internal_offsets() const;
  void _internal_set_offsets(::uint32_t value);

  public:
  // optional uint32 reflection = 27;
  bool has_reflection() const;
  void clear_reflection() ;
  ::uint32_t reflection() const;
  void set_reflection(::uint32_t value);

  private:
  ::uint32_t _internal_reflection() const;
  void _internal_set_reflection(::uint32_t value);

  public:
  // optional uint32 int = 30;
  bool has_int_() const;
  void clear_int_() ;
  ::uint32_t int_() const;
  void set_int_(::uint32_t value);

  private:
  ::uint32_t _internal_int_() const;
  void _internal_set_int_(::uint32_t value);

  public:
  // optional uint32 friend = 31;
  bool has_friend_() const;
  void clear_friend_() ;
  ::uint32_t friend_() const;
  void set_friend_(::uint32_t value);

  private:
  ::uint32_t _internal_friend_() const;
  void _internal_set_friend_(::uint32_t value);

  public:
  // optional int32 field_type = 33;
  bool has_field_type() const;
  void clear_field_type() ;
  ::int32_t field_type() const;
  void set_field_type(::int32_t value);

  private:
  ::int32_t _internal_field_type() const;
  void _internal_set_field_type(::int32_t value);

  public:
  // optional bool is_packed = 34;
  bool has_is_packed() const;
  void clear_is_packed() ;
  bool is_packed() const;
  void set_is_packed(bool value);

  private:
  bool _internal_is_packed() const;
  void _internal_set_is_packed(bool value);

  public:
  // optional uint32 class = 37;
  bool has_class_() const;
  void clear_class_() ;
  ::uint32_t class_() const;
  void set_class_(::uint32_t value);

  private:
  ::uint32_t _internal_class_() const;
  void _internal_set_class_(::uint32_t value);

  public:
  // optional uint32 typedecl = 39;
  bool has_typedecl() const;
  void clear_typedecl() ;
  ::uint32_t typedecl() const;
  void set_typedecl(::uint32_t value);

  private:
  ::uint32_t _internal_typedecl() const;
  void _internal_set_typedecl(::uint32_t value);

  public:
  // optional uint32 auto = 40;
  bool has_auto_() const;
  void clear_auto_() ;
  ::uint32_t auto_() const;
  void set_auto_(::uint32_t value);

  private:
  ::uint32_t _internal_auto_() const;
  void _internal_set_auto_(::uint32_t value);

  public:
  // optional uint32 uint32_t = 41;
  bool has_uint32_t() const;
  void clear_uint32_t() ;
  ::uint32_t uint32_t() const;
  void set_uint32_t(::uint32_t value);

  private:
  ::uint32_t _internal_uint32_t() const;
  void _internal_set_uint32_t(::uint32_t value);

  public:
  // optional uint32 uint64_t = 42;
  bool has_uint64_t() const;
  void clear_uint64_t() ;
  ::uint32_t uint64_t() const;
  void set_uint64_t(::uint32_t value);

  private:
  ::uint32_t _internal_uint64_t() const;
  void _internal_set_uint64_t(::uint32_t value);

  public:
  // optional int32 int32_t = 43;
  bool has_int32_t() const;
  void clear_int32_t() ;
  ::int32_t int32_t() const;
  void set_int32_t(::int32_t value);

  private:
  ::int32_t _internal_int32_t() const;
  void _internal_set_int32_t(::int32_t value);

  public:
  // optional int64 int64_t = 44;
  bool has_int64_t() const;
  void clear_int64_t() ;
  ::int64_t int64_t() const;
  void set_int64_t(::int64_t value);

  private:
  ::int64_t _internal_int64_t() const;
  void _internal_set_int64_t(::int64_t value);

  public:
  // optional int64 size_t = 45;
  bool has_size_t() const;
  void clear_size_t() ;
  ::int64_t size_t() const;
  void set_size_t(::int64_t value);

  private:
  ::int64_t _internal_size_t() const;
  void _internal_set_size_t(::int64_t value);

  public:
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            typename = typename _proto_TypeTraits::Singular>
  inline bool HasExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            typename = typename _proto_TypeTraits::Repeated>
  inline int ExtensionSize(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<!_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<!_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<TestConflictingSymbolNames, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 45, 2,
      162, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TestConflictingSymbolNames_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestConflictingSymbolNames& from_msg);
    ::google::protobuf::internal::ExtensionSet _extensions_;
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> i_;
    ::google::protobuf::RepeatedPtrField<std::string> new_element_;
    ::google::protobuf::RepeatedField<::int32_t> index_;
    ::google::protobuf::internal::ArenaStringPtr length_;
    ::google::protobuf::internal::ArenaStringPtr string_;
    ::google::protobuf::internal::ArenaStringPtr some_cord_;
    ::google::protobuf::internal::ArenaStringPtr some_string_piece_;
    ::google::protobuf::internal::ArenaStringPtr release_length_;
    ::google::protobuf::internal::ArenaStringPtr target_;
    ::protobuf_unittest::TestConflictingSymbolNames_DO* do__;
    ::protobuf_unittest::TestConflictingSymbolNames_DO* release_do_;
    ::int32_t input_;
    ::int32_t output_;
    ::int32_t total_size_;
    ::int32_t tag_;
    ::int32_t source_;
    ::int32_t value_;
    ::int32_t file_;
    ::int32_t from_;
    ::int32_t handle_uninterpreted_;
    ::int32_t controller_;
    ::int32_t already_here_;
    ::uint32_t uint32_;
    ::uint64_t uint64_;
    ::int32_t memset_;
    ::int32_t int32_;
    ::int64_t int64_;
    ::uint32_t cached_size_;
    ::uint32_t extensions_;
    ::uint32_t bit_;
    ::uint32_t bits_;
    ::uint32_t offsets_;
    ::uint32_t reflection_;
    ::uint32_t int__;
    ::uint32_t friend__;
    ::int32_t field_type_;
    bool is_packed_;
    ::uint32_t class__;
    ::uint32_t typedecl_;
    ::uint32_t auto__;
    ::uint32_t uint32_t_;
    ::uint32_t uint64_t_;
    ::int32_t int32_t_;
    ::int64_t int64_t_;
    ::int64_t size_t_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
};

// ===================================================================


// -------------------------------------------------------------------

class TestConflictingMethodNames_Stub;
class TestConflictingMethodNames : public ::google::protobuf::Service {
 protected:
  TestConflictingMethodNames() = default;

 public:
  using Stub = TestConflictingMethodNames_Stub;

  TestConflictingMethodNames(const TestConflictingMethodNames&) = delete;
  TestConflictingMethodNames& operator=(const TestConflictingMethodNames&) = delete;
  virtual ~TestConflictingMethodNames() = default;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Closure(::google::protobuf::RpcController* controller,
                        const ::protobuf_unittest::DummyMessage* request,
                        ::protobuf_unittest::DummyMessage* response,
                        ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------
  const ::google::protobuf::ServiceDescriptor* GetDescriptor() override;

  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done) override;

  const ::google::protobuf::Message& GetRequestPrototype(
      const ::google::protobuf::MethodDescriptor* method) const override;

  const ::google::protobuf::Message& GetResponsePrototype(
      const ::google::protobuf::MethodDescriptor* method) const override;
};

class TestConflictingMethodNames_Stub final : public TestConflictingMethodNames {
 public:
  TestConflictingMethodNames_Stub(::google::protobuf::RpcChannel* channel);
  TestConflictingMethodNames_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);

  TestConflictingMethodNames_Stub(const TestConflictingMethodNames_Stub&) = delete;
  TestConflictingMethodNames_Stub& operator=(const TestConflictingMethodNames_Stub&) = delete;

  ~TestConflictingMethodNames_Stub() override;

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements TestConflictingMethodNames ------------------------------------------
  void Closure(::google::protobuf::RpcController* controller,
                        const ::protobuf_unittest::DummyMessage* request,
                        ::protobuf_unittest::DummyMessage* response,
                        ::google::protobuf::Closure* done) override;

 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
};
// ===================================================================


static const int kVoidFieldNumber = 314253;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::protobuf_unittest::TestConflictingSymbolNames, ::google::protobuf::internal::PrimitiveTypeTraits< ::int32_t >, 5,
    false>
    void_;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestConflictingSymbolNames_BuildDescriptors

// -------------------------------------------------------------------

// TestConflictingSymbolNames_TypeTraits

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Data1

// repeated int32 data = 1;
inline int TestConflictingSymbolNames_Data1::_internal_data_size() const {
  return _internal_data().size();
}
inline int TestConflictingSymbolNames_Data1::data_size() const {
  return _internal_data_size();
}
inline void TestConflictingSymbolNames_Data1::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::int32_t TestConflictingSymbolNames_Data1::data(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.Data1.data)
  return _internal_data().Get(index);
}
inline void TestConflictingSymbolNames_Data1::set_data(int index, ::int32_t value) {
  _internal_mutable_data()->Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.Data1.data)
}
inline void TestConflictingSymbolNames_Data1::add_data(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data1.data)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& TestConflictingSymbolNames_Data1::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.Data1.data)
  return _internal_data();
}
inline ::google::protobuf::RepeatedField<::int32_t>* TestConflictingSymbolNames_Data1::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.Data1.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
TestConflictingSymbolNames_Data1::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* TestConflictingSymbolNames_Data1::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Data2

// repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
inline int TestConflictingSymbolNames_Data2::_internal_data_size() const {
  return _internal_data().size();
}
inline int TestConflictingSymbolNames_Data2::data_size() const {
  return _internal_data_size();
}
inline void TestConflictingSymbolNames_Data2::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::protobuf_unittest::TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames_Data2::data(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.Data2.data)
  return static_cast<::protobuf_unittest::TestConflictingSymbolNames_TestEnum>(_internal_data().Get(index));
}
inline void TestConflictingSymbolNames_Data2::set_data(int index, ::protobuf_unittest::TestConflictingSymbolNames_TestEnum value) {
  assert(::protobuf_unittest::TestConflictingSymbolNames_TestEnum_IsValid(value));
  _internal_mutable_data()->Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.Data2.data)
}
inline void TestConflictingSymbolNames_Data2::add_data(::protobuf_unittest::TestConflictingSymbolNames_TestEnum value) {
  assert(::protobuf_unittest::TestConflictingSymbolNames_TestEnum_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data2.data)
}
inline const ::google::protobuf::RepeatedField<int>& TestConflictingSymbolNames_Data2::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.Data2.data)
  return _internal_data();
}
inline ::google::protobuf::RepeatedField<int>* TestConflictingSymbolNames_Data2::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.Data2.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::google::protobuf::RepeatedField<int>& TestConflictingSymbolNames_Data2::_internal_data()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedField<int>* TestConflictingSymbolNames_Data2::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Data3

// repeated string data = 1;
inline int TestConflictingSymbolNames_Data3::_internal_data_size() const {
  return _internal_data().size();
}
inline int TestConflictingSymbolNames_Data3::data_size() const {
  return _internal_data_size();
}
inline void TestConflictingSymbolNames_Data3::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline std::string* TestConflictingSymbolNames_Data3::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
  return _s;
}
inline const std::string& TestConflictingSymbolNames_Data3::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
  return _internal_data().Get(index);
}
inline std::string* TestConflictingSymbolNames_Data3::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
  return _internal_mutable_data()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void TestConflictingSymbolNames_Data3::set_data(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_data()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
}
template <typename Arg_, typename... Args_>
inline void TestConflictingSymbolNames_Data3::add_data(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_data(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TestConflictingSymbolNames_Data3::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
  return _internal_data();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TestConflictingSymbolNames_Data3::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TestConflictingSymbolNames_Data3::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TestConflictingSymbolNames_Data3::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Data4

// repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
inline int TestConflictingSymbolNames_Data4::_internal_data_size() const {
  return _internal_data().size();
}
inline int TestConflictingSymbolNames_Data4::data_size() const {
  return _internal_data_size();
}
inline void TestConflictingSymbolNames_Data4::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::protobuf_unittest::TestConflictingSymbolNames_Data4* TestConflictingSymbolNames_Data4::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.Data4.data)
  return _internal_mutable_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::protobuf_unittest::TestConflictingSymbolNames_Data4>* TestConflictingSymbolNames_Data4::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.Data4.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::protobuf_unittest::TestConflictingSymbolNames_Data4& TestConflictingSymbolNames_Data4::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.Data4.data)
  return _internal_data().Get(index);
}
inline ::protobuf_unittest::TestConflictingSymbolNames_Data4* TestConflictingSymbolNames_Data4::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::protobuf_unittest::TestConflictingSymbolNames_Data4* _add = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data4.data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::protobuf_unittest::TestConflictingSymbolNames_Data4>& TestConflictingSymbolNames_Data4::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.Data4.data)
  return _internal_data();
}
inline const ::google::protobuf::RepeatedPtrField<::protobuf_unittest::TestConflictingSymbolNames_Data4>&
TestConflictingSymbolNames_Data4::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<::protobuf_unittest::TestConflictingSymbolNames_Data4>*
TestConflictingSymbolNames_Data4::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Data5

// repeated string data = 1 [ctype = STRING_PIECE];
inline int TestConflictingSymbolNames_Data5::_internal_data_size() const {
  return _internal_data().size();
}
inline int TestConflictingSymbolNames_Data5::data_size() const {
  return _internal_data_size();
}
inline void TestConflictingSymbolNames_Data5::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline std::string* TestConflictingSymbolNames_Data5::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
  return _s;
}
inline const std::string& TestConflictingSymbolNames_Data5::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
  return _internal_data().Get(index);
}
inline std::string* TestConflictingSymbolNames_Data5::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
  return _internal_mutable_data()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void TestConflictingSymbolNames_Data5::set_data(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_data()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
}
template <typename Arg_, typename... Args_>
inline void TestConflictingSymbolNames_Data5::add_data(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_data(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TestConflictingSymbolNames_Data5::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
  return _internal_data();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TestConflictingSymbolNames_Data5::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TestConflictingSymbolNames_Data5::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TestConflictingSymbolNames_Data5::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Data6

// repeated string data = 1 [ctype = CORD];
inline int TestConflictingSymbolNames_Data6::_internal_data_size() const {
  return _internal_data().size();
}
inline int TestConflictingSymbolNames_Data6::data_size() const {
  return _internal_data_size();
}
inline void TestConflictingSymbolNames_Data6::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline std::string* TestConflictingSymbolNames_Data6::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
  return _s;
}
inline const std::string& TestConflictingSymbolNames_Data6::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
  return _internal_data().Get(index);
}
inline std::string* TestConflictingSymbolNames_Data6::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
  return _internal_mutable_data()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void TestConflictingSymbolNames_Data6::set_data(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_data()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
}
template <typename Arg_, typename... Args_>
inline void TestConflictingSymbolNames_Data6::add_data(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_data(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TestConflictingSymbolNames_Data6::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
  return _internal_data();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TestConflictingSymbolNames_Data6::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TestConflictingSymbolNames_Data6::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TestConflictingSymbolNames_Data6::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Cord

// -------------------------------------------------------------------

// TestConflictingSymbolNames_StringPiece

// -------------------------------------------------------------------

// TestConflictingSymbolNames_DO

// -------------------------------------------------------------------

// TestConflictingSymbolNames

// optional int32 input = 1;
inline bool TestConflictingSymbolNames::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t TestConflictingSymbolNames::input() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.input)
  return _internal_input();
}
inline void TestConflictingSymbolNames::set_input(::int32_t value) {
  _internal_set_input(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.input)
}
inline ::int32_t TestConflictingSymbolNames::_internal_input() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.input_;
}
inline void TestConflictingSymbolNames::_internal_set_input(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_ = value;
}

// optional int32 output = 2;
inline bool TestConflictingSymbolNames::has_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t TestConflictingSymbolNames::output() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.output)
  return _internal_output();
}
inline void TestConflictingSymbolNames::set_output(::int32_t value) {
  _internal_set_output(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.output)
}
inline ::int32_t TestConflictingSymbolNames::_internal_output() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.output_;
}
inline void TestConflictingSymbolNames::_internal_set_output(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_ = value;
}

// optional string length = 3;
inline bool TestConflictingSymbolNames::has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.length_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestConflictingSymbolNames::length() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.length)
  return _internal_length();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestConflictingSymbolNames::set_length(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.length_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.length)
}
inline std::string* TestConflictingSymbolNames::mutable_length() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_length();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.length)
  return _s;
}
inline const std::string& TestConflictingSymbolNames::_internal_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.length_.Get();
}
inline void TestConflictingSymbolNames::_internal_set_length(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.length_.Set(value, GetArena());
}
inline std::string* TestConflictingSymbolNames::_internal_mutable_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.length_.Mutable( GetArena());
}
inline std::string* TestConflictingSymbolNames::release_length__() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.length)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.length_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.length_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestConflictingSymbolNames::set_allocated_length(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.length_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.length_.IsDefault()) {
          _impl_.length_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.length)
}

// repeated int32 i = 4;
inline int TestConflictingSymbolNames::_internal_i_size() const {
  return _internal_i().size();
}
inline int TestConflictingSymbolNames::i_size() const {
  return _internal_i_size();
}
inline void TestConflictingSymbolNames::clear_i() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.i_.Clear();
}
inline ::int32_t TestConflictingSymbolNames::i(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.i)
  return _internal_i().Get(index);
}
inline void TestConflictingSymbolNames::set_i(int index, ::int32_t value) {
  _internal_mutable_i()->Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.i)
}
inline void TestConflictingSymbolNames::add_i(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_i()->Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.i)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& TestConflictingSymbolNames::i() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.i)
  return _internal_i();
}
inline ::google::protobuf::RepeatedField<::int32_t>* TestConflictingSymbolNames::mutable_i()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.i)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_i();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
TestConflictingSymbolNames::_internal_i() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.i_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* TestConflictingSymbolNames::_internal_mutable_i() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.i_;
}

// repeated string new_element = 5 [ctype = STRING_PIECE];
inline int TestConflictingSymbolNames::_internal_new_element_size() const {
  return _internal_new_element().size();
}
inline int TestConflictingSymbolNames::new_element_size() const {
  return _internal_new_element_size();
}
inline void TestConflictingSymbolNames::clear_new_element() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_element_.Clear();
}
inline std::string* TestConflictingSymbolNames::add_new_element() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_new_element()->Add();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestConflictingSymbolNames.new_element)
  return _s;
}
inline const std::string& TestConflictingSymbolNames::new_element(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.new_element)
  return _internal_new_element().Get(index);
}
inline std::string* TestConflictingSymbolNames::mutable_new_element(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.new_element)
  return _internal_mutable_new_element()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void TestConflictingSymbolNames::set_new_element(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_new_element()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.new_element)
}
template <typename Arg_, typename... Args_>
inline void TestConflictingSymbolNames::add_new_element(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_new_element(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.new_element)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TestConflictingSymbolNames::new_element() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.new_element)
  return _internal_new_element();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TestConflictingSymbolNames::mutable_new_element() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.new_element)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_new_element();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TestConflictingSymbolNames::_internal_new_element() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_element_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TestConflictingSymbolNames::_internal_mutable_new_element() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.new_element_;
}

// optional int32 total_size = 6;
inline bool TestConflictingSymbolNames::has_total_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_total_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t TestConflictingSymbolNames::total_size() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.total_size)
  return _internal_total_size();
}
inline void TestConflictingSymbolNames::set_total_size(::int32_t value) {
  _internal_set_total_size(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.total_size)
}
inline ::int32_t TestConflictingSymbolNames::_internal_total_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_size_;
}
inline void TestConflictingSymbolNames::_internal_set_total_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_size_ = value;
}

// optional int32 tag = 7;
inline bool TestConflictingSymbolNames::has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tag_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t TestConflictingSymbolNames::tag() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.tag)
  return _internal_tag();
}
inline void TestConflictingSymbolNames::set_tag(::int32_t value) {
  _internal_set_tag(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.tag)
}
inline ::int32_t TestConflictingSymbolNames::_internal_tag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tag_;
}
inline void TestConflictingSymbolNames::_internal_set_tag(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tag_ = value;
}

// optional int32 source = 8;
inline bool TestConflictingSymbolNames::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t TestConflictingSymbolNames::source() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.source)
  return _internal_source();
}
inline void TestConflictingSymbolNames::set_source(::int32_t value) {
  _internal_set_source(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.source)
}
inline ::int32_t TestConflictingSymbolNames::_internal_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_;
}
inline void TestConflictingSymbolNames::_internal_set_source(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_ = value;
}

// optional int32 value = 9;
inline bool TestConflictingSymbolNames::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int32_t TestConflictingSymbolNames::value() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.value)
  return _internal_value();
}
inline void TestConflictingSymbolNames::set_value(::int32_t value) {
  _internal_set_value(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.value)
}
inline ::int32_t TestConflictingSymbolNames::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void TestConflictingSymbolNames::_internal_set_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// optional int32 file = 10;
inline bool TestConflictingSymbolNames::has_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int32_t TestConflictingSymbolNames::file() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.file)
  return _internal_file();
}
inline void TestConflictingSymbolNames::set_file(::int32_t value) {
  _internal_set_file(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.file)
}
inline ::int32_t TestConflictingSymbolNames::_internal_file() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_;
}
inline void TestConflictingSymbolNames::_internal_set_file(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_ = value;
}

// optional int32 from = 11;
inline bool TestConflictingSymbolNames::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int32_t TestConflictingSymbolNames::from() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.from)
  return _internal_from();
}
inline void TestConflictingSymbolNames::set_from(::int32_t value) {
  _internal_set_from(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.from)
}
inline ::int32_t TestConflictingSymbolNames::_internal_from() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_;
}
inline void TestConflictingSymbolNames::_internal_set_from(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_ = value;
}

// optional int32 handle_uninterpreted = 12;
inline bool TestConflictingSymbolNames::has_handle_uninterpreted() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_handle_uninterpreted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.handle_uninterpreted_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int32_t TestConflictingSymbolNames::handle_uninterpreted() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.handle_uninterpreted)
  return _internal_handle_uninterpreted();
}
inline void TestConflictingSymbolNames::set_handle_uninterpreted(::int32_t value) {
  _internal_set_handle_uninterpreted(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.handle_uninterpreted)
}
inline ::int32_t TestConflictingSymbolNames::_internal_handle_uninterpreted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.handle_uninterpreted_;
}
inline void TestConflictingSymbolNames::_internal_set_handle_uninterpreted(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.handle_uninterpreted_ = value;
}

// repeated int32 index = 13;
inline int TestConflictingSymbolNames::_internal_index_size() const {
  return _internal_index().size();
}
inline int TestConflictingSymbolNames::index_size() const {
  return _internal_index_size();
}
inline void TestConflictingSymbolNames::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_.Clear();
}
inline ::int32_t TestConflictingSymbolNames::index(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.index)
  return _internal_index().Get(index);
}
inline void TestConflictingSymbolNames::set_index(int index, ::int32_t value) {
  _internal_mutable_index()->Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.index)
}
inline void TestConflictingSymbolNames::add_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_index()->Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.index)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& TestConflictingSymbolNames::index() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.index)
  return _internal_index();
}
inline ::google::protobuf::RepeatedField<::int32_t>* TestConflictingSymbolNames::mutable_index()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.index)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_index();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
TestConflictingSymbolNames::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* TestConflictingSymbolNames::_internal_mutable_index() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.index_;
}

// optional int32 controller = 14;
inline bool TestConflictingSymbolNames::has_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_controller() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.controller_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int32_t TestConflictingSymbolNames::controller() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.controller)
  return _internal_controller();
}
inline void TestConflictingSymbolNames::set_controller(::int32_t value) {
  _internal_set_controller(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.controller)
}
inline ::int32_t TestConflictingSymbolNames::_internal_controller() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.controller_;
}
inline void TestConflictingSymbolNames::_internal_set_controller(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.controller_ = value;
}

// optional int32 already_here = 15;
inline bool TestConflictingSymbolNames::has_already_here() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_already_here() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.already_here_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t TestConflictingSymbolNames::already_here() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.already_here)
  return _internal_already_here();
}
inline void TestConflictingSymbolNames::set_already_here(::int32_t value) {
  _internal_set_already_here(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.already_here)
}
inline ::int32_t TestConflictingSymbolNames::_internal_already_here() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.already_here_;
}
inline void TestConflictingSymbolNames::_internal_set_already_here(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.already_here_ = value;
}

// optional uint32 uint32 = 16;
inline bool TestConflictingSymbolNames::has_uint32() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_uint32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint32_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::uint32_t TestConflictingSymbolNames::uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.uint32)
  return _internal_uint32();
}
inline void TestConflictingSymbolNames::set_uint32(::uint32_t value) {
  _internal_set_uint32(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.uint32)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_uint32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uint32_;
}
inline void TestConflictingSymbolNames::_internal_set_uint32(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint32_ = value;
}

// optional uint32 uint32_t = 41;
inline bool TestConflictingSymbolNames::has_uint32_t() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_uint32_t() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint32_t_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline ::uint32_t TestConflictingSymbolNames::uint32_t() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.uint32_t)
  return _internal_uint32_t();
}
inline void TestConflictingSymbolNames::set_uint32_t(::uint32_t value) {
  _internal_set_uint32_t(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.uint32_t)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_uint32_t() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uint32_t_;
}
inline void TestConflictingSymbolNames::_internal_set_uint32_t(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint32_t_ = value;
}

// optional uint64 uint64 = 17;
inline bool TestConflictingSymbolNames::has_uint64() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_uint64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint64_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::uint64_t TestConflictingSymbolNames::uint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.uint64)
  return _internal_uint64();
}
inline void TestConflictingSymbolNames::set_uint64(::uint64_t value) {
  _internal_set_uint64(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.uint64)
}
inline ::uint64_t TestConflictingSymbolNames::_internal_uint64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uint64_;
}
inline void TestConflictingSymbolNames::_internal_set_uint64(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint64_ = value;
}

// optional uint32 uint64_t = 42;
inline bool TestConflictingSymbolNames::has_uint64_t() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_uint64_t() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint64_t_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline ::uint32_t TestConflictingSymbolNames::uint64_t() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.uint64_t)
  return _internal_uint64_t();
}
inline void TestConflictingSymbolNames::set_uint64_t(::uint32_t value) {
  _internal_set_uint64_t(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.uint64_t)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_uint64_t() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uint64_t_;
}
inline void TestConflictingSymbolNames::_internal_set_uint64_t(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint64_t_ = value;
}

// optional string string = 18;
inline bool TestConflictingSymbolNames::has_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestConflictingSymbolNames::string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.string)
  return _internal_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestConflictingSymbolNames::set_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.string)
}
inline std::string* TestConflictingSymbolNames::mutable_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.string)
  return _s;
}
inline const std::string& TestConflictingSymbolNames::_internal_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.string_.Get();
}
inline void TestConflictingSymbolNames::_internal_set_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.string_.Set(value, GetArena());
}
inline std::string* TestConflictingSymbolNames::_internal_mutable_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.string_.Mutable( GetArena());
}
inline std::string* TestConflictingSymbolNames::release_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.string)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.string_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.string_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestConflictingSymbolNames::set_allocated_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.string_.IsDefault()) {
          _impl_.string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.string)
}

// optional int32 memset = 19;
inline bool TestConflictingSymbolNames::has_memset() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_memset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memset_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::int32_t TestConflictingSymbolNames::memset() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.memset)
  return _internal_memset();
}
inline void TestConflictingSymbolNames::set_memset(::int32_t value) {
  _internal_set_memset(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.memset)
}
inline ::int32_t TestConflictingSymbolNames::_internal_memset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.memset_;
}
inline void TestConflictingSymbolNames::_internal_set_memset(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memset_ = value;
}

// optional int32 int32 = 20;
inline bool TestConflictingSymbolNames::has_int32() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_int32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int32_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::int32_t TestConflictingSymbolNames::int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.int32)
  return _internal_int32();
}
inline void TestConflictingSymbolNames::set_int32(::int32_t value) {
  _internal_set_int32(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.int32)
}
inline ::int32_t TestConflictingSymbolNames::_internal_int32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int32_;
}
inline void TestConflictingSymbolNames::_internal_set_int32(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int32_ = value;
}

// optional int32 int32_t = 43;
inline bool TestConflictingSymbolNames::has_int32_t() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_int32_t() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int32_t_ = 0;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline ::int32_t TestConflictingSymbolNames::int32_t() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.int32_t)
  return _internal_int32_t();
}
inline void TestConflictingSymbolNames::set_int32_t(::int32_t value) {
  _internal_set_int32_t(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.int32_t)
}
inline ::int32_t TestConflictingSymbolNames::_internal_int32_t() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int32_t_;
}
inline void TestConflictingSymbolNames::_internal_set_int32_t(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int32_t_ = value;
}

// optional int64 int64 = 21;
inline bool TestConflictingSymbolNames::has_int64() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_int64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int64_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::int64_t TestConflictingSymbolNames::int64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.int64)
  return _internal_int64();
}
inline void TestConflictingSymbolNames::set_int64(::int64_t value) {
  _internal_set_int64(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.int64)
}
inline ::int64_t TestConflictingSymbolNames::_internal_int64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int64_;
}
inline void TestConflictingSymbolNames::_internal_set_int64(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int64_ = value;
}

// optional int64 int64_t = 44;
inline bool TestConflictingSymbolNames::has_int64_t() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_int64_t() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int64_t_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline ::int64_t TestConflictingSymbolNames::int64_t() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.int64_t)
  return _internal_int64_t();
}
inline void TestConflictingSymbolNames::set_int64_t(::int64_t value) {
  _internal_set_int64_t(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.int64_t)
}
inline ::int64_t TestConflictingSymbolNames::_internal_int64_t() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int64_t_;
}
inline void TestConflictingSymbolNames::_internal_set_int64_t(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int64_t_ = value;
}

// optional int64 size_t = 45;
inline bool TestConflictingSymbolNames::has_size_t() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_size_t() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_t_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline ::int64_t TestConflictingSymbolNames::size_t() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.size_t)
  return _internal_size_t();
}
inline void TestConflictingSymbolNames::set_size_t(::int64_t value) {
  _internal_set_size_t(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.size_t)
}
inline ::int64_t TestConflictingSymbolNames::_internal_size_t() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_t_;
}
inline void TestConflictingSymbolNames::_internal_set_size_t(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_t_ = value;
}

// optional uint32 cached_size = 22;
inline bool TestConflictingSymbolNames::has_cached_size() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_cached_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cached_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::uint32_t TestConflictingSymbolNames::cached_size() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.cached_size)
  return _internal_cached_size();
}
inline void TestConflictingSymbolNames::set_cached_size(::uint32_t value) {
  _internal_set_cached_size(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.cached_size)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_cached_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cached_size_;
}
inline void TestConflictingSymbolNames::_internal_set_cached_size(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cached_size_ = value;
}

// optional uint32 extensions = 23;
inline bool TestConflictingSymbolNames::has_extensions() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extensions_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::uint32_t TestConflictingSymbolNames::extensions() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.extensions)
  return _internal_extensions();
}
inline void TestConflictingSymbolNames::set_extensions(::uint32_t value) {
  _internal_set_extensions(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.extensions)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_extensions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extensions_;
}
inline void TestConflictingSymbolNames::_internal_set_extensions(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extensions_ = value;
}

// optional uint32 bit = 24;
inline bool TestConflictingSymbolNames::has_bit() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_bit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bit_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::uint32_t TestConflictingSymbolNames::bit() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.bit)
  return _internal_bit();
}
inline void TestConflictingSymbolNames::set_bit(::uint32_t value) {
  _internal_set_bit(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.bit)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_bit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bit_;
}
inline void TestConflictingSymbolNames::_internal_set_bit(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bit_ = value;
}

// optional uint32 bits = 25;
inline bool TestConflictingSymbolNames::has_bits() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_bits() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bits_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::uint32_t TestConflictingSymbolNames::bits() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.bits)
  return _internal_bits();
}
inline void TestConflictingSymbolNames::set_bits(::uint32_t value) {
  _internal_set_bits(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.bits)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_bits() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bits_;
}
inline void TestConflictingSymbolNames::_internal_set_bits(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bits_ = value;
}

// optional uint32 offsets = 26;
inline bool TestConflictingSymbolNames::has_offsets() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_offsets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offsets_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::uint32_t TestConflictingSymbolNames::offsets() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.offsets)
  return _internal_offsets();
}
inline void TestConflictingSymbolNames::set_offsets(::uint32_t value) {
  _internal_set_offsets(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.offsets)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_offsets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offsets_;
}
inline void TestConflictingSymbolNames::_internal_set_offsets(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offsets_ = value;
}

// optional uint32 reflection = 27;
inline bool TestConflictingSymbolNames::has_reflection() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_reflection() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reflection_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::uint32_t TestConflictingSymbolNames::reflection() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.reflection)
  return _internal_reflection();
}
inline void TestConflictingSymbolNames::set_reflection(::uint32_t value) {
  _internal_set_reflection(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.reflection)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_reflection() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reflection_;
}
inline void TestConflictingSymbolNames::_internal_set_reflection(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reflection_ = value;
}

// optional string some_cord = 28 [ctype = CORD];
inline bool TestConflictingSymbolNames::has_some_cord() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_some_cord() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.some_cord_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TestConflictingSymbolNames::some_cord() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.some_cord)
  return _internal_some_cord();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestConflictingSymbolNames::set_some_cord(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.some_cord_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.some_cord)
}
inline std::string* TestConflictingSymbolNames::mutable_some_cord() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_some_cord();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.some_cord)
  return _s;
}
inline const std::string& TestConflictingSymbolNames::_internal_some_cord() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.some_cord_.Get();
}
inline void TestConflictingSymbolNames::_internal_set_some_cord(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.some_cord_.Set(value, GetArena());
}
inline std::string* TestConflictingSymbolNames::_internal_mutable_some_cord() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.some_cord_.Mutable( GetArena());
}
inline std::string* TestConflictingSymbolNames::release_some_cord() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.some_cord)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.some_cord_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.some_cord_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestConflictingSymbolNames::set_allocated_some_cord(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.some_cord_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.some_cord_.IsDefault()) {
          _impl_.some_cord_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.some_cord)
}

// optional string some_string_piece = 29 [ctype = STRING_PIECE];
inline bool TestConflictingSymbolNames::has_some_string_piece() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_some_string_piece() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.some_string_piece_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TestConflictingSymbolNames::some_string_piece() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.some_string_piece)
  return _internal_some_string_piece();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestConflictingSymbolNames::set_some_string_piece(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.some_string_piece_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.some_string_piece)
}
inline std::string* TestConflictingSymbolNames::mutable_some_string_piece() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_some_string_piece();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.some_string_piece)
  return _s;
}
inline const std::string& TestConflictingSymbolNames::_internal_some_string_piece() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.some_string_piece_.Get();
}
inline void TestConflictingSymbolNames::_internal_set_some_string_piece(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.some_string_piece_.Set(value, GetArena());
}
inline std::string* TestConflictingSymbolNames::_internal_mutable_some_string_piece() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.some_string_piece_.Mutable( GetArena());
}
inline std::string* TestConflictingSymbolNames::release_some_string_piece() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.some_string_piece)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.some_string_piece_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.some_string_piece_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestConflictingSymbolNames::set_allocated_some_string_piece(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.some_string_piece_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.some_string_piece_.IsDefault()) {
          _impl_.some_string_piece_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.some_string_piece)
}

// optional uint32 int = 30;
inline bool TestConflictingSymbolNames::has_int_() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_int_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int__ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline ::uint32_t TestConflictingSymbolNames::int_() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.int)
  return _internal_int_();
}
inline void TestConflictingSymbolNames::set_int_(::uint32_t value) {
  _internal_set_int_(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.int)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_int_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int__;
}
inline void TestConflictingSymbolNames::_internal_set_int_(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int__ = value;
}

// optional uint32 friend = 31;
inline bool TestConflictingSymbolNames::has_friend_() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_friend_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.friend__ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline ::uint32_t TestConflictingSymbolNames::friend_() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.friend)
  return _internal_friend_();
}
inline void TestConflictingSymbolNames::set_friend_(::uint32_t value) {
  _internal_set_friend_(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.friend)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_friend_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.friend__;
}
inline void TestConflictingSymbolNames::_internal_set_friend_(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.friend__ = value;
}

// optional uint32 class = 37;
inline bool TestConflictingSymbolNames::has_class_() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_class_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class__ = 0u;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline ::uint32_t TestConflictingSymbolNames::class_() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.class)
  return _internal_class_();
}
inline void TestConflictingSymbolNames::set_class_(::uint32_t value) {
  _internal_set_class_(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.class)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_class_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.class__;
}
inline void TestConflictingSymbolNames::_internal_set_class_(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class__ = value;
}

// optional uint32 typedecl = 39;
inline bool TestConflictingSymbolNames::has_typedecl() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_typedecl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.typedecl_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline ::uint32_t TestConflictingSymbolNames::typedecl() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.typedecl)
  return _internal_typedecl();
}
inline void TestConflictingSymbolNames::set_typedecl(::uint32_t value) {
  _internal_set_typedecl(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.typedecl)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_typedecl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.typedecl_;
}
inline void TestConflictingSymbolNames::_internal_set_typedecl(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.typedecl_ = value;
}

// optional uint32 auto = 40;
inline bool TestConflictingSymbolNames::has_auto_() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_auto_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto__ = 0u;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline ::uint32_t TestConflictingSymbolNames::auto_() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.auto)
  return _internal_auto_();
}
inline void TestConflictingSymbolNames::set_auto_(::uint32_t value) {
  _internal_set_auto_(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.auto)
}
inline ::uint32_t TestConflictingSymbolNames::_internal_auto_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto__;
}
inline void TestConflictingSymbolNames::_internal_set_auto_(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto__ = value;
}

// optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
inline bool TestConflictingSymbolNames::has_do_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.do__ != nullptr);
  return value;
}
inline void TestConflictingSymbolNames::clear_do_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.do__ != nullptr) _impl_.do__->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::protobuf_unittest::TestConflictingSymbolNames_DO& TestConflictingSymbolNames::_internal_do_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::protobuf_unittest::TestConflictingSymbolNames_DO* p = _impl_.do__;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestConflictingSymbolNames_DO&>(::protobuf_unittest::_TestConflictingSymbolNames_DO_default_instance_);
}
inline const ::protobuf_unittest::TestConflictingSymbolNames_DO& TestConflictingSymbolNames::do_() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.do)
  return _internal_do_();
}
inline void TestConflictingSymbolNames::unsafe_arena_set_allocated_do_(::protobuf_unittest::TestConflictingSymbolNames_DO* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.do__);
  }
  _impl_.do__ = reinterpret_cast<::protobuf_unittest::TestConflictingSymbolNames_DO*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestConflictingSymbolNames.do)
}
inline ::protobuf_unittest::TestConflictingSymbolNames_DO* TestConflictingSymbolNames::release_do__() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* released = _impl_.do__;
  _impl_.do__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protobuf_unittest::TestConflictingSymbolNames_DO* TestConflictingSymbolNames::unsafe_arena_release_do_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.do)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* temp = _impl_.do__;
  _impl_.do__ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestConflictingSymbolNames_DO* TestConflictingSymbolNames::_internal_mutable_do_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.do__ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protobuf_unittest::TestConflictingSymbolNames_DO>(GetArena());
    _impl_.do__ = reinterpret_cast<::protobuf_unittest::TestConflictingSymbolNames_DO*>(p);
  }
  return _impl_.do__;
}
inline ::protobuf_unittest::TestConflictingSymbolNames_DO* TestConflictingSymbolNames::mutable_do_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* _msg = _internal_mutable_do_();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.do)
  return _msg;
}
inline void TestConflictingSymbolNames::set_allocated_do_(::protobuf_unittest::TestConflictingSymbolNames_DO* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.do__);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.do__ = reinterpret_cast<::protobuf_unittest::TestConflictingSymbolNames_DO*>(value);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.do)
}

// optional int32 field_type = 33;
inline bool TestConflictingSymbolNames::has_field_type() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_field_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_type_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline ::int32_t TestConflictingSymbolNames::field_type() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.field_type)
  return _internal_field_type();
}
inline void TestConflictingSymbolNames::set_field_type(::int32_t value) {
  _internal_set_field_type(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.field_type)
}
inline ::int32_t TestConflictingSymbolNames::_internal_field_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.field_type_;
}
inline void TestConflictingSymbolNames::_internal_set_field_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_type_ = value;
}

// optional bool is_packed = 34;
inline bool TestConflictingSymbolNames::has_is_packed() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_is_packed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_packed_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool TestConflictingSymbolNames::is_packed() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.is_packed)
  return _internal_is_packed();
}
inline void TestConflictingSymbolNames::set_is_packed(bool value) {
  _internal_set_is_packed(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.is_packed)
}
inline bool TestConflictingSymbolNames::_internal_is_packed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_packed_;
}
inline void TestConflictingSymbolNames::_internal_set_is_packed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_packed_ = value;
}

// optional string release_length = 35;
inline bool TestConflictingSymbolNames::has_release_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_release_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.release_length_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TestConflictingSymbolNames::release_length() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.release_length)
  return _internal_release_length();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestConflictingSymbolNames::set_release_length(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.release_length_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.release_length)
}
inline std::string* TestConflictingSymbolNames::mutable_release_length() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_release_length();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.release_length)
  return _s;
}
inline const std::string& TestConflictingSymbolNames::_internal_release_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.release_length_.Get();
}
inline void TestConflictingSymbolNames::_internal_set_release_length(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.release_length_.Set(value, GetArena());
}
inline std::string* TestConflictingSymbolNames::_internal_mutable_release_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.release_length_.Mutable( GetArena());
}
inline std::string* TestConflictingSymbolNames::release_release_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.release_length)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.release_length_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.release_length_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestConflictingSymbolNames::set_allocated_release_length(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.release_length_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.release_length_.IsDefault()) {
          _impl_.release_length_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.release_length)
}

// optional .protobuf_unittest.TestConflictingSymbolNames.DO release_do = 36;
inline bool TestConflictingSymbolNames::has_release_do() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.release_do_ != nullptr);
  return value;
}
inline void TestConflictingSymbolNames::clear_release_do() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.release_do_ != nullptr) _impl_.release_do_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::protobuf_unittest::TestConflictingSymbolNames_DO& TestConflictingSymbolNames::_internal_release_do() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::protobuf_unittest::TestConflictingSymbolNames_DO* p = _impl_.release_do_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestConflictingSymbolNames_DO&>(::protobuf_unittest::_TestConflictingSymbolNames_DO_default_instance_);
}
inline const ::protobuf_unittest::TestConflictingSymbolNames_DO& TestConflictingSymbolNames::release_do() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.release_do)
  return _internal_release_do();
}
inline void TestConflictingSymbolNames::unsafe_arena_set_allocated_release_do(::protobuf_unittest::TestConflictingSymbolNames_DO* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.release_do_);
  }
  _impl_.release_do_ = reinterpret_cast<::protobuf_unittest::TestConflictingSymbolNames_DO*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestConflictingSymbolNames.release_do)
}
inline ::protobuf_unittest::TestConflictingSymbolNames_DO* TestConflictingSymbolNames::release_release_do() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* released = _impl_.release_do_;
  _impl_.release_do_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protobuf_unittest::TestConflictingSymbolNames_DO* TestConflictingSymbolNames::unsafe_arena_release_release_do() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.release_do)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* temp = _impl_.release_do_;
  _impl_.release_do_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestConflictingSymbolNames_DO* TestConflictingSymbolNames::_internal_mutable_release_do() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.release_do_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protobuf_unittest::TestConflictingSymbolNames_DO>(GetArena());
    _impl_.release_do_ = reinterpret_cast<::protobuf_unittest::TestConflictingSymbolNames_DO*>(p);
  }
  return _impl_.release_do_;
}
inline ::protobuf_unittest::TestConflictingSymbolNames_DO* TestConflictingSymbolNames::mutable_release_do() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* _msg = _internal_mutable_release_do();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.release_do)
  return _msg;
}
inline void TestConflictingSymbolNames::set_allocated_release_do(::protobuf_unittest::TestConflictingSymbolNames_DO* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.release_do_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.release_do_ = reinterpret_cast<::protobuf_unittest::TestConflictingSymbolNames_DO*>(value);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.release_do)
}

// optional string target = 38;
inline bool TestConflictingSymbolNames::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void TestConflictingSymbolNames::clear_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TestConflictingSymbolNames::target() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.target)
  return _internal_target();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestConflictingSymbolNames::set_target(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.target_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.target)
}
inline std::string* TestConflictingSymbolNames::mutable_target() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.target)
  return _s;
}
inline const std::string& TestConflictingSymbolNames::_internal_target() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_.Get();
}
inline void TestConflictingSymbolNames::_internal_set_target(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.target_.Set(value, GetArena());
}
inline std::string* TestConflictingSymbolNames::_internal_mutable_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.target_.Mutable( GetArena());
}
inline std::string* TestConflictingSymbolNames::release_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.target)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.target_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestConflictingSymbolNames::set_allocated_target(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.target_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.target_.IsDefault()) {
          _impl_.target_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.target)
}

// -------------------------------------------------------------------

// TestConflictingSymbolNamesExtension

// -------------------------------------------------------------------

// TestConflictingEnumNames

// optional .protobuf_unittest.TestConflictingEnumNames.while conflicting_enum = 1;
inline bool TestConflictingEnumNames::has_conflicting_enum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TestConflictingEnumNames::clear_conflicting_enum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflicting_enum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::protobuf_unittest::TestConflictingEnumNames_while TestConflictingEnumNames::conflicting_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingEnumNames.conflicting_enum)
  return _internal_conflicting_enum();
}
inline void TestConflictingEnumNames::set_conflicting_enum(::protobuf_unittest::TestConflictingEnumNames_while value) {
  _internal_set_conflicting_enum(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingEnumNames.conflicting_enum)
}
inline ::protobuf_unittest::TestConflictingEnumNames_while TestConflictingEnumNames::_internal_conflicting_enum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::protobuf_unittest::TestConflictingEnumNames_while>(_impl_.conflicting_enum_);
}
inline void TestConflictingEnumNames::_internal_set_conflicting_enum(::protobuf_unittest::TestConflictingEnumNames_while value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::protobuf_unittest::TestConflictingEnumNames_while_IsValid(value));
  _impl_.conflicting_enum_ = value;
}

// -------------------------------------------------------------------

// DummyMessage

// -------------------------------------------------------------------

// NULL_

// optional int32 int = 1;
inline bool NULL_::has_int_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NULL_::clear_int_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int__ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t NULL_::int_() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.NULL.int)
  return _internal_int_();
}
inline void NULL_::set_int_(::int32_t value) {
  _internal_set_int_(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:protobuf_unittest.NULL.int)
}
inline ::int32_t NULL_::_internal_int_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int__;
}
inline void NULL_::_internal_set_int_(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int__ = value;
}

// -------------------------------------------------------------------

// Shutdown

// -------------------------------------------------------------------

// TableStruct

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::protobuf_unittest::TestConflictingSymbolNames_TestEnum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf_unittest::TestConflictingSymbolNames_TestEnum>() {
  return ::protobuf_unittest::TestConflictingSymbolNames_TestEnum_descriptor();
}
template <>
struct is_proto_enum<::protobuf_unittest::TestConflictingEnumNames_while> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf_unittest::TestConflictingEnumNames_while>() {
  return ::protobuf_unittest::TestConflictingEnumNames_while_descriptor();
}
template <>
struct is_proto_enum<::protobuf_unittest::bool_> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf_unittest::bool_>() {
  return ::protobuf_unittest::bool__descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_2epb_2eh
