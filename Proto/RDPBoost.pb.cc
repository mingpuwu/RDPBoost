// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RDPBoost.proto

#include "RDPBoost.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_RDPBoost_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndPointInfo_RDPBoost_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RDPBoost_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MouseMessage_RDPBoost_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RDPBoost_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusMessage_RDPBoost_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RDPBoost_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoMessage_RDPBoost_2eproto;
class VideoMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoMessage> _instance;
} _VideoMessage_default_instance_;
class MouseMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MouseMessage> _instance;
} _MouseMessage_default_instance_;
class EndPointInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndPointInfo> _instance;
} _EndPointInfo_default_instance_;
class StatusMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusMessage> _instance;
} _StatusMessage_default_instance_;
class ProtoMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoMessage> _instance;
  const ::VideoMessage* videmessagei_;
  const ::MouseMessage* mousemessagei_;
  const ::EndPointInfo* endpointinfoi_;
  const ::StatusMessage* statusmessagei_;
} _ProtoMessage_default_instance_;
static void InitDefaultsscc_info_EndPointInfo_RDPBoost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EndPointInfo_default_instance_;
    new (ptr) ::EndPointInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EndPointInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndPointInfo_RDPBoost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndPointInfo_RDPBoost_2eproto}, {}};

static void InitDefaultsscc_info_MouseMessage_RDPBoost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MouseMessage_default_instance_;
    new (ptr) ::MouseMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MouseMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MouseMessage_RDPBoost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MouseMessage_RDPBoost_2eproto}, {}};

static void InitDefaultsscc_info_ProtoMessage_RDPBoost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoMessage_default_instance_;
    new (ptr) ::ProtoMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProtoMessage_RDPBoost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ProtoMessage_RDPBoost_2eproto}, {
      &scc_info_VideoMessage_RDPBoost_2eproto.base,
      &scc_info_MouseMessage_RDPBoost_2eproto.base,
      &scc_info_EndPointInfo_RDPBoost_2eproto.base,
      &scc_info_StatusMessage_RDPBoost_2eproto.base,}};

static void InitDefaultsscc_info_StatusMessage_RDPBoost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StatusMessage_default_instance_;
    new (ptr) ::StatusMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StatusMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusMessage_RDPBoost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusMessage_RDPBoost_2eproto}, {}};

static void InitDefaultsscc_info_VideoMessage_RDPBoost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VideoMessage_default_instance_;
    new (ptr) ::VideoMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VideoMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoMessage_RDPBoost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoMessage_RDPBoost_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RDPBoost_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_RDPBoost_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RDPBoost_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RDPBoost_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VideoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VideoMessage, width_),
  PROTOBUF_FIELD_OFFSET(::VideoMessage, height_),
  PROTOBUF_FIELD_OFFSET(::VideoMessage, frame_rate_),
  PROTOBUF_FIELD_OFFSET(::VideoMessage, bit_rate_),
  PROTOBUF_FIELD_OFFSET(::VideoMessage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MouseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MouseMessage, x_),
  PROTOBUF_FIELD_OFFSET(::MouseMessage, y_),
  PROTOBUF_FIELD_OFFSET(::MouseMessage, button_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EndPointInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EndPointInfo, type_),
  PROTOBUF_FIELD_OFFSET(::EndPointInfo, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StatusMessage, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage, type_),
  offsetof(::ProtoMessageDefaultTypeInternal, videmessagei_),
  offsetof(::ProtoMessageDefaultTypeInternal, mousemessagei_),
  offsetof(::ProtoMessageDefaultTypeInternal, endpointinfoi_),
  offsetof(::ProtoMessageDefaultTypeInternal, statusmessagei_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::VideoMessage)},
  { 10, -1, sizeof(::MouseMessage)},
  { 18, -1, sizeof(::EndPointInfo)},
  { 25, -1, sizeof(::StatusMessage)},
  { 31, -1, sizeof(::ProtoMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VideoMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MouseMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EndPointInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StatusMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoMessage_default_instance_),
};

const char descriptor_table_protodef_RDPBoost_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016RDPBoost.proto\"a\n\014VideoMessage\022\r\n\005widt"
  "h\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\022\n\nframe_rate\030\003 "
  "\001(\r\022\020\n\010bit_rate\030\004 \001(\r\022\014\n\004data\030\005 \001(\014\"4\n\014M"
  "ouseMessage\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\016\n\006but"
  "ton\030\003 \001(\r\"r\n\014EndPointInfo\022(\n\004type\030\001 \001(\0162"
  "\032.EndPointInfo.EndPointType\022\n\n\002ID\030\002 \001(\t\""
  ",\n\014EndPointType\022\r\n\tIS_CLIENT\020\000\022\r\n\tIS_SER"
  "VER\020\001\"o\n\rStatusMessage\022)\n\006Status\030\001 \001(\0162\031"
  ".StatusMessage.StatusType\"3\n\nStatusType\022"
  "\021\n\rCLIENT_ONLINE\020\000\022\022\n\016CLIENT_OFFLINE\020\001\"\263"
  "\002\n\014ProtoMessage\022$\n\004type\030\001 \001(\0162\026.ProtoMes"
  "sage.DataType\022%\n\014VideMessageI\030\002 \001(\0132\r.Vi"
  "deoMessageH\000\022&\n\rMouseMessageI\030\003 \001(\0132\r.Mo"
  "useMessageH\000\022&\n\rEndPointInfoI\030\004 \001(\0132\r.En"
  "dPointInfoH\000\022(\n\016StatusMessageI\030\005 \001(\0132\016.S"
  "tatusMessageH\000\"T\n\010DataType\022\021\n\rVIDEO_MESS"
  "AGE\020\000\022\021\n\rMOUSE_MESSAGE\020\001\022\021\n\rENDPOINT_INF"
  "O\020\002\022\017\n\013STATUS_INFO\020\003B\006\n\004datab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_RDPBoost_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_RDPBoost_2eproto_sccs[5] = {
  &scc_info_EndPointInfo_RDPBoost_2eproto.base,
  &scc_info_MouseMessage_RDPBoost_2eproto.base,
  &scc_info_ProtoMessage_RDPBoost_2eproto.base,
  &scc_info_StatusMessage_RDPBoost_2eproto.base,
  &scc_info_VideoMessage_RDPBoost_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RDPBoost_2eproto_once;
static bool descriptor_table_RDPBoost_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RDPBoost_2eproto = {
  &descriptor_table_RDPBoost_2eproto_initialized, descriptor_table_protodef_RDPBoost_2eproto, "RDPBoost.proto", 716,
  &descriptor_table_RDPBoost_2eproto_once, descriptor_table_RDPBoost_2eproto_sccs, descriptor_table_RDPBoost_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_RDPBoost_2eproto::offsets,
  file_level_metadata_RDPBoost_2eproto, 5, file_level_enum_descriptors_RDPBoost_2eproto, file_level_service_descriptors_RDPBoost_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_RDPBoost_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_RDPBoost_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EndPointInfo_EndPointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RDPBoost_2eproto);
  return file_level_enum_descriptors_RDPBoost_2eproto[0];
}
bool EndPointInfo_EndPointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EndPointInfo_EndPointType EndPointInfo::IS_CLIENT;
constexpr EndPointInfo_EndPointType EndPointInfo::IS_SERVER;
constexpr EndPointInfo_EndPointType EndPointInfo::EndPointType_MIN;
constexpr EndPointInfo_EndPointType EndPointInfo::EndPointType_MAX;
constexpr int EndPointInfo::EndPointType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusMessage_StatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RDPBoost_2eproto);
  return file_level_enum_descriptors_RDPBoost_2eproto[1];
}
bool StatusMessage_StatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StatusMessage_StatusType StatusMessage::CLIENT_ONLINE;
constexpr StatusMessage_StatusType StatusMessage::CLIENT_OFFLINE;
constexpr StatusMessage_StatusType StatusMessage::StatusType_MIN;
constexpr StatusMessage_StatusType StatusMessage::StatusType_MAX;
constexpr int StatusMessage::StatusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoMessage_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RDPBoost_2eproto);
  return file_level_enum_descriptors_RDPBoost_2eproto[2];
}
bool ProtoMessage_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProtoMessage_DataType ProtoMessage::VIDEO_MESSAGE;
constexpr ProtoMessage_DataType ProtoMessage::MOUSE_MESSAGE;
constexpr ProtoMessage_DataType ProtoMessage::ENDPOINT_INFO;
constexpr ProtoMessage_DataType ProtoMessage::STATUS_INFO;
constexpr ProtoMessage_DataType ProtoMessage::DataType_MIN;
constexpr ProtoMessage_DataType ProtoMessage::DataType_MAX;
constexpr int ProtoMessage::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void VideoMessage::InitAsDefaultInstance() {
}
class VideoMessage::_Internal {
 public:
};

VideoMessage::VideoMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VideoMessage)
}
VideoMessage::VideoMessage(const VideoMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&bit_rate_) -
    reinterpret_cast<char*>(&width_)) + sizeof(bit_rate_));
  // @@protoc_insertion_point(copy_constructor:VideoMessage)
}

void VideoMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoMessage_RDPBoost_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bit_rate_) -
      reinterpret_cast<char*>(&width_)) + sizeof(bit_rate_));
}

VideoMessage::~VideoMessage() {
  // @@protoc_insertion_point(destructor:VideoMessage)
  SharedDtor();
}

void VideoMessage::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoMessage& VideoMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoMessage_RDPBoost_2eproto.base);
  return *internal_default_instance();
}


void VideoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:VideoMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bit_rate_) -
      reinterpret_cast<char*>(&width_)) + sizeof(bit_rate_));
  _internal_metadata_.Clear();
}

const char* VideoMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frame_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bit_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bit_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VideoMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // uint32 frame_rate = 3;
  if (this->frame_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frame_rate(), target);
  }

  // uint32 bit_rate = 4;
  if (this->bit_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bit_rate(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VideoMessage)
  return target;
}

size_t VideoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VideoMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // uint32 frame_rate = 3;
  if (this->frame_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_rate());
  }

  // uint32 bit_rate = 4;
  if (this->bit_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bit_rate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VideoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VideoMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VideoMessage)
    MergeFrom(*source);
  }
}

void VideoMessage::MergeFrom(const VideoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VideoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.frame_rate() != 0) {
    _internal_set_frame_rate(from._internal_frame_rate());
  }
  if (from.bit_rate() != 0) {
    _internal_set_bit_rate(from._internal_bit_rate());
  }
}

void VideoMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VideoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoMessage::CopyFrom(const VideoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VideoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMessage::IsInitialized() const {
  return true;
}

void VideoMessage::InternalSwap(VideoMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(frame_rate_, other->frame_rate_);
  swap(bit_rate_, other->bit_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MouseMessage::InitAsDefaultInstance() {
}
class MouseMessage::_Internal {
 public:
};

MouseMessage::MouseMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MouseMessage)
}
MouseMessage::MouseMessage(const MouseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_) -
    reinterpret_cast<char*>(&x_)) + sizeof(button_));
  // @@protoc_insertion_point(copy_constructor:MouseMessage)
}

void MouseMessage::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_) -
      reinterpret_cast<char*>(&x_)) + sizeof(button_));
}

MouseMessage::~MouseMessage() {
  // @@protoc_insertion_point(destructor:MouseMessage)
  SharedDtor();
}

void MouseMessage::SharedDtor() {
}

void MouseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MouseMessage& MouseMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MouseMessage_RDPBoost_2eproto.base);
  return *internal_default_instance();
}


void MouseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MouseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_) -
      reinterpret_cast<char*>(&x_)) + sizeof(button_));
  _internal_metadata_.Clear();
}

const char* MouseMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 button = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MouseMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MouseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  // uint32 button = 3;
  if (this->button() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_button(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MouseMessage)
  return target;
}

size_t MouseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MouseMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());
  }

  // uint32 button = 3;
  if (this->button() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_button());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MouseMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MouseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MouseMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MouseMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MouseMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MouseMessage)
    MergeFrom(*source);
  }
}

void MouseMessage::MergeFrom(const MouseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MouseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.button() != 0) {
    _internal_set_button(from._internal_button());
  }
}

void MouseMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MouseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseMessage::CopyFrom(const MouseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MouseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseMessage::IsInitialized() const {
  return true;
}

void MouseMessage::InternalSwap(MouseMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(button_, other->button_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MouseMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndPointInfo::InitAsDefaultInstance() {
}
class EndPointInfo::_Internal {
 public:
};

EndPointInfo::EndPointInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndPointInfo)
}
EndPointInfo::EndPointInfo(const EndPointInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:EndPointInfo)
}

void EndPointInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndPointInfo_RDPBoost_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

EndPointInfo::~EndPointInfo() {
  // @@protoc_insertion_point(destructor:EndPointInfo)
  SharedDtor();
}

void EndPointInfo::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EndPointInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndPointInfo& EndPointInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndPointInfo_RDPBoost_2eproto.base);
  return *internal_default_instance();
}


void EndPointInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:EndPointInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* EndPointInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .EndPointInfo.EndPointType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::EndPointInfo_EndPointType>(val));
        } else goto handle_unusual;
        continue;
      // string ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EndPointInfo.ID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndPointInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EndPointInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .EndPointInfo.EndPointType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string ID = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EndPointInfo.ID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndPointInfo)
  return target;
}

size_t EndPointInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndPointInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .EndPointInfo.EndPointType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndPointInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EndPointInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EndPointInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndPointInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EndPointInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EndPointInfo)
    MergeFrom(*source);
  }
}

void EndPointInfo::MergeFrom(const EndPointInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndPointInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void EndPointInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EndPointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndPointInfo::CopyFrom(const EndPointInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndPointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndPointInfo::IsInitialized() const {
  return true;
}

void EndPointInfo::InternalSwap(EndPointInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndPointInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusMessage::InitAsDefaultInstance() {
}
class StatusMessage::_Internal {
 public:
};

StatusMessage::StatusMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StatusMessage)
}
StatusMessage::StatusMessage(const StatusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:StatusMessage)
}

void StatusMessage::SharedCtor() {
  status_ = 0;
}

StatusMessage::~StatusMessage() {
  // @@protoc_insertion_point(destructor:StatusMessage)
  SharedDtor();
}

void StatusMessage::SharedDtor() {
}

void StatusMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusMessage& StatusMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusMessage_RDPBoost_2eproto.base);
  return *internal_default_instance();
}


void StatusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* StatusMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .StatusMessage.StatusType Status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::StatusMessage_StatusType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .StatusMessage.StatusType Status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatusMessage)
  return target;
}

size_t StatusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .StatusMessage.StatusType Status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StatusMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StatusMessage)
    MergeFrom(*source);
  }
}

void StatusMessage::MergeFrom(const StatusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void StatusMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusMessage::CopyFrom(const StatusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusMessage::IsInitialized() const {
  return true;
}

void StatusMessage::InternalSwap(StatusMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProtoMessage::InitAsDefaultInstance() {
  ::_ProtoMessage_default_instance_.videmessagei_ = const_cast< ::VideoMessage*>(
      ::VideoMessage::internal_default_instance());
  ::_ProtoMessage_default_instance_.mousemessagei_ = const_cast< ::MouseMessage*>(
      ::MouseMessage::internal_default_instance());
  ::_ProtoMessage_default_instance_.endpointinfoi_ = const_cast< ::EndPointInfo*>(
      ::EndPointInfo::internal_default_instance());
  ::_ProtoMessage_default_instance_.statusmessagei_ = const_cast< ::StatusMessage*>(
      ::StatusMessage::internal_default_instance());
}
class ProtoMessage::_Internal {
 public:
  static const ::VideoMessage& videmessagei(const ProtoMessage* msg);
  static const ::MouseMessage& mousemessagei(const ProtoMessage* msg);
  static const ::EndPointInfo& endpointinfoi(const ProtoMessage* msg);
  static const ::StatusMessage& statusmessagei(const ProtoMessage* msg);
};

const ::VideoMessage&
ProtoMessage::_Internal::videmessagei(const ProtoMessage* msg) {
  return *msg->data_.videmessagei_;
}
const ::MouseMessage&
ProtoMessage::_Internal::mousemessagei(const ProtoMessage* msg) {
  return *msg->data_.mousemessagei_;
}
const ::EndPointInfo&
ProtoMessage::_Internal::endpointinfoi(const ProtoMessage* msg) {
  return *msg->data_.endpointinfoi_;
}
const ::StatusMessage&
ProtoMessage::_Internal::statusmessagei(const ProtoMessage* msg) {
  return *msg->data_.statusmessagei_;
}
void ProtoMessage::set_allocated_videmessagei(::VideoMessage* videmessagei) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (videmessagei) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      videmessagei = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videmessagei, submessage_arena);
    }
    set_has_videmessagei();
    data_.videmessagei_ = videmessagei;
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.VideMessageI)
}
void ProtoMessage::set_allocated_mousemessagei(::MouseMessage* mousemessagei) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (mousemessagei) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mousemessagei = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mousemessagei, submessage_arena);
    }
    set_has_mousemessagei();
    data_.mousemessagei_ = mousemessagei;
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.MouseMessageI)
}
void ProtoMessage::set_allocated_endpointinfoi(::EndPointInfo* endpointinfoi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (endpointinfoi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      endpointinfoi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpointinfoi, submessage_arena);
    }
    set_has_endpointinfoi();
    data_.endpointinfoi_ = endpointinfoi;
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.EndPointInfoI)
}
void ProtoMessage::set_allocated_statusmessagei(::StatusMessage* statusmessagei) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (statusmessagei) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      statusmessagei = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusmessagei, submessage_arena);
    }
    set_has_statusmessagei();
    data_.statusmessagei_ = statusmessagei;
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.StatusMessageI)
}
ProtoMessage::ProtoMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMessage)
}
ProtoMessage::ProtoMessage(const ProtoMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_data();
  switch (from.data_case()) {
    case kVideMessageI: {
      _internal_mutable_videmessagei()->::VideoMessage::MergeFrom(from._internal_videmessagei());
      break;
    }
    case kMouseMessageI: {
      _internal_mutable_mousemessagei()->::MouseMessage::MergeFrom(from._internal_mousemessagei());
      break;
    }
    case kEndPointInfoI: {
      _internal_mutable_endpointinfoi()->::EndPointInfo::MergeFrom(from._internal_endpointinfoi());
      break;
    }
    case kStatusMessageI: {
      _internal_mutable_statusmessagei()->::StatusMessage::MergeFrom(from._internal_statusmessagei());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ProtoMessage)
}

void ProtoMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoMessage_RDPBoost_2eproto.base);
  type_ = 0;
  clear_has_data();
}

ProtoMessage::~ProtoMessage() {
  // @@protoc_insertion_point(destructor:ProtoMessage)
  SharedDtor();
}

void ProtoMessage::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void ProtoMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoMessage& ProtoMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoMessage_RDPBoost_2eproto.base);
  return *internal_default_instance();
}


void ProtoMessage::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:ProtoMessage)
  switch (data_case()) {
    case kVideMessageI: {
      delete data_.videmessagei_;
      break;
    }
    case kMouseMessageI: {
      delete data_.mousemessagei_;
      break;
    }
    case kEndPointInfoI: {
      delete data_.endpointinfoi_;
      break;
    }
    case kStatusMessageI: {
      delete data_.statusmessagei_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void ProtoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_data();
  _internal_metadata_.Clear();
}

const char* ProtoMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ProtoMessage.DataType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ProtoMessage_DataType>(val));
        } else goto handle_unusual;
        continue;
      // .VideoMessage VideMessageI = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_videmessagei(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MouseMessage MouseMessageI = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mousemessagei(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EndPointInfo EndPointInfoI = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpointinfoi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .StatusMessage StatusMessageI = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_statusmessagei(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProtoMessage.DataType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .VideoMessage VideMessageI = 2;
  if (_internal_has_videmessagei()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::videmessagei(this), target, stream);
  }

  // .MouseMessage MouseMessageI = 3;
  if (_internal_has_mousemessagei()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mousemessagei(this), target, stream);
  }

  // .EndPointInfo EndPointInfoI = 4;
  if (_internal_has_endpointinfoi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::endpointinfoi(this), target, stream);
  }

  // .StatusMessage StatusMessageI = 5;
  if (_internal_has_statusmessagei()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::statusmessagei(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage)
  return target;
}

size_t ProtoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ProtoMessage.DataType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (data_case()) {
    // .VideoMessage VideMessageI = 2;
    case kVideMessageI: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.videmessagei_);
      break;
    }
    // .MouseMessage MouseMessageI = 3;
    case kMouseMessageI: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.mousemessagei_);
      break;
    }
    // .EndPointInfo EndPointInfoI = 4;
    case kEndPointInfoI: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.endpointinfoi_);
      break;
    }
    // .StatusMessage StatusMessageI = 5;
    case kStatusMessageI: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.statusmessagei_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage)
    MergeFrom(*source);
  }
}

void ProtoMessage::MergeFrom(const ProtoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.data_case()) {
    case kVideMessageI: {
      _internal_mutable_videmessagei()->::VideoMessage::MergeFrom(from._internal_videmessagei());
      break;
    }
    case kMouseMessageI: {
      _internal_mutable_mousemessagei()->::MouseMessage::MergeFrom(from._internal_mousemessagei());
      break;
    }
    case kEndPointInfoI: {
      _internal_mutable_endpointinfoi()->::EndPointInfo::MergeFrom(from._internal_endpointinfoi());
      break;
    }
    case kStatusMessageI: {
      _internal_mutable_statusmessagei()->::StatusMessage::MergeFrom(from._internal_statusmessagei());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void ProtoMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage::CopyFrom(const ProtoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage::IsInitialized() const {
  return true;
}

void ProtoMessage::InternalSwap(ProtoMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VideoMessage* Arena::CreateMaybeMessage< ::VideoMessage >(Arena* arena) {
  return Arena::CreateInternal< ::VideoMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MouseMessage* Arena::CreateMaybeMessage< ::MouseMessage >(Arena* arena) {
  return Arena::CreateInternal< ::MouseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EndPointInfo* Arena::CreateMaybeMessage< ::EndPointInfo >(Arena* arena) {
  return Arena::CreateInternal< ::EndPointInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StatusMessage* Arena::CreateMaybeMessage< ::StatusMessage >(Arena* arena) {
  return Arena::CreateInternal< ::StatusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoMessage* Arena::CreateMaybeMessage< ::ProtoMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
