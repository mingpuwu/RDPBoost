// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RDPBoost.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RDPBoost_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RDPBoost_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RDPBoost_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RDPBoost_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RDPBoost_2eproto;
class EndPointInfo;
class EndPointInfoDefaultTypeInternal;
extern EndPointInfoDefaultTypeInternal _EndPointInfo_default_instance_;
class MouseMessage;
class MouseMessageDefaultTypeInternal;
extern MouseMessageDefaultTypeInternal _MouseMessage_default_instance_;
class ProtoMessage;
class ProtoMessageDefaultTypeInternal;
extern ProtoMessageDefaultTypeInternal _ProtoMessage_default_instance_;
class VideoMessage;
class VideoMessageDefaultTypeInternal;
extern VideoMessageDefaultTypeInternal _VideoMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EndPointInfo* Arena::CreateMaybeMessage<::EndPointInfo>(Arena*);
template<> ::MouseMessage* Arena::CreateMaybeMessage<::MouseMessage>(Arena*);
template<> ::ProtoMessage* Arena::CreateMaybeMessage<::ProtoMessage>(Arena*);
template<> ::VideoMessage* Arena::CreateMaybeMessage<::VideoMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EndPointInfo_EndPointType : int {
  EndPointInfo_EndPointType_IS_CLIENT = 0,
  EndPointInfo_EndPointType_IS_SERVER = 1,
  EndPointInfo_EndPointType_EndPointInfo_EndPointType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EndPointInfo_EndPointType_EndPointInfo_EndPointType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EndPointInfo_EndPointType_IsValid(int value);
constexpr EndPointInfo_EndPointType EndPointInfo_EndPointType_EndPointType_MIN = EndPointInfo_EndPointType_IS_CLIENT;
constexpr EndPointInfo_EndPointType EndPointInfo_EndPointType_EndPointType_MAX = EndPointInfo_EndPointType_IS_SERVER;
constexpr int EndPointInfo_EndPointType_EndPointType_ARRAYSIZE = EndPointInfo_EndPointType_EndPointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EndPointInfo_EndPointType_descriptor();
template<typename T>
inline const std::string& EndPointInfo_EndPointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EndPointInfo_EndPointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EndPointInfo_EndPointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EndPointInfo_EndPointType_descriptor(), enum_t_value);
}
inline bool EndPointInfo_EndPointType_Parse(
    const std::string& name, EndPointInfo_EndPointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EndPointInfo_EndPointType>(
    EndPointInfo_EndPointType_descriptor(), name, value);
}
enum ProtoMessage_DataType : int {
  ProtoMessage_DataType_VIDEO_MESSAGE = 0,
  ProtoMessage_DataType_MOUSE_MESSAGE = 1,
  ProtoMessage_DataType_ENDPOINT_INFO = 2,
  ProtoMessage_DataType_ProtoMessage_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProtoMessage_DataType_ProtoMessage_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProtoMessage_DataType_IsValid(int value);
constexpr ProtoMessage_DataType ProtoMessage_DataType_DataType_MIN = ProtoMessage_DataType_VIDEO_MESSAGE;
constexpr ProtoMessage_DataType ProtoMessage_DataType_DataType_MAX = ProtoMessage_DataType_ENDPOINT_INFO;
constexpr int ProtoMessage_DataType_DataType_ARRAYSIZE = ProtoMessage_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoMessage_DataType_descriptor();
template<typename T>
inline const std::string& ProtoMessage_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtoMessage_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtoMessage_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtoMessage_DataType_descriptor(), enum_t_value);
}
inline bool ProtoMessage_DataType_Parse(
    const std::string& name, ProtoMessage_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtoMessage_DataType>(
    ProtoMessage_DataType_descriptor(), name, value);
}
enum EndPointInfo_EndPointType : int {
  EndPointInfo_EndPointType_UNKNOWN = 0,
  EndPointInfo_EndPointType_SERVER = 1,
  EndPointInfo_EndPointType_CLIENT = 2,
  EndPointInfo_EndPointType_EndPointInfo_EndPointType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EndPointInfo_EndPointType_EndPointInfo_EndPointType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EndPointInfo_EndPointType_IsValid(int value);
constexpr EndPointInfo_EndPointType EndPointInfo_EndPointType_EndPointType_MIN = EndPointInfo_EndPointType_UNKNOWN;
constexpr EndPointInfo_EndPointType EndPointInfo_EndPointType_EndPointType_MAX = EndPointInfo_EndPointType_CLIENT;
constexpr int EndPointInfo_EndPointType_EndPointType_ARRAYSIZE = EndPointInfo_EndPointType_EndPointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EndPointInfo_EndPointType_descriptor();
template<typename T>
inline const std::string& EndPointInfo_EndPointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EndPointInfo_EndPointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EndPointInfo_EndPointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EndPointInfo_EndPointType_descriptor(), enum_t_value);
}
inline bool EndPointInfo_EndPointType_Parse(
    const std::string& name, EndPointInfo_EndPointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EndPointInfo_EndPointType>(
    EndPointInfo_EndPointType_descriptor(), name, value);
}
// ===================================================================

class VideoMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VideoMessage) */ {
 public:
  VideoMessage();
  virtual ~VideoMessage();

  VideoMessage(const VideoMessage& from);
  VideoMessage(VideoMessage&& from) noexcept
    : VideoMessage() {
    *this = ::std::move(from);
  }

  inline VideoMessage& operator=(const VideoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoMessage& operator=(VideoMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoMessage* internal_default_instance() {
    return reinterpret_cast<const VideoMessage*>(
               &_VideoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VideoMessage& a, VideoMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoMessage* New() const final {
    return CreateMaybeMessage<VideoMessage>(nullptr);
  }

  VideoMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoMessage& from);
  void MergeFrom(const VideoMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VideoMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RDPBoost_2eproto);
    return ::descriptor_table_RDPBoost_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kFrameRateFieldNumber = 3,
    kBitRateFieldNumber = 4,
  };
  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 frame_rate = 3;
  void clear_frame_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_rate() const;
  void set_frame_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_rate() const;
  void _internal_set_frame_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bit_rate = 4;
  void clear_bit_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 bit_rate() const;
  void set_bit_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bit_rate() const;
  void _internal_set_bit_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:VideoMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bit_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RDPBoost_2eproto;
};
// -------------------------------------------------------------------

class MouseMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MouseMessage) */ {
 public:
  MouseMessage();
  virtual ~MouseMessage();

  MouseMessage(const MouseMessage& from);
  MouseMessage(MouseMessage&& from) noexcept
    : MouseMessage() {
    *this = ::std::move(from);
  }

  inline MouseMessage& operator=(const MouseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MouseMessage& operator=(MouseMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MouseMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MouseMessage* internal_default_instance() {
    return reinterpret_cast<const MouseMessage*>(
               &_MouseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MouseMessage& a, MouseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MouseMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MouseMessage* New() const final {
    return CreateMaybeMessage<MouseMessage>(nullptr);
  }

  MouseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MouseMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MouseMessage& from);
  void MergeFrom(const MouseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MouseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MouseMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RDPBoost_2eproto);
    return ::descriptor_table_RDPBoost_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kButtonFieldNumber = 3,
  };
  // uint32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 button = 3;
  void clear_button();
  ::PROTOBUF_NAMESPACE_ID::uint32 button() const;
  void set_button(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_button() const;
  void _internal_set_button(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MouseMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 button_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RDPBoost_2eproto;
};
// -------------------------------------------------------------------

class EndPointInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EndPointInfo) */ {
 public:
  EndPointInfo();
  virtual ~EndPointInfo();

  EndPointInfo(const EndPointInfo& from);
  EndPointInfo(EndPointInfo&& from) noexcept
    : EndPointInfo() {
    *this = ::std::move(from);
  }

  inline EndPointInfo& operator=(const EndPointInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndPointInfo& operator=(EndPointInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndPointInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndPointInfo* internal_default_instance() {
    return reinterpret_cast<const EndPointInfo*>(
               &_EndPointInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EndPointInfo& a, EndPointInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EndPointInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndPointInfo* New() const final {
    return CreateMaybeMessage<EndPointInfo>(nullptr);
  }

  EndPointInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndPointInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndPointInfo& from);
  void MergeFrom(const EndPointInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndPointInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EndPointInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RDPBoost_2eproto);
    return ::descriptor_table_RDPBoost_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EndPointInfo_EndPointType EndPointType;
  static constexpr EndPointType IS_CLIENT =
    EndPointInfo_EndPointType_IS_CLIENT;
  static constexpr EndPointType IS_SERVER =
    EndPointInfo_EndPointType_IS_SERVER;
  static inline bool EndPointType_IsValid(int value) {
    return EndPointInfo_EndPointType_IsValid(value);
  }
  static constexpr EndPointType EndPointType_MIN =
    EndPointInfo_EndPointType_EndPointType_MIN;
  static constexpr EndPointType EndPointType_MAX =
    EndPointInfo_EndPointType_EndPointType_MAX;
  static constexpr int EndPointType_ARRAYSIZE =
    EndPointInfo_EndPointType_EndPointType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EndPointType_descriptor() {
    return EndPointInfo_EndPointType_descriptor();
  }
  template<typename T>
  static inline const std::string& EndPointType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EndPointType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EndPointType_Name.");
    return EndPointInfo_EndPointType_Name(enum_t_value);
  }
  static inline bool EndPointType_Parse(const std::string& name,
      EndPointType* value) {
    return EndPointInfo_EndPointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string ID = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .EndPointInfo.EndPointType type = 1;
  void clear_type();
  ::EndPointInfo_EndPointType type() const;
  void set_type(::EndPointInfo_EndPointType value);
  private:
  ::EndPointInfo_EndPointType _internal_type() const;
  void _internal_set_type(::EndPointInfo_EndPointType value);
  public:

  // @@protoc_insertion_point(class_scope:EndPointInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RDPBoost_2eproto;
};
// -------------------------------------------------------------------

class ProtoMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMessage) */ {
 public:
  ProtoMessage();
  virtual ~ProtoMessage();

  ProtoMessage(const ProtoMessage& from);
  ProtoMessage(ProtoMessage&& from) noexcept
    : ProtoMessage() {
    *this = ::std::move(from);
  }

  inline ProtoMessage& operator=(const ProtoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoMessage& operator=(ProtoMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoMessage& default_instance();

  enum DataCase {
    kVideMessageI = 2,
    kMouseMessageI = 3,
    kEndPointInfoI = 4,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoMessage* internal_default_instance() {
    return reinterpret_cast<const ProtoMessage*>(
               &_ProtoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProtoMessage& a, ProtoMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoMessage* New() const final {
    return CreateMaybeMessage<ProtoMessage>(nullptr);
  }

  ProtoMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoMessage& from);
  void MergeFrom(const ProtoMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RDPBoost_2eproto);
    return ::descriptor_table_RDPBoost_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProtoMessage_DataType DataType;
  static constexpr DataType VIDEO_MESSAGE =
    ProtoMessage_DataType_VIDEO_MESSAGE;
  static constexpr DataType MOUSE_MESSAGE =
    ProtoMessage_DataType_MOUSE_MESSAGE;
  static constexpr DataType ENDPOINT_INFO =
    ProtoMessage_DataType_ENDPOINT_INFO;
  static inline bool DataType_IsValid(int value) {
    return ProtoMessage_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    ProtoMessage_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    ProtoMessage_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    ProtoMessage_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return ProtoMessage_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return ProtoMessage_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(const std::string& name,
      DataType* value) {
    return ProtoMessage_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kVideMessageIFieldNumber = 2,
    kMouseMessageIFieldNumber = 3,
    kEndPointInfoIFieldNumber = 4,
  };
  // .ProtoMessage.DataType type = 1;
  void clear_type();
  ::ProtoMessage_DataType type() const;
  void set_type(::ProtoMessage_DataType value);
  private:
  ::ProtoMessage_DataType _internal_type() const;
  void _internal_set_type(::ProtoMessage_DataType value);
  public:

  // .VideoMessage VideMessageI = 2;
  bool has_videmessagei() const;
  private:
  bool _internal_has_videmessagei() const;
  public:
  void clear_videmessagei();
  const ::VideoMessage& videmessagei() const;
  ::VideoMessage* release_videmessagei();
  ::VideoMessage* mutable_videmessagei();
  void set_allocated_videmessagei(::VideoMessage* videmessagei);
  private:
  const ::VideoMessage& _internal_videmessagei() const;
  ::VideoMessage* _internal_mutable_videmessagei();
  public:

  // .MouseMessage MouseMessageI = 3;
  bool has_mousemessagei() const;
  private:
  bool _internal_has_mousemessagei() const;
  public:
  void clear_mousemessagei();
  const ::MouseMessage& mousemessagei() const;
  ::MouseMessage* release_mousemessagei();
  ::MouseMessage* mutable_mousemessagei();
  void set_allocated_mousemessagei(::MouseMessage* mousemessagei);
  private:
  const ::MouseMessage& _internal_mousemessagei() const;
  ::MouseMessage* _internal_mutable_mousemessagei();
  public:

  // .EndPointInfo EndPointInfoI = 4;
  bool has_endpointinfoi() const;
  private:
  bool _internal_has_endpointinfoi() const;
  public:
  void clear_endpointinfoi();
  const ::EndPointInfo& endpointinfoi() const;
  ::EndPointInfo* release_endpointinfoi();
  ::EndPointInfo* mutable_endpointinfoi();
  void set_allocated_endpointinfoi(::EndPointInfo* endpointinfoi);
  private:
  const ::EndPointInfo& _internal_endpointinfoi() const;
  ::EndPointInfo* _internal_mutable_endpointinfoi();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:ProtoMessage)
 private:
  class _Internal;
  void set_has_videmessagei();
  void set_has_mousemessagei();
  void set_has_endpointinfoi();

  inline bool has_data() const;
  inline void clear_has_data();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union DataUnion {
    DataUnion() {}
    ::VideoMessage* videmessagei_;
    ::MouseMessage* mousemessagei_;
    ::EndPointInfo* endpointinfoi_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_RDPBoost_2eproto;
};
// -------------------------------------------------------------------

class EndPointInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EndPointInfo) */ {
 public:
  EndPointInfo();
  virtual ~EndPointInfo();

  EndPointInfo(const EndPointInfo& from);
  EndPointInfo(EndPointInfo&& from) noexcept
    : EndPointInfo() {
    *this = ::std::move(from);
  }

  inline EndPointInfo& operator=(const EndPointInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndPointInfo& operator=(EndPointInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndPointInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndPointInfo* internal_default_instance() {
    return reinterpret_cast<const EndPointInfo*>(
               &_EndPointInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EndPointInfo& a, EndPointInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EndPointInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndPointInfo* New() const final {
    return CreateMaybeMessage<EndPointInfo>(nullptr);
  }

  EndPointInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndPointInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndPointInfo& from);
  void MergeFrom(const EndPointInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndPointInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EndPointInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RDPBoost_2eproto);
    return ::descriptor_table_RDPBoost_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EndPointInfo_EndPointType EndPointType;
  static constexpr EndPointType UNKNOWN =
    EndPointInfo_EndPointType_UNKNOWN;
  static constexpr EndPointType SERVER =
    EndPointInfo_EndPointType_SERVER;
  static constexpr EndPointType CLIENT =
    EndPointInfo_EndPointType_CLIENT;
  static inline bool EndPointType_IsValid(int value) {
    return EndPointInfo_EndPointType_IsValid(value);
  }
  static constexpr EndPointType EndPointType_MIN =
    EndPointInfo_EndPointType_EndPointType_MIN;
  static constexpr EndPointType EndPointType_MAX =
    EndPointInfo_EndPointType_EndPointType_MAX;
  static constexpr int EndPointType_ARRAYSIZE =
    EndPointInfo_EndPointType_EndPointType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EndPointType_descriptor() {
    return EndPointInfo_EndPointType_descriptor();
  }
  template<typename T>
  static inline const std::string& EndPointType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EndPointType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EndPointType_Name.");
    return EndPointInfo_EndPointType_Name(enum_t_value);
  }
  static inline bool EndPointType_Parse(const std::string& name,
      EndPointType* value) {
    return EndPointInfo_EndPointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .EndPointInfo.EndPointType type = 1;
  void clear_type();
  ::EndPointInfo_EndPointType type() const;
  void set_type(::EndPointInfo_EndPointType value);
  private:
  ::EndPointInfo_EndPointType _internal_type() const;
  void _internal_set_type(::EndPointInfo_EndPointType value);
  public:

  // @@protoc_insertion_point(class_scope:EndPointInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RDPBoost_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VideoMessage

// uint32 width = 1;
inline void VideoMessage::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoMessage::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoMessage::width() const {
  // @@protoc_insertion_point(field_get:VideoMessage.width)
  return _internal_width();
}
inline void VideoMessage::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void VideoMessage::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:VideoMessage.width)
}

// uint32 height = 2;
inline void VideoMessage::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoMessage::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoMessage::height() const {
  // @@protoc_insertion_point(field_get:VideoMessage.height)
  return _internal_height();
}
inline void VideoMessage::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void VideoMessage::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:VideoMessage.height)
}

// uint32 frame_rate = 3;
inline void VideoMessage::clear_frame_rate() {
  frame_rate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoMessage::_internal_frame_rate() const {
  return frame_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoMessage::frame_rate() const {
  // @@protoc_insertion_point(field_get:VideoMessage.frame_rate)
  return _internal_frame_rate();
}
inline void VideoMessage::_internal_set_frame_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frame_rate_ = value;
}
inline void VideoMessage::set_frame_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_rate(value);
  // @@protoc_insertion_point(field_set:VideoMessage.frame_rate)
}

// uint32 bit_rate = 4;
inline void VideoMessage::clear_bit_rate() {
  bit_rate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoMessage::_internal_bit_rate() const {
  return bit_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoMessage::bit_rate() const {
  // @@protoc_insertion_point(field_get:VideoMessage.bit_rate)
  return _internal_bit_rate();
}
inline void VideoMessage::_internal_set_bit_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bit_rate_ = value;
}
inline void VideoMessage::set_bit_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bit_rate(value);
  // @@protoc_insertion_point(field_set:VideoMessage.bit_rate)
}

// bytes data = 5;
inline void VideoMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoMessage::data() const {
  // @@protoc_insertion_point(field_get:VideoMessage.data)
  return _internal_data();
}
inline void VideoMessage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:VideoMessage.data)
}
inline std::string* VideoMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:VideoMessage.data)
  return _internal_mutable_data();
}
inline const std::string& VideoMessage::_internal_data() const {
  return data_.GetNoArena();
}
inline void VideoMessage::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoMessage::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VideoMessage.data)
}
inline void VideoMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VideoMessage.data)
}
inline void VideoMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VideoMessage.data)
}
inline std::string* VideoMessage::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoMessage::release_data() {
  // @@protoc_insertion_point(field_release:VideoMessage.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:VideoMessage.data)
}

// -------------------------------------------------------------------

// MouseMessage

// uint32 x = 1;
inline void MouseMessage::clear_x() {
  x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseMessage::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseMessage::x() const {
  // @@protoc_insertion_point(field_get:MouseMessage.x)
  return _internal_x();
}
inline void MouseMessage::_internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  x_ = value;
}
inline void MouseMessage::set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:MouseMessage.x)
}

// uint32 y = 2;
inline void MouseMessage::clear_y() {
  y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseMessage::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseMessage::y() const {
  // @@protoc_insertion_point(field_get:MouseMessage.y)
  return _internal_y();
}
inline void MouseMessage::_internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  y_ = value;
}
inline void MouseMessage::set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:MouseMessage.y)
}

// uint32 button = 3;
inline void MouseMessage::clear_button() {
  button_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseMessage::_internal_button() const {
  return button_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseMessage::button() const {
  // @@protoc_insertion_point(field_get:MouseMessage.button)
  return _internal_button();
}
inline void MouseMessage::_internal_set_button(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  button_ = value;
}
inline void MouseMessage::set_button(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_button(value);
  // @@protoc_insertion_point(field_set:MouseMessage.button)
}

// -------------------------------------------------------------------

// EndPointInfo

// .EndPointInfo.EndPointType type = 1;
inline void EndPointInfo::clear_type() {
  type_ = 0;
}
inline ::EndPointInfo_EndPointType EndPointInfo::_internal_type() const {
  return static_cast< ::EndPointInfo_EndPointType >(type_);
}
inline ::EndPointInfo_EndPointType EndPointInfo::type() const {
  // @@protoc_insertion_point(field_get:EndPointInfo.type)
  return _internal_type();
}
inline void EndPointInfo::_internal_set_type(::EndPointInfo_EndPointType value) {
  
  type_ = value;
}
inline void EndPointInfo::set_type(::EndPointInfo_EndPointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:EndPointInfo.type)
}

// string ID = 2;
inline void EndPointInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EndPointInfo::id() const {
  // @@protoc_insertion_point(field_get:EndPointInfo.ID)
  return _internal_id();
}
inline void EndPointInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EndPointInfo.ID)
}
inline std::string* EndPointInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:EndPointInfo.ID)
  return _internal_mutable_id();
}
inline const std::string& EndPointInfo::_internal_id() const {
  return id_.GetNoArena();
}
inline void EndPointInfo::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EndPointInfo::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EndPointInfo.ID)
}
inline void EndPointInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EndPointInfo.ID)
}
inline void EndPointInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EndPointInfo.ID)
}
inline std::string* EndPointInfo::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndPointInfo::release_id() {
  // @@protoc_insertion_point(field_release:EndPointInfo.ID)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndPointInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:EndPointInfo.ID)
}

// -------------------------------------------------------------------

// ProtoMessage

// .ProtoMessage.DataType type = 1;
inline void ProtoMessage::clear_type() {
  type_ = 0;
}
inline ::ProtoMessage_DataType ProtoMessage::_internal_type() const {
  return static_cast< ::ProtoMessage_DataType >(type_);
}
inline ::ProtoMessage_DataType ProtoMessage::type() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.type)
  return _internal_type();
}
inline void ProtoMessage::_internal_set_type(::ProtoMessage_DataType value) {
  
  type_ = value;
}
inline void ProtoMessage::set_type(::ProtoMessage_DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.type)
}

// .VideoMessage VideMessageI = 2;
inline bool ProtoMessage::_internal_has_videmessagei() const {
  return data_case() == kVideMessageI;
}
inline bool ProtoMessage::has_videmessagei() const {
  return _internal_has_videmessagei();
}
inline void ProtoMessage::set_has_videmessagei() {
  _oneof_case_[0] = kVideMessageI;
}
inline void ProtoMessage::clear_videmessagei() {
  if (_internal_has_videmessagei()) {
    delete data_.videmessagei_;
    clear_has_data();
  }
}
inline ::VideoMessage* ProtoMessage::release_videmessagei() {
  // @@protoc_insertion_point(field_release:ProtoMessage.VideMessageI)
  if (_internal_has_videmessagei()) {
    clear_has_data();
      ::VideoMessage* temp = data_.videmessagei_;
    data_.videmessagei_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VideoMessage& ProtoMessage::_internal_videmessagei() const {
  return _internal_has_videmessagei()
      ? *data_.videmessagei_
      : *reinterpret_cast< ::VideoMessage*>(&::_VideoMessage_default_instance_);
}
inline const ::VideoMessage& ProtoMessage::videmessagei() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.VideMessageI)
  return _internal_videmessagei();
}
inline ::VideoMessage* ProtoMessage::_internal_mutable_videmessagei() {
  if (!_internal_has_videmessagei()) {
    clear_data();
    set_has_videmessagei();
    data_.videmessagei_ = CreateMaybeMessage< ::VideoMessage >(
        GetArenaNoVirtual());
  }
  return data_.videmessagei_;
}
inline ::VideoMessage* ProtoMessage::mutable_videmessagei() {
  // @@protoc_insertion_point(field_mutable:ProtoMessage.VideMessageI)
  return _internal_mutable_videmessagei();
}

// .MouseMessage MouseMessageI = 3;
inline bool ProtoMessage::_internal_has_mousemessagei() const {
  return data_case() == kMouseMessageI;
}
inline bool ProtoMessage::has_mousemessagei() const {
  return _internal_has_mousemessagei();
}
inline void ProtoMessage::set_has_mousemessagei() {
  _oneof_case_[0] = kMouseMessageI;
}
inline void ProtoMessage::clear_mousemessagei() {
  if (_internal_has_mousemessagei()) {
    delete data_.mousemessagei_;
    clear_has_data();
  }
}
inline ::MouseMessage* ProtoMessage::release_mousemessagei() {
  // @@protoc_insertion_point(field_release:ProtoMessage.MouseMessageI)
  if (_internal_has_mousemessagei()) {
    clear_has_data();
      ::MouseMessage* temp = data_.mousemessagei_;
    data_.mousemessagei_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MouseMessage& ProtoMessage::_internal_mousemessagei() const {
  return _internal_has_mousemessagei()
      ? *data_.mousemessagei_
      : *reinterpret_cast< ::MouseMessage*>(&::_MouseMessage_default_instance_);
}
inline const ::MouseMessage& ProtoMessage::mousemessagei() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.MouseMessageI)
  return _internal_mousemessagei();
}
inline ::MouseMessage* ProtoMessage::_internal_mutable_mousemessagei() {
  if (!_internal_has_mousemessagei()) {
    clear_data();
    set_has_mousemessagei();
    data_.mousemessagei_ = CreateMaybeMessage< ::MouseMessage >(
        GetArenaNoVirtual());
  }
  return data_.mousemessagei_;
}
inline ::MouseMessage* ProtoMessage::mutable_mousemessagei() {
  // @@protoc_insertion_point(field_mutable:ProtoMessage.MouseMessageI)
  return _internal_mutable_mousemessagei();
}

// .EndPointInfo EndPointInfoI = 4;
inline bool ProtoMessage::_internal_has_endpointinfoi() const {
  return data_case() == kEndPointInfoI;
}
inline bool ProtoMessage::has_endpointinfoi() const {
  return _internal_has_endpointinfoi();
}
inline void ProtoMessage::set_has_endpointinfoi() {
  _oneof_case_[0] = kEndPointInfoI;
}
inline void ProtoMessage::clear_endpointinfoi() {
  if (_internal_has_endpointinfoi()) {
    delete data_.endpointinfoi_;
    clear_has_data();
  }
}
inline ::EndPointInfo* ProtoMessage::release_endpointinfoi() {
  // @@protoc_insertion_point(field_release:ProtoMessage.EndPointInfoI)
  if (_internal_has_endpointinfoi()) {
    clear_has_data();
      ::EndPointInfo* temp = data_.endpointinfoi_;
    data_.endpointinfoi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::EndPointInfo& ProtoMessage::_internal_endpointinfoi() const {
  return _internal_has_endpointinfoi()
      ? *data_.endpointinfoi_
      : *reinterpret_cast< ::EndPointInfo*>(&::_EndPointInfo_default_instance_);
}
inline const ::EndPointInfo& ProtoMessage::endpointinfoi() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.EndPointInfoI)
  return _internal_endpointinfoi();
}
inline ::EndPointInfo* ProtoMessage::_internal_mutable_endpointinfoi() {
  if (!_internal_has_endpointinfoi()) {
    clear_data();
    set_has_endpointinfoi();
    data_.endpointinfoi_ = CreateMaybeMessage< ::EndPointInfo >(
        GetArenaNoVirtual());
  }
  return data_.endpointinfoi_;
}
inline ::EndPointInfo* ProtoMessage::mutable_endpointinfoi() {
  // @@protoc_insertion_point(field_mutable:ProtoMessage.EndPointInfoI)
  return _internal_mutable_endpointinfoi();
}

inline bool ProtoMessage::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ProtoMessage::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ProtoMessage::DataCase ProtoMessage::data_case() const {
  return ProtoMessage::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EndPointInfo

// .EndPointInfo.EndPointType type = 1;
inline void EndPointInfo::clear_type() {
  type_ = 0;
}
inline ::EndPointInfo_EndPointType EndPointInfo::_internal_type() const {
  return static_cast< ::EndPointInfo_EndPointType >(type_);
}
inline ::EndPointInfo_EndPointType EndPointInfo::type() const {
  // @@protoc_insertion_point(field_get:EndPointInfo.type)
  return _internal_type();
}
inline void EndPointInfo::_internal_set_type(::EndPointInfo_EndPointType value) {
  
  type_ = value;
}
inline void EndPointInfo::set_type(::EndPointInfo_EndPointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:EndPointInfo.type)
}

// string id = 2;
inline void EndPointInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EndPointInfo::id() const {
  // @@protoc_insertion_point(field_get:EndPointInfo.id)
  return _internal_id();
}
inline void EndPointInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EndPointInfo.id)
}
inline std::string* EndPointInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:EndPointInfo.id)
  return _internal_mutable_id();
}
inline const std::string& EndPointInfo::_internal_id() const {
  return id_.GetNoArena();
}
inline void EndPointInfo::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EndPointInfo::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EndPointInfo.id)
}
inline void EndPointInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EndPointInfo.id)
}
inline void EndPointInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EndPointInfo.id)
}
inline std::string* EndPointInfo::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndPointInfo::release_id() {
  // @@protoc_insertion_point(field_release:EndPointInfo.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndPointInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:EndPointInfo.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EndPointInfo_EndPointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EndPointInfo_EndPointType>() {
  return ::EndPointInfo_EndPointType_descriptor();
}
template <> struct is_proto_enum< ::ProtoMessage_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMessage_DataType>() {
  return ::ProtoMessage_DataType_descriptor();
}
template <> struct is_proto_enum< ::EndPointInfo_EndPointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EndPointInfo_EndPointType>() {
  return ::EndPointInfo_EndPointType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RDPBoost_2eproto
